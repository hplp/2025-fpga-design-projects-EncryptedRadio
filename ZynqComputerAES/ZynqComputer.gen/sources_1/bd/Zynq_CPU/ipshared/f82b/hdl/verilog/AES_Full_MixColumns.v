// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Version: 2021.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module AES_Full_MixColumns (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        state_address0,
        state_ce0,
        state_we0,
        state_d0,
        state_q0,
        state_address1,
        state_ce1,
        state_we1,
        state_d1,
        state_q1
);

parameter    ap_ST_fsm_state1 = 18'd1;
parameter    ap_ST_fsm_state2 = 18'd2;
parameter    ap_ST_fsm_state3 = 18'd4;
parameter    ap_ST_fsm_state4 = 18'd8;
parameter    ap_ST_fsm_state5 = 18'd16;
parameter    ap_ST_fsm_state6 = 18'd32;
parameter    ap_ST_fsm_state7 = 18'd64;
parameter    ap_ST_fsm_state8 = 18'd128;
parameter    ap_ST_fsm_state9 = 18'd256;
parameter    ap_ST_fsm_state10 = 18'd512;
parameter    ap_ST_fsm_state11 = 18'd1024;
parameter    ap_ST_fsm_state12 = 18'd2048;
parameter    ap_ST_fsm_state13 = 18'd4096;
parameter    ap_ST_fsm_state14 = 18'd8192;
parameter    ap_ST_fsm_state15 = 18'd16384;
parameter    ap_ST_fsm_state16 = 18'd32768;
parameter    ap_ST_fsm_state17 = 18'd65536;
parameter    ap_ST_fsm_state18 = 18'd131072;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] state_address0;
output   state_ce0;
output   state_we0;
output  [7:0] state_d0;
input  [7:0] state_q0;
output  [3:0] state_address1;
output   state_ce1;
output   state_we1;
output  [7:0] state_d1;
input  [7:0] state_q1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[3:0] state_address0;
reg state_ce0;
reg state_we0;
reg[7:0] state_d0;
reg[3:0] state_address1;
reg state_ce1;
reg state_we1;
reg[7:0] state_d1;

(* fsm_encoding = "none" *) reg   [17:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [7:0] mul02_address0;
reg    mul02_ce0;
wire   [7:0] mul02_q0;
reg   [7:0] mul03_address0;
reg    mul03_ce0;
wire   [7:0] mul03_q0;
reg   [7:0] reg_457;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state5;
reg   [7:0] reg_461;
wire    ap_CS_fsm_state6;
reg   [7:0] reg_466;
wire    ap_CS_fsm_state3;
reg   [7:0] reg_471;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state9;
reg   [7:0] reg_476;
wire    ap_CS_fsm_state8;
wire   [3:0] state_addr_reg_839;
wire   [3:0] state_addr_27_reg_844;
wire   [63:0] zext_ln77_fu_481_p1;
reg   [63:0] zext_ln77_reg_849;
wire   [63:0] zext_ln77_1_fu_486_p1;
reg   [63:0] zext_ln77_1_reg_859;
wire   [3:0] state_addr_28_reg_869;
wire   [3:0] state_addr_29_reg_874;
wire   [7:0] xor_ln77_2_fu_503_p2;
reg   [7:0] xor_ln77_2_reg_879;
wire   [63:0] zext_ln78_fu_509_p1;
reg   [63:0] zext_ln78_reg_889;
wire   [3:0] state_addr_30_reg_899;
wire   [3:0] state_addr_31_reg_904;
wire   [7:0] xor_ln78_2_fu_526_p2;
reg   [7:0] xor_ln78_2_reg_909;
wire   [63:0] zext_ln79_fu_532_p1;
reg   [63:0] zext_ln79_reg_919;
reg   [7:0] state_load_31_reg_929;
wire   [3:0] state_addr_32_reg_936;
wire   [3:0] state_addr_33_reg_941;
wire   [7:0] xor_ln79_2_fu_549_p2;
reg   [7:0] xor_ln79_2_reg_946;
wire   [3:0] state_addr_34_reg_961;
wire   [3:0] state_addr_35_reg_966;
wire   [7:0] xor_ln80_2_fu_567_p2;
reg   [7:0] xor_ln80_2_reg_971;
wire   [63:0] zext_ln82_fu_573_p1;
reg   [63:0] zext_ln82_reg_976;
wire   [63:0] zext_ln82_1_fu_578_p1;
reg   [63:0] zext_ln82_1_reg_986;
wire   [3:0] state_addr_36_reg_996;
wire   [3:0] state_addr_37_reg_1001;
wire   [7:0] xor_ln82_2_fu_594_p2;
reg   [7:0] xor_ln82_2_reg_1006;
wire    ap_CS_fsm_state7;
wire   [63:0] zext_ln83_fu_600_p1;
reg   [63:0] zext_ln83_reg_1016;
reg   [7:0] state_load_36_reg_1026;
reg   [7:0] state_load_37_reg_1033;
wire   [7:0] xor_ln83_2_fu_617_p2;
reg   [7:0] xor_ln83_2_reg_1052;
wire   [63:0] zext_ln84_fu_623_p1;
reg   [63:0] zext_ln84_reg_1062;
reg   [7:0] state_load_39_reg_1072;
wire   [7:0] xor_ln84_2_fu_639_p2;
reg   [7:0] xor_ln84_2_reg_1091;
reg   [7:0] state_load_41_reg_1106;
wire   [7:0] xor_ln85_2_fu_656_p2;
reg   [7:0] xor_ln85_2_reg_1113;
wire    ap_CS_fsm_state10;
wire   [63:0] zext_ln87_fu_662_p1;
reg   [63:0] zext_ln87_reg_1118;
wire   [63:0] zext_ln87_1_fu_667_p1;
reg   [63:0] zext_ln87_1_reg_1128;
wire   [7:0] xor_ln87_2_fu_682_p2;
reg   [7:0] xor_ln87_2_reg_1138;
wire    ap_CS_fsm_state11;
wire   [63:0] zext_ln88_fu_688_p1;
reg   [63:0] zext_ln88_reg_1148;
wire   [7:0] xor_ln88_2_fu_703_p2;
reg   [7:0] xor_ln88_2_reg_1158;
wire    ap_CS_fsm_state12;
wire   [63:0] zext_ln89_fu_709_p1;
reg   [63:0] zext_ln89_reg_1168;
wire   [7:0] xor_ln89_2_fu_725_p2;
reg   [7:0] xor_ln89_2_reg_1178;
wire    ap_CS_fsm_state13;
wire   [63:0] zext_ln92_fu_749_p1;
reg   [63:0] zext_ln92_reg_1193;
wire    ap_CS_fsm_state14;
wire   [63:0] zext_ln92_1_fu_754_p1;
reg   [63:0] zext_ln92_1_reg_1203;
wire    ap_CS_fsm_state15;
wire   [63:0] zext_ln93_fu_776_p1;
reg   [63:0] zext_ln93_reg_1218;
wire    ap_CS_fsm_state16;
wire   [63:0] zext_ln94_fu_799_p1;
reg   [63:0] zext_ln94_reg_1233;
wire    ap_CS_fsm_state17;
wire   [7:0] xor_ln90_2_fu_742_p2;
wire   [7:0] xor_ln92_2_fu_769_p2;
wire   [7:0] xor_ln93_2_fu_792_p2;
wire   [7:0] xor_ln94_2_fu_814_p2;
wire    ap_CS_fsm_state18;
wire   [7:0] xor_ln95_2_fu_832_p2;
wire   [7:0] xor_ln77_1_fu_497_p2;
wire   [7:0] xor_ln77_fu_491_p2;
wire   [7:0] xor_ln78_1_fu_520_p2;
wire   [7:0] xor_ln78_fu_514_p2;
wire   [7:0] xor_ln79_1_fu_543_p2;
wire   [7:0] xor_ln79_fu_537_p2;
wire   [7:0] xor_ln80_1_fu_561_p2;
wire   [7:0] xor_ln80_fu_555_p2;
wire   [7:0] xor_ln82_1_fu_588_p2;
wire   [7:0] xor_ln82_fu_582_p2;
wire   [7:0] xor_ln83_1_fu_611_p2;
wire   [7:0] xor_ln83_fu_605_p2;
wire   [7:0] xor_ln84_1_fu_633_p2;
wire   [7:0] xor_ln84_fu_628_p2;
wire   [7:0] xor_ln85_1_fu_650_p2;
wire   [7:0] xor_ln85_fu_645_p2;
wire   [7:0] xor_ln87_1_fu_678_p2;
wire   [7:0] xor_ln87_fu_672_p2;
wire   [7:0] xor_ln88_1_fu_697_p2;
wire   [7:0] xor_ln88_fu_692_p2;
wire   [7:0] xor_ln89_1_fu_719_p2;
wire   [7:0] xor_ln89_fu_713_p2;
wire   [7:0] xor_ln90_1_fu_736_p2;
wire   [7:0] xor_ln90_fu_731_p2;
wire   [7:0] xor_ln92_1_fu_764_p2;
wire   [7:0] xor_ln92_fu_758_p2;
wire   [7:0] xor_ln93_1_fu_786_p2;
wire   [7:0] xor_ln93_fu_781_p2;
wire   [7:0] xor_ln94_1_fu_808_p2;
wire   [7:0] xor_ln94_fu_803_p2;
wire   [7:0] xor_ln95_1_fu_826_p2;
wire   [7:0] xor_ln95_fu_821_p2;
reg   [17:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
wire    ap_ST_fsm_state11_blk;
wire    ap_ST_fsm_state12_blk;
wire    ap_ST_fsm_state13_blk;
wire    ap_ST_fsm_state14_blk;
wire    ap_ST_fsm_state15_blk;
wire    ap_ST_fsm_state16_blk;
wire    ap_ST_fsm_state17_blk;
wire    ap_ST_fsm_state18_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 18'd1;
end

AES_Full_MixColumns_mul02_ROM_AUTO_1R #(
    .DataWidth( 8 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
mul02_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(mul02_address0),
    .ce0(mul02_ce0),
    .q0(mul02_q0)
);

AES_Full_MixColumns_mul03_ROM_AUTO_1R #(
    .DataWidth( 8 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
mul03_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(mul03_address0),
    .ce0(mul03_ce0),
    .q0(mul03_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        reg_461 <= state_q1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        reg_461 <= state_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        reg_466 <= state_q0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        reg_466 <= state_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state4))) begin
        reg_471 <= state_q1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        reg_471 <= state_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        reg_476 <= state_q1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        reg_476 <= state_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state2))) begin
        reg_457 <= state_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        state_load_31_reg_929 <= state_q0;
        xor_ln78_2_reg_909 <= xor_ln78_2_fu_526_p2;
        zext_ln79_reg_919[7 : 0] <= zext_ln79_fu_532_p1[7 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        state_load_36_reg_1026 <= state_q1;
        state_load_37_reg_1033 <= state_q0;
        xor_ln82_2_reg_1006 <= xor_ln82_2_fu_594_p2;
        zext_ln83_reg_1016[7 : 0] <= zext_ln83_fu_600_p1[7 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        state_load_39_reg_1072 <= state_q0;
        xor_ln83_2_reg_1052 <= xor_ln83_2_fu_617_p2;
        zext_ln84_reg_1062[7 : 0] <= zext_ln84_fu_623_p1[7 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        state_load_41_reg_1106 <= state_q0;
        xor_ln84_2_reg_1091 <= xor_ln84_2_fu_639_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        xor_ln77_2_reg_879 <= xor_ln77_2_fu_503_p2;
        zext_ln78_reg_889[7 : 0] <= zext_ln78_fu_509_p1[7 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        xor_ln79_2_reg_946 <= xor_ln79_2_fu_549_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        xor_ln80_2_reg_971 <= xor_ln80_2_fu_567_p2;
        zext_ln82_1_reg_986[7 : 0] <= zext_ln82_1_fu_578_p1[7 : 0];
        zext_ln82_reg_976[7 : 0] <= zext_ln82_fu_573_p1[7 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        xor_ln85_2_reg_1113 <= xor_ln85_2_fu_656_p2;
        zext_ln87_1_reg_1128[7 : 0] <= zext_ln87_1_fu_667_p1[7 : 0];
        zext_ln87_reg_1118[7 : 0] <= zext_ln87_fu_662_p1[7 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        xor_ln87_2_reg_1138 <= xor_ln87_2_fu_682_p2;
        zext_ln88_reg_1148[7 : 0] <= zext_ln88_fu_688_p1[7 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        xor_ln88_2_reg_1158 <= xor_ln88_2_fu_703_p2;
        zext_ln89_reg_1168[7 : 0] <= zext_ln89_fu_709_p1[7 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        xor_ln89_2_reg_1178 <= xor_ln89_2_fu_725_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        zext_ln77_1_reg_859[7 : 0] <= zext_ln77_1_fu_486_p1[7 : 0];
        zext_ln77_reg_849[7 : 0] <= zext_ln77_fu_481_p1[7 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        zext_ln92_1_reg_1203[7 : 0] <= zext_ln92_1_fu_754_p1[7 : 0];
        zext_ln92_reg_1193[7 : 0] <= zext_ln92_fu_749_p1[7 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        zext_ln93_reg_1218[7 : 0] <= zext_ln93_fu_776_p1[7 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        zext_ln94_reg_1233[7 : 0] <= zext_ln94_fu_799_p1[7 : 0];
    end
end

assign ap_ST_fsm_state10_blk = 1'b0;

assign ap_ST_fsm_state11_blk = 1'b0;

assign ap_ST_fsm_state12_blk = 1'b0;

assign ap_ST_fsm_state13_blk = 1'b0;

assign ap_ST_fsm_state14_blk = 1'b0;

assign ap_ST_fsm_state15_blk = 1'b0;

assign ap_ST_fsm_state16_blk = 1'b0;

assign ap_ST_fsm_state17_blk = 1'b0;

assign ap_ST_fsm_state18_blk = 1'b0;

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state18) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        mul02_address0 = zext_ln94_reg_1233;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        mul02_address0 = zext_ln93_reg_1218;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        mul02_address0 = zext_ln92_1_reg_1203;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        mul02_address0 = zext_ln92_fu_749_p1;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        mul02_address0 = zext_ln89_reg_1168;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        mul02_address0 = zext_ln88_reg_1148;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        mul02_address0 = zext_ln87_1_reg_1128;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        mul02_address0 = zext_ln87_fu_662_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        mul02_address0 = zext_ln84_reg_1062;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        mul02_address0 = zext_ln83_reg_1016;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        mul02_address0 = zext_ln82_1_reg_986;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        mul02_address0 = zext_ln82_fu_573_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        mul02_address0 = zext_ln79_reg_919;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        mul02_address0 = zext_ln78_reg_889;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        mul02_address0 = zext_ln77_1_reg_859;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        mul02_address0 = zext_ln77_fu_481_p1;
    end else begin
        mul02_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state8))) begin
        mul02_ce0 = 1'b1;
    end else begin
        mul02_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        mul03_address0 = zext_ln92_reg_1193;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        mul03_address0 = zext_ln94_fu_799_p1;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        mul03_address0 = zext_ln93_fu_776_p1;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        mul03_address0 = zext_ln92_1_fu_754_p1;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        mul03_address0 = zext_ln87_reg_1118;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        mul03_address0 = zext_ln89_fu_709_p1;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        mul03_address0 = zext_ln88_fu_688_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        mul03_address0 = zext_ln87_1_fu_667_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        mul03_address0 = zext_ln82_reg_976;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        mul03_address0 = zext_ln84_fu_623_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        mul03_address0 = zext_ln83_fu_600_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        mul03_address0 = zext_ln82_1_fu_578_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        mul03_address0 = zext_ln77_reg_849;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        mul03_address0 = zext_ln79_fu_532_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        mul03_address0 = zext_ln78_fu_509_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        mul03_address0 = zext_ln77_1_fu_486_p1;
    end else begin
        mul03_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state8))) begin
        mul03_ce0 = 1'b1;
    end else begin
        mul03_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        state_address0 = 64'd14;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        state_address0 = 64'd12;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        state_address0 = state_addr_37_reg_1001;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        state_address0 = state_addr_35_reg_966;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        state_address0 = state_addr_33_reg_941;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        state_address0 = state_addr_31_reg_904;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        state_address0 = state_addr_29_reg_874;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        state_address0 = state_addr_27_reg_844;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        state_address0 = 64'd15;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        state_address0 = 64'd13;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        state_address0 = 64'd11;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        state_address0 = 64'd9;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        state_address0 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        state_address0 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        state_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        state_address0 = 64'd1;
    end else begin
        state_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        state_address1 = 64'd15;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        state_address1 = 64'd13;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        state_address1 = state_addr_36_reg_996;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        state_address1 = state_addr_34_reg_961;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        state_address1 = state_addr_32_reg_936;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        state_address1 = state_addr_30_reg_899;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        state_address1 = state_addr_28_reg_869;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        state_address1 = state_addr_reg_839;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        state_address1 = 64'd14;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        state_address1 = 64'd12;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        state_address1 = 64'd10;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        state_address1 = 64'd8;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        state_address1 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        state_address1 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        state_address1 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        state_address1 = 64'd0;
    end else begin
        state_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state8) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        state_ce0 = 1'b1;
    end else begin
        state_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state8) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        state_ce1 = 1'b1;
    end else begin
        state_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        state_d0 = xor_ln94_2_fu_814_p2;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        state_d0 = xor_ln92_2_fu_769_p2;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        state_d0 = xor_ln90_2_fu_742_p2;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        state_d0 = xor_ln88_2_reg_1158;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        state_d0 = xor_ln85_2_reg_1113;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        state_d0 = xor_ln83_2_reg_1052;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        state_d0 = xor_ln80_2_reg_971;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        state_d0 = xor_ln78_2_reg_909;
    end else begin
        state_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        state_d1 = xor_ln95_2_fu_832_p2;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        state_d1 = xor_ln93_2_fu_792_p2;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        state_d1 = xor_ln89_2_reg_1178;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        state_d1 = xor_ln87_2_reg_1138;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        state_d1 = xor_ln84_2_reg_1091;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        state_d1 = xor_ln82_2_reg_1006;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        state_d1 = xor_ln79_2_reg_946;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        state_d1 = xor_ln77_2_reg_879;
    end else begin
        state_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10))) begin
        state_we0 = 1'b1;
    end else begin
        state_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10))) begin
        state_we1 = 1'b1;
    end else begin
        state_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign state_addr_27_reg_844 = 64'd1;

assign state_addr_28_reg_869 = 64'd2;

assign state_addr_29_reg_874 = 64'd3;

assign state_addr_30_reg_899 = 64'd4;

assign state_addr_31_reg_904 = 64'd5;

assign state_addr_32_reg_936 = 64'd6;

assign state_addr_33_reg_941 = 64'd7;

assign state_addr_34_reg_961 = 64'd8;

assign state_addr_35_reg_966 = 64'd9;

assign state_addr_36_reg_996 = 64'd10;

assign state_addr_37_reg_1001 = 64'd11;

assign state_addr_reg_839 = 64'd0;

assign xor_ln77_1_fu_497_p2 = (state_q1 ^ state_q0);

assign xor_ln77_2_fu_503_p2 = (xor_ln77_fu_491_p2 ^ xor_ln77_1_fu_497_p2);

assign xor_ln77_fu_491_p2 = (mul03_q0 ^ mul02_q0);

assign xor_ln78_1_fu_520_p2 = (mul03_q0 ^ mul02_q0);

assign xor_ln78_2_fu_526_p2 = (xor_ln78_fu_514_p2 ^ xor_ln78_1_fu_520_p2);

assign xor_ln78_fu_514_p2 = (reg_471 ^ reg_457);

assign xor_ln79_1_fu_543_p2 = (mul03_q0 ^ mul02_q0);

assign xor_ln79_2_fu_549_p2 = (xor_ln79_fu_537_p2 ^ xor_ln79_1_fu_543_p2);

assign xor_ln79_fu_537_p2 = (reg_461 ^ reg_457);

assign xor_ln80_1_fu_561_p2 = (mul03_q0 ^ mul02_q0);

assign xor_ln80_2_fu_567_p2 = (xor_ln80_fu_555_p2 ^ xor_ln80_1_fu_561_p2);

assign xor_ln80_fu_555_p2 = (reg_466 ^ reg_461);

assign xor_ln82_1_fu_588_p2 = (reg_476 ^ reg_457);

assign xor_ln82_2_fu_594_p2 = (xor_ln82_fu_582_p2 ^ xor_ln82_1_fu_588_p2);

assign xor_ln82_fu_582_p2 = (mul03_q0 ^ mul02_q0);

assign xor_ln83_1_fu_611_p2 = (mul03_q0 ^ mul02_q0);

assign xor_ln83_2_fu_617_p2 = (xor_ln83_fu_605_p2 ^ xor_ln83_1_fu_611_p2);

assign xor_ln83_fu_605_p2 = (reg_476 ^ reg_471);

assign xor_ln84_1_fu_633_p2 = (mul03_q0 ^ mul02_q0);

assign xor_ln84_2_fu_639_p2 = (xor_ln84_fu_628_p2 ^ xor_ln84_1_fu_633_p2);

assign xor_ln84_fu_628_p2 = (state_load_31_reg_929 ^ reg_471);

assign xor_ln85_1_fu_650_p2 = (mul03_q0 ^ mul02_q0);

assign xor_ln85_2_fu_656_p2 = (xor_ln85_fu_645_p2 ^ xor_ln85_1_fu_650_p2);

assign xor_ln85_fu_645_p2 = (state_load_31_reg_929 ^ reg_457);

assign xor_ln87_1_fu_678_p2 = (state_load_37_reg_1033 ^ state_load_36_reg_1026);

assign xor_ln87_2_fu_682_p2 = (xor_ln87_fu_672_p2 ^ xor_ln87_1_fu_678_p2);

assign xor_ln87_fu_672_p2 = (mul03_q0 ^ mul02_q0);

assign xor_ln88_1_fu_697_p2 = (mul03_q0 ^ mul02_q0);

assign xor_ln88_2_fu_703_p2 = (xor_ln88_fu_692_p2 ^ xor_ln88_1_fu_697_p2);

assign xor_ln88_fu_692_p2 = (state_load_37_reg_1033 ^ reg_461);

assign xor_ln89_1_fu_719_p2 = (mul03_q0 ^ mul02_q0);

assign xor_ln89_2_fu_725_p2 = (xor_ln89_fu_713_p2 ^ xor_ln89_1_fu_719_p2);

assign xor_ln89_fu_713_p2 = (reg_466 ^ reg_461);

assign xor_ln90_1_fu_736_p2 = (mul03_q0 ^ mul02_q0);

assign xor_ln90_2_fu_742_p2 = (xor_ln90_fu_731_p2 ^ xor_ln90_1_fu_736_p2);

assign xor_ln90_fu_731_p2 = (state_load_36_reg_1026 ^ reg_466);

assign xor_ln92_1_fu_764_p2 = (state_load_41_reg_1106 ^ reg_471);

assign xor_ln92_2_fu_769_p2 = (xor_ln92_fu_758_p2 ^ xor_ln92_1_fu_764_p2);

assign xor_ln92_fu_758_p2 = (mul03_q0 ^ mul02_q0);

assign xor_ln93_1_fu_786_p2 = (mul03_q0 ^ mul02_q0);

assign xor_ln93_2_fu_792_p2 = (xor_ln93_fu_781_p2 ^ xor_ln93_1_fu_786_p2);

assign xor_ln93_fu_781_p2 = (state_load_41_reg_1106 ^ reg_476);

assign xor_ln94_1_fu_808_p2 = (mul03_q0 ^ mul02_q0);

assign xor_ln94_2_fu_814_p2 = (xor_ln94_fu_803_p2 ^ xor_ln94_1_fu_808_p2);

assign xor_ln94_fu_803_p2 = (state_load_39_reg_1072 ^ reg_476);

assign xor_ln95_1_fu_826_p2 = (mul03_q0 ^ mul02_q0);

assign xor_ln95_2_fu_832_p2 = (xor_ln95_fu_821_p2 ^ xor_ln95_1_fu_826_p2);

assign xor_ln95_fu_821_p2 = (state_load_39_reg_1072 ^ reg_471);

assign zext_ln77_1_fu_486_p1 = state_q0;

assign zext_ln77_fu_481_p1 = state_q1;

assign zext_ln78_fu_509_p1 = state_q1;

assign zext_ln79_fu_532_p1 = reg_471;

assign zext_ln82_1_fu_578_p1 = state_load_31_reg_929;

assign zext_ln82_fu_573_p1 = reg_471;

assign zext_ln83_fu_600_p1 = reg_457;

assign zext_ln84_fu_623_p1 = reg_476;

assign zext_ln87_1_fu_667_p1 = reg_466;

assign zext_ln87_fu_662_p1 = reg_461;

assign zext_ln88_fu_688_p1 = state_load_36_reg_1026;

assign zext_ln89_fu_709_p1 = state_load_37_reg_1033;

assign zext_ln92_1_fu_754_p1 = state_load_39_reg_1072;

assign zext_ln92_fu_749_p1 = reg_476;

assign zext_ln93_fu_776_p1 = reg_471;

assign zext_ln94_fu_799_p1 = state_load_41_reg_1106;

always @ (posedge ap_clk) begin
    zext_ln77_reg_849[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
    zext_ln77_1_reg_859[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
    zext_ln78_reg_889[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
    zext_ln79_reg_919[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
    zext_ln82_reg_976[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
    zext_ln82_1_reg_986[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
    zext_ln83_reg_1016[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
    zext_ln84_reg_1062[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
    zext_ln87_reg_1118[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
    zext_ln87_1_reg_1128[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
    zext_ln88_reg_1148[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
    zext_ln89_reg_1168[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
    zext_ln92_reg_1193[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
    zext_ln92_1_reg_1203[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
    zext_ln93_reg_1218[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
    zext_ln94_reg_1233[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
end

endmodule //AES_Full_MixColumns
