// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Version: 2021.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="AES_Full_AES_Full,hls_ip_2021_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.300000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=9,HLS_SYN_DSP=0,HLS_SYN_FF=2186,HLS_SYN_LUT=8042,HLS_VERSION=2021_2}" *)

module AES_Full (
        ap_local_block,
        ap_clk,
        ap_rst_n,
        s_axi_CRTLS_AWVALID,
        s_axi_CRTLS_AWREADY,
        s_axi_CRTLS_AWADDR,
        s_axi_CRTLS_WVALID,
        s_axi_CRTLS_WREADY,
        s_axi_CRTLS_WDATA,
        s_axi_CRTLS_WSTRB,
        s_axi_CRTLS_ARVALID,
        s_axi_CRTLS_ARREADY,
        s_axi_CRTLS_ARADDR,
        s_axi_CRTLS_RVALID,
        s_axi_CRTLS_RREADY,
        s_axi_CRTLS_RDATA,
        s_axi_CRTLS_RRESP,
        s_axi_CRTLS_BVALID,
        s_axi_CRTLS_BREADY,
        s_axi_CRTLS_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 45'd1;
parameter    ap_ST_fsm_state2 = 45'd2;
parameter    ap_ST_fsm_state3 = 45'd4;
parameter    ap_ST_fsm_state4 = 45'd8;
parameter    ap_ST_fsm_state5 = 45'd16;
parameter    ap_ST_fsm_state6 = 45'd32;
parameter    ap_ST_fsm_state7 = 45'd64;
parameter    ap_ST_fsm_state8 = 45'd128;
parameter    ap_ST_fsm_state9 = 45'd256;
parameter    ap_ST_fsm_state10 = 45'd512;
parameter    ap_ST_fsm_state11 = 45'd1024;
parameter    ap_ST_fsm_state12 = 45'd2048;
parameter    ap_ST_fsm_state13 = 45'd4096;
parameter    ap_ST_fsm_state14 = 45'd8192;
parameter    ap_ST_fsm_state15 = 45'd16384;
parameter    ap_ST_fsm_state16 = 45'd32768;
parameter    ap_ST_fsm_state17 = 45'd65536;
parameter    ap_ST_fsm_state18 = 45'd131072;
parameter    ap_ST_fsm_state19 = 45'd262144;
parameter    ap_ST_fsm_state20 = 45'd524288;
parameter    ap_ST_fsm_state21 = 45'd1048576;
parameter    ap_ST_fsm_state22 = 45'd2097152;
parameter    ap_ST_fsm_state23 = 45'd4194304;
parameter    ap_ST_fsm_state24 = 45'd8388608;
parameter    ap_ST_fsm_state25 = 45'd16777216;
parameter    ap_ST_fsm_state26 = 45'd33554432;
parameter    ap_ST_fsm_state27 = 45'd67108864;
parameter    ap_ST_fsm_state28 = 45'd134217728;
parameter    ap_ST_fsm_state29 = 45'd268435456;
parameter    ap_ST_fsm_state30 = 45'd536870912;
parameter    ap_ST_fsm_state31 = 45'd1073741824;
parameter    ap_ST_fsm_state32 = 45'd2147483648;
parameter    ap_ST_fsm_state33 = 45'd4294967296;
parameter    ap_ST_fsm_state34 = 45'd8589934592;
parameter    ap_ST_fsm_state35 = 45'd17179869184;
parameter    ap_ST_fsm_state36 = 45'd34359738368;
parameter    ap_ST_fsm_state37 = 45'd68719476736;
parameter    ap_ST_fsm_state38 = 45'd137438953472;
parameter    ap_ST_fsm_state39 = 45'd274877906944;
parameter    ap_ST_fsm_state40 = 45'd549755813888;
parameter    ap_ST_fsm_state41 = 45'd1099511627776;
parameter    ap_ST_fsm_state42 = 45'd2199023255552;
parameter    ap_ST_fsm_state43 = 45'd4398046511104;
parameter    ap_ST_fsm_state44 = 45'd8796093022208;
parameter    ap_ST_fsm_state45 = 45'd17592186044416;
parameter    C_S_AXI_CRTLS_DATA_WIDTH = 32;
parameter    C_S_AXI_CRTLS_ADDR_WIDTH = 9;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CRTLS_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

output   ap_local_block;
input   ap_clk;
input   ap_rst_n;
input   s_axi_CRTLS_AWVALID;
output   s_axi_CRTLS_AWREADY;
input  [C_S_AXI_CRTLS_ADDR_WIDTH - 1:0] s_axi_CRTLS_AWADDR;
input   s_axi_CRTLS_WVALID;
output   s_axi_CRTLS_WREADY;
input  [C_S_AXI_CRTLS_DATA_WIDTH - 1:0] s_axi_CRTLS_WDATA;
input  [C_S_AXI_CRTLS_WSTRB_WIDTH - 1:0] s_axi_CRTLS_WSTRB;
input   s_axi_CRTLS_ARVALID;
output   s_axi_CRTLS_ARREADY;
input  [C_S_AXI_CRTLS_ADDR_WIDTH - 1:0] s_axi_CRTLS_ARADDR;
output   s_axi_CRTLS_RVALID;
input   s_axi_CRTLS_RREADY;
output  [C_S_AXI_CRTLS_DATA_WIDTH - 1:0] s_axi_CRTLS_RDATA;
output  [1:0] s_axi_CRTLS_RRESP;
output   s_axi_CRTLS_BVALID;
input   s_axi_CRTLS_BREADY;
output  [1:0] s_axi_CRTLS_BRESP;
output   interrupt;

wire   [0:0] ap_local_deadlock;
 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [44:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire    mode_cipher;
wire    mode_inverse_cipher;
reg   [3:0] data_in_address0;
reg    data_in_ce0;
wire   [7:0] data_in_q0;
reg   [7:0] expandedKey_address0;
reg    expandedKey_ce0;
wire   [7:0] expandedKey_q0;
wire   [15:0] Nr;
reg   [3:0] data_out_address0;
reg    data_out_ce0;
reg    data_out_we0;
reg   [7:0] data_out_d0;
reg   [15:0] Nr_read_reg_227;
reg   [0:0] mode_inverse_cipher_read_reg_236;
wire   [0:0] mode_cipher_read_read_fu_116_p2;
reg   [0:0] mode_cipher_read_reg_240;
wire   [16:0] sub_i_fu_198_p2;
reg   [16:0] sub_i_reg_244;
wire    ap_CS_fsm_state20;
wire   [3:0] trunc_ln220_fu_205_p1;
reg   [3:0] trunc_ln220_reg_249;
wire    ap_CS_fsm_state25;
wire   [16:0] sub19_i_fu_220_p2;
reg   [16:0] sub19_i_reg_254;
wire    ap_CS_fsm_state42;
reg   [3:0] state_1_address0;
reg    state_1_ce0;
reg    state_1_we0;
reg   [7:0] state_1_d0;
wire   [7:0] state_1_q0;
reg   [3:0] state_1_address1;
reg    state_1_ce1;
reg    state_1_we1;
reg   [7:0] state_1_d1;
wire   [7:0] state_1_q1;
reg   [3:0] state_address0;
reg    state_ce0;
reg    state_we0;
reg   [7:0] state_d0;
wire   [7:0] state_q0;
reg   [3:0] state_address1;
reg    state_ce1;
reg    state_we1;
reg   [7:0] state_d1;
wire   [7:0] state_q1;
wire    grp_AES_Full_Pipeline_L_copy_fu_122_ap_start;
wire    grp_AES_Full_Pipeline_L_copy_fu_122_ap_done;
wire    grp_AES_Full_Pipeline_L_copy_fu_122_ap_idle;
wire    grp_AES_Full_Pipeline_L_copy_fu_122_ap_ready;
wire   [3:0] grp_AES_Full_Pipeline_L_copy_fu_122_data_in_address0;
wire    grp_AES_Full_Pipeline_L_copy_fu_122_data_in_ce0;
wire   [3:0] grp_AES_Full_Pipeline_L_copy_fu_122_state_address0;
wire    grp_AES_Full_Pipeline_L_copy_fu_122_state_ce0;
wire    grp_AES_Full_Pipeline_L_copy_fu_122_state_we0;
wire   [7:0] grp_AES_Full_Pipeline_L_copy_fu_122_state_d0;
wire    grp_AddRoundKey_fu_130_ap_start;
wire    grp_AddRoundKey_fu_130_ap_done;
wire    grp_AddRoundKey_fu_130_ap_idle;
wire    grp_AddRoundKey_fu_130_ap_ready;
wire   [3:0] grp_AddRoundKey_fu_130_state_address0;
wire    grp_AddRoundKey_fu_130_state_ce0;
wire    grp_AddRoundKey_fu_130_state_we0;
wire   [7:0] grp_AddRoundKey_fu_130_state_d0;
reg   [7:0] grp_AddRoundKey_fu_130_state_q0;
wire   [3:0] grp_AddRoundKey_fu_130_state_address1;
wire    grp_AddRoundKey_fu_130_state_ce1;
wire    grp_AddRoundKey_fu_130_state_we1;
wire   [7:0] grp_AddRoundKey_fu_130_state_d1;
reg   [7:0] grp_AddRoundKey_fu_130_state_q1;
wire   [7:0] grp_AddRoundKey_fu_130_expandedKey_address0;
wire    grp_AddRoundKey_fu_130_expandedKey_ce0;
reg   [7:0] grp_AddRoundKey_fu_130_roundKey;
wire    grp_AES_Full_Pipeline_L_rounds_fu_139_ap_start;
wire    grp_AES_Full_Pipeline_L_rounds_fu_139_ap_done;
wire    grp_AES_Full_Pipeline_L_rounds_fu_139_ap_idle;
wire    grp_AES_Full_Pipeline_L_rounds_fu_139_ap_ready;
wire   [3:0] grp_AES_Full_Pipeline_L_rounds_fu_139_state_address0;
wire    grp_AES_Full_Pipeline_L_rounds_fu_139_state_ce0;
wire    grp_AES_Full_Pipeline_L_rounds_fu_139_state_we0;
wire   [7:0] grp_AES_Full_Pipeline_L_rounds_fu_139_state_d0;
wire   [3:0] grp_AES_Full_Pipeline_L_rounds_fu_139_state_address1;
wire    grp_AES_Full_Pipeline_L_rounds_fu_139_state_ce1;
wire    grp_AES_Full_Pipeline_L_rounds_fu_139_state_we1;
wire   [7:0] grp_AES_Full_Pipeline_L_rounds_fu_139_state_d1;
wire   [7:0] grp_AES_Full_Pipeline_L_rounds_fu_139_expandedKey_address0;
wire    grp_AES_Full_Pipeline_L_rounds_fu_139_expandedKey_ce0;
wire    grp_AES_Full_Pipeline_L_copy_o_fu_154_ap_start;
wire    grp_AES_Full_Pipeline_L_copy_o_fu_154_ap_done;
wire    grp_AES_Full_Pipeline_L_copy_o_fu_154_ap_idle;
wire    grp_AES_Full_Pipeline_L_copy_o_fu_154_ap_ready;
wire   [3:0] grp_AES_Full_Pipeline_L_copy_o_fu_154_state_address0;
wire    grp_AES_Full_Pipeline_L_copy_o_fu_154_state_ce0;
wire   [3:0] grp_AES_Full_Pipeline_L_copy_o_fu_154_data_out_address0;
wire    grp_AES_Full_Pipeline_L_copy_o_fu_154_data_out_ce0;
wire    grp_AES_Full_Pipeline_L_copy_o_fu_154_data_out_we0;
wire   [7:0] grp_AES_Full_Pipeline_L_copy_o_fu_154_data_out_d0;
wire    grp_AES_Full_Pipeline_L_copy1_fu_161_ap_start;
wire    grp_AES_Full_Pipeline_L_copy1_fu_161_ap_done;
wire    grp_AES_Full_Pipeline_L_copy1_fu_161_ap_idle;
wire    grp_AES_Full_Pipeline_L_copy1_fu_161_ap_ready;
wire   [3:0] grp_AES_Full_Pipeline_L_copy1_fu_161_data_in_address0;
wire    grp_AES_Full_Pipeline_L_copy1_fu_161_data_in_ce0;
wire   [3:0] grp_AES_Full_Pipeline_L_copy1_fu_161_state_1_address0;
wire    grp_AES_Full_Pipeline_L_copy1_fu_161_state_1_ce0;
wire    grp_AES_Full_Pipeline_L_copy1_fu_161_state_1_we0;
wire   [7:0] grp_AES_Full_Pipeline_L_copy1_fu_161_state_1_d0;
wire    grp_AES_Full_Pipeline_L_rounds2_fu_168_ap_start;
wire    grp_AES_Full_Pipeline_L_rounds2_fu_168_ap_done;
wire    grp_AES_Full_Pipeline_L_rounds2_fu_168_ap_idle;
wire    grp_AES_Full_Pipeline_L_rounds2_fu_168_ap_ready;
wire   [3:0] grp_AES_Full_Pipeline_L_rounds2_fu_168_state_1_address0;
wire    grp_AES_Full_Pipeline_L_rounds2_fu_168_state_1_ce0;
wire    grp_AES_Full_Pipeline_L_rounds2_fu_168_state_1_we0;
wire   [7:0] grp_AES_Full_Pipeline_L_rounds2_fu_168_state_1_d0;
wire   [3:0] grp_AES_Full_Pipeline_L_rounds2_fu_168_state_1_address1;
wire    grp_AES_Full_Pipeline_L_rounds2_fu_168_state_1_ce1;
wire    grp_AES_Full_Pipeline_L_rounds2_fu_168_state_1_we1;
wire   [7:0] grp_AES_Full_Pipeline_L_rounds2_fu_168_state_1_d1;
wire   [7:0] grp_AES_Full_Pipeline_L_rounds2_fu_168_expandedKey_address0;
wire    grp_AES_Full_Pipeline_L_rounds2_fu_168_expandedKey_ce0;
wire    grp_AES_Full_Pipeline_L_copy_o3_fu_188_ap_start;
wire    grp_AES_Full_Pipeline_L_copy_o3_fu_188_ap_done;
wire    grp_AES_Full_Pipeline_L_copy_o3_fu_188_ap_idle;
wire    grp_AES_Full_Pipeline_L_copy_o3_fu_188_ap_ready;
wire   [3:0] grp_AES_Full_Pipeline_L_copy_o3_fu_188_state_1_address0;
wire    grp_AES_Full_Pipeline_L_copy_o3_fu_188_state_1_ce0;
wire   [3:0] grp_AES_Full_Pipeline_L_copy_o3_fu_188_data_out_address0;
wire    grp_AES_Full_Pipeline_L_copy_o3_fu_188_data_out_ce0;
wire    grp_AES_Full_Pipeline_L_copy_o3_fu_188_data_out_we0;
wire   [7:0] grp_AES_Full_Pipeline_L_copy_o3_fu_188_data_out_d0;
reg    grp_AES_Full_Pipeline_L_copy_fu_122_ap_start_reg;
wire    ap_CS_fsm_state2;
reg    grp_AddRoundKey_fu_130_ap_start_reg;
reg   [44:0] ap_NS_fsm;
wire    ap_NS_fsm_state3;
wire    ap_CS_fsm_state24;
wire    ap_NS_fsm_state25;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state16;
wire    ap_CS_fsm_state17;
wire    ap_CS_fsm_state18;
wire    ap_CS_fsm_state19;
wire    ap_CS_fsm_state26;
wire    ap_CS_fsm_state27;
wire    ap_CS_fsm_state28;
wire    ap_CS_fsm_state29;
wire    ap_CS_fsm_state30;
wire    ap_CS_fsm_state31;
wire    ap_CS_fsm_state32;
wire    ap_CS_fsm_state33;
wire    ap_CS_fsm_state34;
wire    ap_CS_fsm_state35;
wire    ap_CS_fsm_state36;
wire    ap_CS_fsm_state37;
wire    ap_CS_fsm_state38;
wire    ap_CS_fsm_state39;
wire    ap_CS_fsm_state40;
wire    ap_CS_fsm_state41;
wire   [7:0] shl_ln1_fu_208_p3;
reg    grp_AES_Full_Pipeline_L_rounds_fu_139_ap_start_reg;
wire    ap_CS_fsm_state21;
reg    grp_AES_Full_Pipeline_L_copy_o_fu_154_ap_start_reg;
wire    ap_CS_fsm_state22;
wire    ap_CS_fsm_state23;
reg    grp_AES_Full_Pipeline_L_copy1_fu_161_ap_start_reg;
reg    ap_block_state23_on_subcall_done;
reg    grp_AES_Full_Pipeline_L_rounds2_fu_168_ap_start_reg;
wire    ap_CS_fsm_state43;
reg    grp_AES_Full_Pipeline_L_copy_o3_fu_188_ap_start_reg;
wire    ap_CS_fsm_state44;
wire    ap_CS_fsm_state45;
wire   [16:0] Nr_cast_fu_195_p1;
wire   [16:0] zext_ln220_fu_217_p1;
reg    ap_block_state45_on_subcall_done;
reg    ap_ST_fsm_state1_blk;
reg    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
wire    ap_ST_fsm_state11_blk;
wire    ap_ST_fsm_state12_blk;
wire    ap_ST_fsm_state13_blk;
wire    ap_ST_fsm_state14_blk;
wire    ap_ST_fsm_state15_blk;
wire    ap_ST_fsm_state16_blk;
wire    ap_ST_fsm_state17_blk;
wire    ap_ST_fsm_state18_blk;
wire    ap_ST_fsm_state19_blk;
wire    ap_ST_fsm_state20_blk;
reg    ap_ST_fsm_state21_blk;
wire    ap_ST_fsm_state22_blk;
reg    ap_ST_fsm_state23_blk;
reg    ap_ST_fsm_state24_blk;
wire    ap_ST_fsm_state25_blk;
wire    ap_ST_fsm_state26_blk;
wire    ap_ST_fsm_state27_blk;
wire    ap_ST_fsm_state28_blk;
wire    ap_ST_fsm_state29_blk;
wire    ap_ST_fsm_state30_blk;
wire    ap_ST_fsm_state31_blk;
wire    ap_ST_fsm_state32_blk;
wire    ap_ST_fsm_state33_blk;
wire    ap_ST_fsm_state34_blk;
wire    ap_ST_fsm_state35_blk;
wire    ap_ST_fsm_state36_blk;
wire    ap_ST_fsm_state37_blk;
wire    ap_ST_fsm_state38_blk;
wire    ap_ST_fsm_state39_blk;
wire    ap_ST_fsm_state40_blk;
wire    ap_ST_fsm_state41_blk;
wire    ap_ST_fsm_state42_blk;
reg    ap_ST_fsm_state43_blk;
wire    ap_ST_fsm_state44_blk;
reg    ap_ST_fsm_state45_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 45'd1;
#0 grp_AES_Full_Pipeline_L_copy_fu_122_ap_start_reg = 1'b0;
#0 grp_AddRoundKey_fu_130_ap_start_reg = 1'b0;
#0 grp_AES_Full_Pipeline_L_rounds_fu_139_ap_start_reg = 1'b0;
#0 grp_AES_Full_Pipeline_L_copy_o_fu_154_ap_start_reg = 1'b0;
#0 grp_AES_Full_Pipeline_L_copy1_fu_161_ap_start_reg = 1'b0;
#0 grp_AES_Full_Pipeline_L_rounds2_fu_168_ap_start_reg = 1'b0;
#0 grp_AES_Full_Pipeline_L_copy_o3_fu_188_ap_start_reg = 1'b0;
end

AES_Full_state_1_RAM_AUTO_1R1W #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
state_1_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(state_1_address0),
    .ce0(state_1_ce0),
    .we0(state_1_we0),
    .d0(state_1_d0),
    .q0(state_1_q0),
    .address1(state_1_address1),
    .ce1(state_1_ce1),
    .we1(state_1_we1),
    .d1(state_1_d1),
    .q1(state_1_q1)
);

AES_Full_state_1_RAM_AUTO_1R1W #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
state_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(state_address0),
    .ce0(state_ce0),
    .we0(state_we0),
    .d0(state_d0),
    .q0(state_q0),
    .address1(state_address1),
    .ce1(state_ce1),
    .we1(state_we1),
    .d1(state_d1),
    .q1(state_q1)
);

AES_Full_AES_Full_Pipeline_L_copy grp_AES_Full_Pipeline_L_copy_fu_122(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_AES_Full_Pipeline_L_copy_fu_122_ap_start),
    .ap_done(grp_AES_Full_Pipeline_L_copy_fu_122_ap_done),
    .ap_idle(grp_AES_Full_Pipeline_L_copy_fu_122_ap_idle),
    .ap_ready(grp_AES_Full_Pipeline_L_copy_fu_122_ap_ready),
    .data_in_address0(grp_AES_Full_Pipeline_L_copy_fu_122_data_in_address0),
    .data_in_ce0(grp_AES_Full_Pipeline_L_copy_fu_122_data_in_ce0),
    .data_in_q0(data_in_q0),
    .state_address0(grp_AES_Full_Pipeline_L_copy_fu_122_state_address0),
    .state_ce0(grp_AES_Full_Pipeline_L_copy_fu_122_state_ce0),
    .state_we0(grp_AES_Full_Pipeline_L_copy_fu_122_state_we0),
    .state_d0(grp_AES_Full_Pipeline_L_copy_fu_122_state_d0)
);

AES_Full_AddRoundKey grp_AddRoundKey_fu_130(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_AddRoundKey_fu_130_ap_start),
    .ap_done(grp_AddRoundKey_fu_130_ap_done),
    .ap_idle(grp_AddRoundKey_fu_130_ap_idle),
    .ap_ready(grp_AddRoundKey_fu_130_ap_ready),
    .state_address0(grp_AddRoundKey_fu_130_state_address0),
    .state_ce0(grp_AddRoundKey_fu_130_state_ce0),
    .state_we0(grp_AddRoundKey_fu_130_state_we0),
    .state_d0(grp_AddRoundKey_fu_130_state_d0),
    .state_q0(grp_AddRoundKey_fu_130_state_q0),
    .state_address1(grp_AddRoundKey_fu_130_state_address1),
    .state_ce1(grp_AddRoundKey_fu_130_state_ce1),
    .state_we1(grp_AddRoundKey_fu_130_state_we1),
    .state_d1(grp_AddRoundKey_fu_130_state_d1),
    .state_q1(grp_AddRoundKey_fu_130_state_q1),
    .expandedKey_address0(grp_AddRoundKey_fu_130_expandedKey_address0),
    .expandedKey_ce0(grp_AddRoundKey_fu_130_expandedKey_ce0),
    .expandedKey_q0(expandedKey_q0),
    .roundKey(grp_AddRoundKey_fu_130_roundKey),
    .ap_ce(1'b1)
);

AES_Full_AES_Full_Pipeline_L_rounds grp_AES_Full_Pipeline_L_rounds_fu_139(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_AES_Full_Pipeline_L_rounds_fu_139_ap_start),
    .ap_done(grp_AES_Full_Pipeline_L_rounds_fu_139_ap_done),
    .ap_idle(grp_AES_Full_Pipeline_L_rounds_fu_139_ap_idle),
    .ap_ready(grp_AES_Full_Pipeline_L_rounds_fu_139_ap_ready),
    .Nr(Nr_read_reg_227),
    .state_address0(grp_AES_Full_Pipeline_L_rounds_fu_139_state_address0),
    .state_ce0(grp_AES_Full_Pipeline_L_rounds_fu_139_state_ce0),
    .state_we0(grp_AES_Full_Pipeline_L_rounds_fu_139_state_we0),
    .state_d0(grp_AES_Full_Pipeline_L_rounds_fu_139_state_d0),
    .state_q0(state_q0),
    .state_address1(grp_AES_Full_Pipeline_L_rounds_fu_139_state_address1),
    .state_ce1(grp_AES_Full_Pipeline_L_rounds_fu_139_state_ce1),
    .state_we1(grp_AES_Full_Pipeline_L_rounds_fu_139_state_we1),
    .state_d1(grp_AES_Full_Pipeline_L_rounds_fu_139_state_d1),
    .state_q1(state_q1),
    .expandedKey_address0(grp_AES_Full_Pipeline_L_rounds_fu_139_expandedKey_address0),
    .expandedKey_ce0(grp_AES_Full_Pipeline_L_rounds_fu_139_expandedKey_ce0),
    .expandedKey_q0(expandedKey_q0),
    .sub_i(sub_i_reg_244)
);

AES_Full_AES_Full_Pipeline_L_copy_o grp_AES_Full_Pipeline_L_copy_o_fu_154(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_AES_Full_Pipeline_L_copy_o_fu_154_ap_start),
    .ap_done(grp_AES_Full_Pipeline_L_copy_o_fu_154_ap_done),
    .ap_idle(grp_AES_Full_Pipeline_L_copy_o_fu_154_ap_idle),
    .ap_ready(grp_AES_Full_Pipeline_L_copy_o_fu_154_ap_ready),
    .state_address0(grp_AES_Full_Pipeline_L_copy_o_fu_154_state_address0),
    .state_ce0(grp_AES_Full_Pipeline_L_copy_o_fu_154_state_ce0),
    .state_q0(state_q0),
    .data_out_address0(grp_AES_Full_Pipeline_L_copy_o_fu_154_data_out_address0),
    .data_out_ce0(grp_AES_Full_Pipeline_L_copy_o_fu_154_data_out_ce0),
    .data_out_we0(grp_AES_Full_Pipeline_L_copy_o_fu_154_data_out_we0),
    .data_out_d0(grp_AES_Full_Pipeline_L_copy_o_fu_154_data_out_d0)
);

AES_Full_AES_Full_Pipeline_L_copy1 grp_AES_Full_Pipeline_L_copy1_fu_161(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_AES_Full_Pipeline_L_copy1_fu_161_ap_start),
    .ap_done(grp_AES_Full_Pipeline_L_copy1_fu_161_ap_done),
    .ap_idle(grp_AES_Full_Pipeline_L_copy1_fu_161_ap_idle),
    .ap_ready(grp_AES_Full_Pipeline_L_copy1_fu_161_ap_ready),
    .data_in_address0(grp_AES_Full_Pipeline_L_copy1_fu_161_data_in_address0),
    .data_in_ce0(grp_AES_Full_Pipeline_L_copy1_fu_161_data_in_ce0),
    .data_in_q0(data_in_q0),
    .state_1_address0(grp_AES_Full_Pipeline_L_copy1_fu_161_state_1_address0),
    .state_1_ce0(grp_AES_Full_Pipeline_L_copy1_fu_161_state_1_ce0),
    .state_1_we0(grp_AES_Full_Pipeline_L_copy1_fu_161_state_1_we0),
    .state_1_d0(grp_AES_Full_Pipeline_L_copy1_fu_161_state_1_d0)
);

AES_Full_AES_Full_Pipeline_L_rounds2 grp_AES_Full_Pipeline_L_rounds2_fu_168(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_AES_Full_Pipeline_L_rounds2_fu_168_ap_start),
    .ap_done(grp_AES_Full_Pipeline_L_rounds2_fu_168_ap_done),
    .ap_idle(grp_AES_Full_Pipeline_L_rounds2_fu_168_ap_idle),
    .ap_ready(grp_AES_Full_Pipeline_L_rounds2_fu_168_ap_ready),
    .Nr(Nr_read_reg_227),
    .state_1_address0(grp_AES_Full_Pipeline_L_rounds2_fu_168_state_1_address0),
    .state_1_ce0(grp_AES_Full_Pipeline_L_rounds2_fu_168_state_1_ce0),
    .state_1_we0(grp_AES_Full_Pipeline_L_rounds2_fu_168_state_1_we0),
    .state_1_d0(grp_AES_Full_Pipeline_L_rounds2_fu_168_state_1_d0),
    .state_1_q0(state_1_q0),
    .state_1_address1(grp_AES_Full_Pipeline_L_rounds2_fu_168_state_1_address1),
    .state_1_ce1(grp_AES_Full_Pipeline_L_rounds2_fu_168_state_1_ce1),
    .state_1_we1(grp_AES_Full_Pipeline_L_rounds2_fu_168_state_1_we1),
    .state_1_d1(grp_AES_Full_Pipeline_L_rounds2_fu_168_state_1_d1),
    .state_1_q1(state_1_q1),
    .trunc_ln(trunc_ln220_reg_249),
    .expandedKey_address0(grp_AES_Full_Pipeline_L_rounds2_fu_168_expandedKey_address0),
    .expandedKey_ce0(grp_AES_Full_Pipeline_L_rounds2_fu_168_expandedKey_ce0),
    .expandedKey_q0(expandedKey_q0),
    .sub19_i(sub19_i_reg_254)
);

AES_Full_AES_Full_Pipeline_L_copy_o3 grp_AES_Full_Pipeline_L_copy_o3_fu_188(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_AES_Full_Pipeline_L_copy_o3_fu_188_ap_start),
    .ap_done(grp_AES_Full_Pipeline_L_copy_o3_fu_188_ap_done),
    .ap_idle(grp_AES_Full_Pipeline_L_copy_o3_fu_188_ap_idle),
    .ap_ready(grp_AES_Full_Pipeline_L_copy_o3_fu_188_ap_ready),
    .state_1_address0(grp_AES_Full_Pipeline_L_copy_o3_fu_188_state_1_address0),
    .state_1_ce0(grp_AES_Full_Pipeline_L_copy_o3_fu_188_state_1_ce0),
    .state_1_q0(state_1_q0),
    .data_out_address0(grp_AES_Full_Pipeline_L_copy_o3_fu_188_data_out_address0),
    .data_out_ce0(grp_AES_Full_Pipeline_L_copy_o3_fu_188_data_out_ce0),
    .data_out_we0(grp_AES_Full_Pipeline_L_copy_o3_fu_188_data_out_we0),
    .data_out_d0(grp_AES_Full_Pipeline_L_copy_o3_fu_188_data_out_d0)
);

AES_Full_CRTLS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CRTLS_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CRTLS_DATA_WIDTH ))
CRTLS_s_axi_U(
    .AWVALID(s_axi_CRTLS_AWVALID),
    .AWREADY(s_axi_CRTLS_AWREADY),
    .AWADDR(s_axi_CRTLS_AWADDR),
    .WVALID(s_axi_CRTLS_WVALID),
    .WREADY(s_axi_CRTLS_WREADY),
    .WDATA(s_axi_CRTLS_WDATA),
    .WSTRB(s_axi_CRTLS_WSTRB),
    .ARVALID(s_axi_CRTLS_ARVALID),
    .ARREADY(s_axi_CRTLS_ARREADY),
    .ARADDR(s_axi_CRTLS_ARADDR),
    .RVALID(s_axi_CRTLS_RVALID),
    .RREADY(s_axi_CRTLS_RREADY),
    .RDATA(s_axi_CRTLS_RDATA),
    .RRESP(s_axi_CRTLS_RRESP),
    .BVALID(s_axi_CRTLS_BVALID),
    .BREADY(s_axi_CRTLS_BREADY),
    .BRESP(s_axi_CRTLS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .mode_cipher(mode_cipher),
    .mode_inverse_cipher(mode_inverse_cipher),
    .data_in_address0(data_in_address0),
    .data_in_ce0(data_in_ce0),
    .data_in_q0(data_in_q0),
    .Nr(Nr),
    .data_out_address0(data_out_address0),
    .data_out_ce0(data_out_ce0),
    .data_out_we0(data_out_we0),
    .data_out_d0(data_out_d0),
    .expandedKey_address0(expandedKey_address0),
    .expandedKey_ce0(expandedKey_ce0),
    .expandedKey_q0(expandedKey_q0),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .ap_local_deadlock(ap_local_deadlock)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_AES_Full_Pipeline_L_copy1_fu_161_ap_start_reg <= 1'b0;
    end else begin
        if (((mode_inverse_cipher_read_reg_236 == 1'd1) & (1'b0 == ap_block_state23_on_subcall_done) & (1'b1 == ap_CS_fsm_state23))) begin
            grp_AES_Full_Pipeline_L_copy1_fu_161_ap_start_reg <= 1'b1;
        end else if ((grp_AES_Full_Pipeline_L_copy1_fu_161_ap_ready == 1'b1)) begin
            grp_AES_Full_Pipeline_L_copy1_fu_161_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_AES_Full_Pipeline_L_copy_fu_122_ap_start_reg <= 1'b0;
    end else begin
        if (((mode_cipher_read_read_fu_116_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            grp_AES_Full_Pipeline_L_copy_fu_122_ap_start_reg <= 1'b1;
        end else if ((grp_AES_Full_Pipeline_L_copy_fu_122_ap_ready == 1'b1)) begin
            grp_AES_Full_Pipeline_L_copy_fu_122_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_AES_Full_Pipeline_L_copy_o3_fu_188_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state44)) begin
            grp_AES_Full_Pipeline_L_copy_o3_fu_188_ap_start_reg <= 1'b1;
        end else if ((grp_AES_Full_Pipeline_L_copy_o3_fu_188_ap_ready == 1'b1)) begin
            grp_AES_Full_Pipeline_L_copy_o3_fu_188_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_AES_Full_Pipeline_L_copy_o_fu_154_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state22)) begin
            grp_AES_Full_Pipeline_L_copy_o_fu_154_ap_start_reg <= 1'b1;
        end else if ((grp_AES_Full_Pipeline_L_copy_o_fu_154_ap_ready == 1'b1)) begin
            grp_AES_Full_Pipeline_L_copy_o_fu_154_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_AES_Full_Pipeline_L_rounds2_fu_168_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state42)) begin
            grp_AES_Full_Pipeline_L_rounds2_fu_168_ap_start_reg <= 1'b1;
        end else if ((grp_AES_Full_Pipeline_L_rounds2_fu_168_ap_ready == 1'b1)) begin
            grp_AES_Full_Pipeline_L_rounds2_fu_168_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_AES_Full_Pipeline_L_rounds_fu_139_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state20)) begin
            grp_AES_Full_Pipeline_L_rounds_fu_139_ap_start_reg <= 1'b1;
        end else if ((grp_AES_Full_Pipeline_L_rounds_fu_139_ap_ready == 1'b1)) begin
            grp_AES_Full_Pipeline_L_rounds_fu_139_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_AddRoundKey_fu_130_ap_start_reg <= 1'b0;
    end else begin
        if ((((1'b1 == ap_NS_fsm_state25) & (1'b1 == ap_CS_fsm_state24)) | ((1'b1 == ap_NS_fsm_state3) & (1'b1 == ap_CS_fsm_state2)))) begin
            grp_AddRoundKey_fu_130_ap_start_reg <= 1'b1;
        end else if ((grp_AddRoundKey_fu_130_ap_ready == 1'b1)) begin
            grp_AddRoundKey_fu_130_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        Nr_read_reg_227 <= Nr;
        mode_cipher_read_reg_240 <= mode_cipher;
        mode_inverse_cipher_read_reg_236 <= mode_inverse_cipher;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state42)) begin
        sub19_i_reg_254 <= sub19_i_fu_220_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        sub_i_reg_244 <= sub_i_fu_198_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        trunc_ln220_reg_249 <= trunc_ln220_fu_205_p1;
    end
end

assign ap_ST_fsm_state10_blk = 1'b0;

assign ap_ST_fsm_state11_blk = 1'b0;

assign ap_ST_fsm_state12_blk = 1'b0;

assign ap_ST_fsm_state13_blk = 1'b0;

assign ap_ST_fsm_state14_blk = 1'b0;

assign ap_ST_fsm_state15_blk = 1'b0;

assign ap_ST_fsm_state16_blk = 1'b0;

assign ap_ST_fsm_state17_blk = 1'b0;

assign ap_ST_fsm_state18_blk = 1'b0;

assign ap_ST_fsm_state19_blk = 1'b0;

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state20_blk = 1'b0;

always @ (*) begin
    if ((grp_AES_Full_Pipeline_L_rounds_fu_139_ap_done == 1'b0)) begin
        ap_ST_fsm_state21_blk = 1'b1;
    end else begin
        ap_ST_fsm_state21_blk = 1'b0;
    end
end

assign ap_ST_fsm_state22_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_block_state23_on_subcall_done)) begin
        ap_ST_fsm_state23_blk = 1'b1;
    end else begin
        ap_ST_fsm_state23_blk = 1'b0;
    end
end

always @ (*) begin
    if ((grp_AES_Full_Pipeline_L_copy1_fu_161_ap_done == 1'b0)) begin
        ap_ST_fsm_state24_blk = 1'b1;
    end else begin
        ap_ST_fsm_state24_blk = 1'b0;
    end
end

assign ap_ST_fsm_state25_blk = 1'b0;

assign ap_ST_fsm_state26_blk = 1'b0;

assign ap_ST_fsm_state27_blk = 1'b0;

assign ap_ST_fsm_state28_blk = 1'b0;

assign ap_ST_fsm_state29_blk = 1'b0;

always @ (*) begin
    if ((grp_AES_Full_Pipeline_L_copy_fu_122_ap_done == 1'b0)) begin
        ap_ST_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_fsm_state2_blk = 1'b0;
    end
end

assign ap_ST_fsm_state30_blk = 1'b0;

assign ap_ST_fsm_state31_blk = 1'b0;

assign ap_ST_fsm_state32_blk = 1'b0;

assign ap_ST_fsm_state33_blk = 1'b0;

assign ap_ST_fsm_state34_blk = 1'b0;

assign ap_ST_fsm_state35_blk = 1'b0;

assign ap_ST_fsm_state36_blk = 1'b0;

assign ap_ST_fsm_state37_blk = 1'b0;

assign ap_ST_fsm_state38_blk = 1'b0;

assign ap_ST_fsm_state39_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state40_blk = 1'b0;

assign ap_ST_fsm_state41_blk = 1'b0;

assign ap_ST_fsm_state42_blk = 1'b0;

always @ (*) begin
    if ((grp_AES_Full_Pipeline_L_rounds2_fu_168_ap_done == 1'b0)) begin
        ap_ST_fsm_state43_blk = 1'b1;
    end else begin
        ap_ST_fsm_state43_blk = 1'b0;
    end
end

assign ap_ST_fsm_state44_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_block_state45_on_subcall_done)) begin
        ap_ST_fsm_state45_blk = 1'b1;
    end else begin
        ap_ST_fsm_state45_blk = 1'b0;
    end
end

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if (((1'b0 == ap_block_state45_on_subcall_done) & (1'b1 == ap_CS_fsm_state45))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state45_on_subcall_done) & (1'b1 == ap_CS_fsm_state45))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        data_in_address0 = grp_AES_Full_Pipeline_L_copy1_fu_161_data_in_address0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        data_in_address0 = grp_AES_Full_Pipeline_L_copy_fu_122_data_in_address0;
    end else begin
        data_in_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        data_in_ce0 = grp_AES_Full_Pipeline_L_copy1_fu_161_data_in_ce0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        data_in_ce0 = grp_AES_Full_Pipeline_L_copy_fu_122_data_in_ce0;
    end else begin
        data_in_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((mode_inverse_cipher_read_reg_236 == 1'd1) & (1'b1 == ap_CS_fsm_state45))) begin
        data_out_address0 = grp_AES_Full_Pipeline_L_copy_o3_fu_188_data_out_address0;
    end else if (((mode_cipher_read_reg_240 == 1'd1) & (1'b1 == ap_CS_fsm_state23))) begin
        data_out_address0 = grp_AES_Full_Pipeline_L_copy_o_fu_154_data_out_address0;
    end else begin
        data_out_address0 = 'bx;
    end
end

always @ (*) begin
    if (((mode_inverse_cipher_read_reg_236 == 1'd1) & (1'b1 == ap_CS_fsm_state45))) begin
        data_out_ce0 = grp_AES_Full_Pipeline_L_copy_o3_fu_188_data_out_ce0;
    end else if (((mode_cipher_read_reg_240 == 1'd1) & (1'b1 == ap_CS_fsm_state23))) begin
        data_out_ce0 = grp_AES_Full_Pipeline_L_copy_o_fu_154_data_out_ce0;
    end else begin
        data_out_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((mode_inverse_cipher_read_reg_236 == 1'd1) & (1'b1 == ap_CS_fsm_state45))) begin
        data_out_d0 = grp_AES_Full_Pipeline_L_copy_o3_fu_188_data_out_d0;
    end else if (((mode_cipher_read_reg_240 == 1'd1) & (1'b1 == ap_CS_fsm_state23))) begin
        data_out_d0 = grp_AES_Full_Pipeline_L_copy_o_fu_154_data_out_d0;
    end else begin
        data_out_d0 = 'bx;
    end
end

always @ (*) begin
    if (((mode_inverse_cipher_read_reg_236 == 1'd1) & (1'b1 == ap_CS_fsm_state45))) begin
        data_out_we0 = grp_AES_Full_Pipeline_L_copy_o3_fu_188_data_out_we0;
    end else if (((mode_cipher_read_reg_240 == 1'd1) & (1'b1 == ap_CS_fsm_state23))) begin
        data_out_we0 = grp_AES_Full_Pipeline_L_copy_o_fu_154_data_out_we0;
    end else begin
        data_out_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state43)) begin
        expandedKey_address0 = grp_AES_Full_Pipeline_L_rounds2_fu_168_expandedKey_address0;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        expandedKey_address0 = grp_AES_Full_Pipeline_L_rounds_fu_139_expandedKey_address0;
    end else if (((1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state25))) begin
        expandedKey_address0 = grp_AddRoundKey_fu_130_expandedKey_address0;
    end else begin
        expandedKey_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state43)) begin
        expandedKey_ce0 = grp_AES_Full_Pipeline_L_rounds2_fu_168_expandedKey_ce0;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        expandedKey_ce0 = grp_AES_Full_Pipeline_L_rounds_fu_139_expandedKey_ce0;
    end else if (((1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state25))) begin
        expandedKey_ce0 = grp_AddRoundKey_fu_130_expandedKey_ce0;
    end else begin
        expandedKey_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        grp_AddRoundKey_fu_130_roundKey = shl_ln1_fu_208_p3;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_AddRoundKey_fu_130_roundKey = 8'd0;
    end else begin
        grp_AddRoundKey_fu_130_roundKey = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state25))) begin
        grp_AddRoundKey_fu_130_state_q0 = state_1_q0;
    end else if (((1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        grp_AddRoundKey_fu_130_state_q0 = state_q0;
    end else begin
        grp_AddRoundKey_fu_130_state_q0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state25))) begin
        grp_AddRoundKey_fu_130_state_q1 = state_1_q1;
    end else if (((1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        grp_AddRoundKey_fu_130_state_q1 = state_q1;
    end else begin
        grp_AddRoundKey_fu_130_state_q1 = 'bx;
    end
end

always @ (*) begin
    if (((mode_inverse_cipher_read_reg_236 == 1'd1) & (1'b1 == ap_CS_fsm_state45))) begin
        state_1_address0 = grp_AES_Full_Pipeline_L_copy_o3_fu_188_state_1_address0;
    end else if ((1'b1 == ap_CS_fsm_state43)) begin
        state_1_address0 = grp_AES_Full_Pipeline_L_rounds2_fu_168_state_1_address0;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        state_1_address0 = grp_AES_Full_Pipeline_L_copy1_fu_161_state_1_address0;
    end else if (((1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state25))) begin
        state_1_address0 = grp_AddRoundKey_fu_130_state_address0;
    end else begin
        state_1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state43)) begin
        state_1_address1 = grp_AES_Full_Pipeline_L_rounds2_fu_168_state_1_address1;
    end else if (((1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state25))) begin
        state_1_address1 = grp_AddRoundKey_fu_130_state_address1;
    end else begin
        state_1_address1 = 'bx;
    end
end

always @ (*) begin
    if (((mode_inverse_cipher_read_reg_236 == 1'd1) & (1'b1 == ap_CS_fsm_state45))) begin
        state_1_ce0 = grp_AES_Full_Pipeline_L_copy_o3_fu_188_state_1_ce0;
    end else if ((1'b1 == ap_CS_fsm_state43)) begin
        state_1_ce0 = grp_AES_Full_Pipeline_L_rounds2_fu_168_state_1_ce0;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        state_1_ce0 = grp_AES_Full_Pipeline_L_copy1_fu_161_state_1_ce0;
    end else if (((1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state25))) begin
        state_1_ce0 = grp_AddRoundKey_fu_130_state_ce0;
    end else begin
        state_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state43)) begin
        state_1_ce1 = grp_AES_Full_Pipeline_L_rounds2_fu_168_state_1_ce1;
    end else if (((1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state25))) begin
        state_1_ce1 = grp_AddRoundKey_fu_130_state_ce1;
    end else begin
        state_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state43)) begin
        state_1_d0 = grp_AES_Full_Pipeline_L_rounds2_fu_168_state_1_d0;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        state_1_d0 = grp_AES_Full_Pipeline_L_copy1_fu_161_state_1_d0;
    end else if (((1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state25))) begin
        state_1_d0 = grp_AddRoundKey_fu_130_state_d0;
    end else begin
        state_1_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state43)) begin
        state_1_d1 = grp_AES_Full_Pipeline_L_rounds2_fu_168_state_1_d1;
    end else if (((1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state25))) begin
        state_1_d1 = grp_AddRoundKey_fu_130_state_d1;
    end else begin
        state_1_d1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state43)) begin
        state_1_we0 = grp_AES_Full_Pipeline_L_rounds2_fu_168_state_1_we0;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        state_1_we0 = grp_AES_Full_Pipeline_L_copy1_fu_161_state_1_we0;
    end else if (((1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state25))) begin
        state_1_we0 = grp_AddRoundKey_fu_130_state_we0;
    end else begin
        state_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state43)) begin
        state_1_we1 = grp_AES_Full_Pipeline_L_rounds2_fu_168_state_1_we1;
    end else if (((1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state25))) begin
        state_1_we1 = grp_AddRoundKey_fu_130_state_we1;
    end else begin
        state_1_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((mode_cipher_read_reg_240 == 1'd1) & (1'b1 == ap_CS_fsm_state23))) begin
        state_address0 = grp_AES_Full_Pipeline_L_copy_o_fu_154_state_address0;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        state_address0 = grp_AES_Full_Pipeline_L_rounds_fu_139_state_address0;
    end else if (((1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        state_address0 = grp_AddRoundKey_fu_130_state_address0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        state_address0 = grp_AES_Full_Pipeline_L_copy_fu_122_state_address0;
    end else begin
        state_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        state_address1 = grp_AES_Full_Pipeline_L_rounds_fu_139_state_address1;
    end else if (((1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        state_address1 = grp_AddRoundKey_fu_130_state_address1;
    end else begin
        state_address1 = 'bx;
    end
end

always @ (*) begin
    if (((mode_cipher_read_reg_240 == 1'd1) & (1'b1 == ap_CS_fsm_state23))) begin
        state_ce0 = grp_AES_Full_Pipeline_L_copy_o_fu_154_state_ce0;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        state_ce0 = grp_AES_Full_Pipeline_L_rounds_fu_139_state_ce0;
    end else if (((1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        state_ce0 = grp_AddRoundKey_fu_130_state_ce0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        state_ce0 = grp_AES_Full_Pipeline_L_copy_fu_122_state_ce0;
    end else begin
        state_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        state_ce1 = grp_AES_Full_Pipeline_L_rounds_fu_139_state_ce1;
    end else if (((1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        state_ce1 = grp_AddRoundKey_fu_130_state_ce1;
    end else begin
        state_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        state_d0 = grp_AES_Full_Pipeline_L_rounds_fu_139_state_d0;
    end else if (((1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        state_d0 = grp_AddRoundKey_fu_130_state_d0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        state_d0 = grp_AES_Full_Pipeline_L_copy_fu_122_state_d0;
    end else begin
        state_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        state_d1 = grp_AES_Full_Pipeline_L_rounds_fu_139_state_d1;
    end else if (((1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        state_d1 = grp_AddRoundKey_fu_130_state_d1;
    end else begin
        state_d1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        state_we0 = grp_AES_Full_Pipeline_L_rounds_fu_139_state_we0;
    end else if (((1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        state_we0 = grp_AddRoundKey_fu_130_state_we0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        state_we0 = grp_AES_Full_Pipeline_L_copy_fu_122_state_we0;
    end else begin
        state_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        state_we1 = grp_AES_Full_Pipeline_L_rounds_fu_139_state_we1;
    end else if (((1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        state_we1 = grp_AddRoundKey_fu_130_state_we1;
    end else begin
        state_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((mode_cipher_read_read_fu_116_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end else if (((mode_cipher_read_read_fu_116_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (grp_AES_Full_Pipeline_L_copy_fu_122_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            if (((1'b1 == ap_CS_fsm_state21) & (grp_AES_Full_Pipeline_L_rounds_fu_139_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            if (((mode_inverse_cipher_read_reg_236 == 1'd0) & (1'b0 == ap_block_state23_on_subcall_done) & (1'b1 == ap_CS_fsm_state23))) begin
                ap_NS_fsm = ap_ST_fsm_state45;
            end else if (((mode_inverse_cipher_read_reg_236 == 1'd1) & (1'b0 == ap_block_state23_on_subcall_done) & (1'b1 == ap_CS_fsm_state23))) begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end
        end
        ap_ST_fsm_state24 : begin
            if (((1'b1 == ap_CS_fsm_state24) & (grp_AES_Full_Pipeline_L_copy1_fu_161_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            if (((1'b1 == ap_CS_fsm_state43) & (grp_AES_Full_Pipeline_L_rounds2_fu_168_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state44;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state43;
            end
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            if (((1'b0 == ap_block_state45_on_subcall_done) & (1'b1 == ap_CS_fsm_state45))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state45;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Nr_cast_fu_195_p1 = Nr_read_reg_227;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state37 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state38 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state39 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state40 = ap_CS_fsm[32'd39];

assign ap_CS_fsm_state41 = ap_CS_fsm[32'd40];

assign ap_CS_fsm_state42 = ap_CS_fsm[32'd41];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_state44 = ap_CS_fsm[32'd43];

assign ap_CS_fsm_state45 = ap_CS_fsm[32'd44];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_NS_fsm_state25 = ap_NS_fsm[32'd24];

assign ap_NS_fsm_state3 = ap_NS_fsm[32'd2];

always @ (*) begin
    ap_block_state23_on_subcall_done = ((mode_cipher_read_reg_240 == 1'd1) & (grp_AES_Full_Pipeline_L_copy_o_fu_154_ap_done == 1'b0));
end

always @ (*) begin
    ap_block_state45_on_subcall_done = ((mode_inverse_cipher_read_reg_236 == 1'd1) & (grp_AES_Full_Pipeline_L_copy_o3_fu_188_ap_done == 1'b0));
end

assign ap_local_block = 1'b0;

assign ap_local_deadlock = 1'd0;

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign grp_AES_Full_Pipeline_L_copy1_fu_161_ap_start = grp_AES_Full_Pipeline_L_copy1_fu_161_ap_start_reg;

assign grp_AES_Full_Pipeline_L_copy_fu_122_ap_start = grp_AES_Full_Pipeline_L_copy_fu_122_ap_start_reg;

assign grp_AES_Full_Pipeline_L_copy_o3_fu_188_ap_start = grp_AES_Full_Pipeline_L_copy_o3_fu_188_ap_start_reg;

assign grp_AES_Full_Pipeline_L_copy_o_fu_154_ap_start = grp_AES_Full_Pipeline_L_copy_o_fu_154_ap_start_reg;

assign grp_AES_Full_Pipeline_L_rounds2_fu_168_ap_start = grp_AES_Full_Pipeline_L_rounds2_fu_168_ap_start_reg;

assign grp_AES_Full_Pipeline_L_rounds_fu_139_ap_start = grp_AES_Full_Pipeline_L_rounds_fu_139_ap_start_reg;

assign grp_AddRoundKey_fu_130_ap_start = grp_AddRoundKey_fu_130_ap_start_reg;

assign mode_cipher_read_read_fu_116_p2 = mode_cipher;

assign shl_ln1_fu_208_p3 = {{trunc_ln220_fu_205_p1}, {4'd0}};

assign sub19_i_fu_220_p2 = ($signed(zext_ln220_fu_217_p1) + $signed(17'd131071));

assign sub_i_fu_198_p2 = ($signed(Nr_cast_fu_195_p1) + $signed(17'd131071));

assign trunc_ln220_fu_205_p1 = Nr_read_reg_227[3:0];

assign zext_ln220_fu_217_p1 = Nr_read_reg_227;

endmodule //AES_Full
