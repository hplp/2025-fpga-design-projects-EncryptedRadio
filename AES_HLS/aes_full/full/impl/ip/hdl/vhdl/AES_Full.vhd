-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
-- Version: 2021.2
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity AES_Full is
generic (
    C_S_AXI_CRTLS_ADDR_WIDTH : INTEGER := 9;
    C_S_AXI_CRTLS_DATA_WIDTH : INTEGER := 32 );
port (
    ap_local_block : OUT STD_LOGIC;
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    s_axi_CRTLS_AWVALID : IN STD_LOGIC;
    s_axi_CRTLS_AWREADY : OUT STD_LOGIC;
    s_axi_CRTLS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CRTLS_ADDR_WIDTH-1 downto 0);
    s_axi_CRTLS_WVALID : IN STD_LOGIC;
    s_axi_CRTLS_WREADY : OUT STD_LOGIC;
    s_axi_CRTLS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CRTLS_DATA_WIDTH-1 downto 0);
    s_axi_CRTLS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CRTLS_DATA_WIDTH/8-1 downto 0);
    s_axi_CRTLS_ARVALID : IN STD_LOGIC;
    s_axi_CRTLS_ARREADY : OUT STD_LOGIC;
    s_axi_CRTLS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CRTLS_ADDR_WIDTH-1 downto 0);
    s_axi_CRTLS_RVALID : OUT STD_LOGIC;
    s_axi_CRTLS_RREADY : IN STD_LOGIC;
    s_axi_CRTLS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CRTLS_DATA_WIDTH-1 downto 0);
    s_axi_CRTLS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_CRTLS_BVALID : OUT STD_LOGIC;
    s_axi_CRTLS_BREADY : IN STD_LOGIC;
    s_axi_CRTLS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of AES_Full is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "AES_Full_AES_Full,hls_ip_2021_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.300000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=9,HLS_SYN_DSP=0,HLS_SYN_FF=2186,HLS_SYN_LUT=8042,HLS_VERSION=2021_2}";
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (44 downto 0) := "000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (44 downto 0) := "000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (44 downto 0) := "000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (44 downto 0) := "000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (44 downto 0) := "000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (44 downto 0) := "000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (44 downto 0) := "000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (44 downto 0) := "000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (44 downto 0) := "000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (44 downto 0) := "001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (44 downto 0) := "010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (44 downto 0) := "100000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv17_1FFFF : STD_LOGIC_VECTOR (16 downto 0) := "11111111111111111";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";

    signal ap_local_deadlock : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal mode_cipher : STD_LOGIC;
    signal mode_inverse_cipher : STD_LOGIC;
    signal data_in_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal data_in_ce0 : STD_LOGIC;
    signal data_in_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal expandedKey_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal expandedKey_ce0 : STD_LOGIC;
    signal expandedKey_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal Nr : STD_LOGIC_VECTOR (15 downto 0);
    signal data_out_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal data_out_ce0 : STD_LOGIC;
    signal data_out_we0 : STD_LOGIC;
    signal data_out_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal Nr_read_reg_227 : STD_LOGIC_VECTOR (15 downto 0);
    signal mode_inverse_cipher_read_reg_236 : STD_LOGIC_VECTOR (0 downto 0);
    signal mode_cipher_read_read_fu_116_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal mode_cipher_read_reg_240 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_i_fu_198_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_i_reg_244 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal trunc_ln220_fu_205_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln220_reg_249 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal sub19_i_fu_220_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub19_i_reg_254 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal state_1_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal state_1_ce0 : STD_LOGIC;
    signal state_1_we0 : STD_LOGIC;
    signal state_1_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal state_1_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal state_1_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal state_1_ce1 : STD_LOGIC;
    signal state_1_we1 : STD_LOGIC;
    signal state_1_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal state_1_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal state_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal state_ce0 : STD_LOGIC;
    signal state_we0 : STD_LOGIC;
    signal state_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal state_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal state_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal state_ce1 : STD_LOGIC;
    signal state_we1 : STD_LOGIC;
    signal state_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal state_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_AES_Full_Pipeline_L_copy_fu_122_ap_start : STD_LOGIC;
    signal grp_AES_Full_Pipeline_L_copy_fu_122_ap_done : STD_LOGIC;
    signal grp_AES_Full_Pipeline_L_copy_fu_122_ap_idle : STD_LOGIC;
    signal grp_AES_Full_Pipeline_L_copy_fu_122_ap_ready : STD_LOGIC;
    signal grp_AES_Full_Pipeline_L_copy_fu_122_data_in_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_AES_Full_Pipeline_L_copy_fu_122_data_in_ce0 : STD_LOGIC;
    signal grp_AES_Full_Pipeline_L_copy_fu_122_state_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_AES_Full_Pipeline_L_copy_fu_122_state_ce0 : STD_LOGIC;
    signal grp_AES_Full_Pipeline_L_copy_fu_122_state_we0 : STD_LOGIC;
    signal grp_AES_Full_Pipeline_L_copy_fu_122_state_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_AddRoundKey_fu_130_ap_start : STD_LOGIC;
    signal grp_AddRoundKey_fu_130_ap_done : STD_LOGIC;
    signal grp_AddRoundKey_fu_130_ap_idle : STD_LOGIC;
    signal grp_AddRoundKey_fu_130_ap_ready : STD_LOGIC;
    signal grp_AddRoundKey_fu_130_state_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_AddRoundKey_fu_130_state_ce0 : STD_LOGIC;
    signal grp_AddRoundKey_fu_130_state_we0 : STD_LOGIC;
    signal grp_AddRoundKey_fu_130_state_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_AddRoundKey_fu_130_state_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_AddRoundKey_fu_130_state_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_AddRoundKey_fu_130_state_ce1 : STD_LOGIC;
    signal grp_AddRoundKey_fu_130_state_we1 : STD_LOGIC;
    signal grp_AddRoundKey_fu_130_state_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_AddRoundKey_fu_130_state_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_AddRoundKey_fu_130_expandedKey_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_AddRoundKey_fu_130_expandedKey_ce0 : STD_LOGIC;
    signal grp_AddRoundKey_fu_130_roundKey : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_AES_Full_Pipeline_L_rounds_fu_139_ap_start : STD_LOGIC;
    signal grp_AES_Full_Pipeline_L_rounds_fu_139_ap_done : STD_LOGIC;
    signal grp_AES_Full_Pipeline_L_rounds_fu_139_ap_idle : STD_LOGIC;
    signal grp_AES_Full_Pipeline_L_rounds_fu_139_ap_ready : STD_LOGIC;
    signal grp_AES_Full_Pipeline_L_rounds_fu_139_state_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_AES_Full_Pipeline_L_rounds_fu_139_state_ce0 : STD_LOGIC;
    signal grp_AES_Full_Pipeline_L_rounds_fu_139_state_we0 : STD_LOGIC;
    signal grp_AES_Full_Pipeline_L_rounds_fu_139_state_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_AES_Full_Pipeline_L_rounds_fu_139_state_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_AES_Full_Pipeline_L_rounds_fu_139_state_ce1 : STD_LOGIC;
    signal grp_AES_Full_Pipeline_L_rounds_fu_139_state_we1 : STD_LOGIC;
    signal grp_AES_Full_Pipeline_L_rounds_fu_139_state_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_AES_Full_Pipeline_L_rounds_fu_139_expandedKey_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_AES_Full_Pipeline_L_rounds_fu_139_expandedKey_ce0 : STD_LOGIC;
    signal grp_AES_Full_Pipeline_L_copy_o_fu_154_ap_start : STD_LOGIC;
    signal grp_AES_Full_Pipeline_L_copy_o_fu_154_ap_done : STD_LOGIC;
    signal grp_AES_Full_Pipeline_L_copy_o_fu_154_ap_idle : STD_LOGIC;
    signal grp_AES_Full_Pipeline_L_copy_o_fu_154_ap_ready : STD_LOGIC;
    signal grp_AES_Full_Pipeline_L_copy_o_fu_154_state_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_AES_Full_Pipeline_L_copy_o_fu_154_state_ce0 : STD_LOGIC;
    signal grp_AES_Full_Pipeline_L_copy_o_fu_154_data_out_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_AES_Full_Pipeline_L_copy_o_fu_154_data_out_ce0 : STD_LOGIC;
    signal grp_AES_Full_Pipeline_L_copy_o_fu_154_data_out_we0 : STD_LOGIC;
    signal grp_AES_Full_Pipeline_L_copy_o_fu_154_data_out_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_AES_Full_Pipeline_L_copy1_fu_161_ap_start : STD_LOGIC;
    signal grp_AES_Full_Pipeline_L_copy1_fu_161_ap_done : STD_LOGIC;
    signal grp_AES_Full_Pipeline_L_copy1_fu_161_ap_idle : STD_LOGIC;
    signal grp_AES_Full_Pipeline_L_copy1_fu_161_ap_ready : STD_LOGIC;
    signal grp_AES_Full_Pipeline_L_copy1_fu_161_data_in_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_AES_Full_Pipeline_L_copy1_fu_161_data_in_ce0 : STD_LOGIC;
    signal grp_AES_Full_Pipeline_L_copy1_fu_161_state_1_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_AES_Full_Pipeline_L_copy1_fu_161_state_1_ce0 : STD_LOGIC;
    signal grp_AES_Full_Pipeline_L_copy1_fu_161_state_1_we0 : STD_LOGIC;
    signal grp_AES_Full_Pipeline_L_copy1_fu_161_state_1_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_AES_Full_Pipeline_L_rounds2_fu_168_ap_start : STD_LOGIC;
    signal grp_AES_Full_Pipeline_L_rounds2_fu_168_ap_done : STD_LOGIC;
    signal grp_AES_Full_Pipeline_L_rounds2_fu_168_ap_idle : STD_LOGIC;
    signal grp_AES_Full_Pipeline_L_rounds2_fu_168_ap_ready : STD_LOGIC;
    signal grp_AES_Full_Pipeline_L_rounds2_fu_168_state_1_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_AES_Full_Pipeline_L_rounds2_fu_168_state_1_ce0 : STD_LOGIC;
    signal grp_AES_Full_Pipeline_L_rounds2_fu_168_state_1_we0 : STD_LOGIC;
    signal grp_AES_Full_Pipeline_L_rounds2_fu_168_state_1_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_AES_Full_Pipeline_L_rounds2_fu_168_state_1_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_AES_Full_Pipeline_L_rounds2_fu_168_state_1_ce1 : STD_LOGIC;
    signal grp_AES_Full_Pipeline_L_rounds2_fu_168_state_1_we1 : STD_LOGIC;
    signal grp_AES_Full_Pipeline_L_rounds2_fu_168_state_1_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_AES_Full_Pipeline_L_rounds2_fu_168_expandedKey_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_AES_Full_Pipeline_L_rounds2_fu_168_expandedKey_ce0 : STD_LOGIC;
    signal grp_AES_Full_Pipeline_L_copy_o3_fu_188_ap_start : STD_LOGIC;
    signal grp_AES_Full_Pipeline_L_copy_o3_fu_188_ap_done : STD_LOGIC;
    signal grp_AES_Full_Pipeline_L_copy_o3_fu_188_ap_idle : STD_LOGIC;
    signal grp_AES_Full_Pipeline_L_copy_o3_fu_188_ap_ready : STD_LOGIC;
    signal grp_AES_Full_Pipeline_L_copy_o3_fu_188_state_1_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_AES_Full_Pipeline_L_copy_o3_fu_188_state_1_ce0 : STD_LOGIC;
    signal grp_AES_Full_Pipeline_L_copy_o3_fu_188_data_out_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_AES_Full_Pipeline_L_copy_o3_fu_188_data_out_ce0 : STD_LOGIC;
    signal grp_AES_Full_Pipeline_L_copy_o3_fu_188_data_out_we0 : STD_LOGIC;
    signal grp_AES_Full_Pipeline_L_copy_o3_fu_188_data_out_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_AES_Full_Pipeline_L_copy_fu_122_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal grp_AddRoundKey_fu_130_ap_start_reg : STD_LOGIC := '0';
    signal ap_NS_fsm : STD_LOGIC_VECTOR (44 downto 0);
    signal ap_NS_fsm_state3 : STD_LOGIC;
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal ap_NS_fsm_state25 : STD_LOGIC;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal shl_ln1_fu_208_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_AES_Full_Pipeline_L_rounds_fu_139_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal grp_AES_Full_Pipeline_L_copy_o_fu_154_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal grp_AES_Full_Pipeline_L_copy1_fu_161_ap_start_reg : STD_LOGIC := '0';
    signal ap_block_state23_on_subcall_done : BOOLEAN;
    signal grp_AES_Full_Pipeline_L_rounds2_fu_168_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal grp_AES_Full_Pipeline_L_copy_o3_fu_188_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state44 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state44 : signal is "none";
    signal ap_CS_fsm_state45 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state45 : signal is "none";
    signal Nr_cast_fu_195_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln220_fu_217_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_block_state45_on_subcall_done : BOOLEAN;
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ST_fsm_state16_blk : STD_LOGIC;
    signal ap_ST_fsm_state17_blk : STD_LOGIC;
    signal ap_ST_fsm_state18_blk : STD_LOGIC;
    signal ap_ST_fsm_state19_blk : STD_LOGIC;
    signal ap_ST_fsm_state20_blk : STD_LOGIC;
    signal ap_ST_fsm_state21_blk : STD_LOGIC;
    signal ap_ST_fsm_state22_blk : STD_LOGIC;
    signal ap_ST_fsm_state23_blk : STD_LOGIC;
    signal ap_ST_fsm_state24_blk : STD_LOGIC;
    signal ap_ST_fsm_state25_blk : STD_LOGIC;
    signal ap_ST_fsm_state26_blk : STD_LOGIC;
    signal ap_ST_fsm_state27_blk : STD_LOGIC;
    signal ap_ST_fsm_state28_blk : STD_LOGIC;
    signal ap_ST_fsm_state29_blk : STD_LOGIC;
    signal ap_ST_fsm_state30_blk : STD_LOGIC;
    signal ap_ST_fsm_state31_blk : STD_LOGIC;
    signal ap_ST_fsm_state32_blk : STD_LOGIC;
    signal ap_ST_fsm_state33_blk : STD_LOGIC;
    signal ap_ST_fsm_state34_blk : STD_LOGIC;
    signal ap_ST_fsm_state35_blk : STD_LOGIC;
    signal ap_ST_fsm_state36_blk : STD_LOGIC;
    signal ap_ST_fsm_state37_blk : STD_LOGIC;
    signal ap_ST_fsm_state38_blk : STD_LOGIC;
    signal ap_ST_fsm_state39_blk : STD_LOGIC;
    signal ap_ST_fsm_state40_blk : STD_LOGIC;
    signal ap_ST_fsm_state41_blk : STD_LOGIC;
    signal ap_ST_fsm_state42_blk : STD_LOGIC;
    signal ap_ST_fsm_state43_blk : STD_LOGIC;
    signal ap_ST_fsm_state44_blk : STD_LOGIC;
    signal ap_ST_fsm_state45_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component AES_Full_AES_Full_Pipeline_L_copy IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        data_in_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        data_in_ce0 : OUT STD_LOGIC;
        data_in_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        state_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        state_ce0 : OUT STD_LOGIC;
        state_we0 : OUT STD_LOGIC;
        state_d0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component AES_Full_AddRoundKey IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        state_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        state_ce0 : OUT STD_LOGIC;
        state_we0 : OUT STD_LOGIC;
        state_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        state_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        state_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        state_ce1 : OUT STD_LOGIC;
        state_we1 : OUT STD_LOGIC;
        state_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        state_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
        expandedKey_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        expandedKey_ce0 : OUT STD_LOGIC;
        expandedKey_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        roundKey : IN STD_LOGIC_VECTOR (7 downto 0);
        ap_ce : IN STD_LOGIC );
    end component;


    component AES_Full_AES_Full_Pipeline_L_rounds IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        Nr : IN STD_LOGIC_VECTOR (15 downto 0);
        state_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        state_ce0 : OUT STD_LOGIC;
        state_we0 : OUT STD_LOGIC;
        state_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        state_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        state_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        state_ce1 : OUT STD_LOGIC;
        state_we1 : OUT STD_LOGIC;
        state_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        state_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
        expandedKey_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        expandedKey_ce0 : OUT STD_LOGIC;
        expandedKey_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        sub_i : IN STD_LOGIC_VECTOR (16 downto 0) );
    end component;


    component AES_Full_AES_Full_Pipeline_L_copy_o IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        state_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        state_ce0 : OUT STD_LOGIC;
        state_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        data_out_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        data_out_ce0 : OUT STD_LOGIC;
        data_out_we0 : OUT STD_LOGIC;
        data_out_d0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component AES_Full_AES_Full_Pipeline_L_copy1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        data_in_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        data_in_ce0 : OUT STD_LOGIC;
        data_in_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        state_1_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        state_1_ce0 : OUT STD_LOGIC;
        state_1_we0 : OUT STD_LOGIC;
        state_1_d0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component AES_Full_AES_Full_Pipeline_L_rounds2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        Nr : IN STD_LOGIC_VECTOR (15 downto 0);
        state_1_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        state_1_ce0 : OUT STD_LOGIC;
        state_1_we0 : OUT STD_LOGIC;
        state_1_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        state_1_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        state_1_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        state_1_ce1 : OUT STD_LOGIC;
        state_1_we1 : OUT STD_LOGIC;
        state_1_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        state_1_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
        trunc_ln : IN STD_LOGIC_VECTOR (3 downto 0);
        expandedKey_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        expandedKey_ce0 : OUT STD_LOGIC;
        expandedKey_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        sub19_i : IN STD_LOGIC_VECTOR (16 downto 0) );
    end component;


    component AES_Full_AES_Full_Pipeline_L_copy_o3 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        state_1_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        state_1_ce0 : OUT STD_LOGIC;
        state_1_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        data_out_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        data_out_ce0 : OUT STD_LOGIC;
        data_out_we0 : OUT STD_LOGIC;
        data_out_d0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component AES_Full_state_1_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (7 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component AES_Full_CRTLS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        mode_cipher : OUT STD_LOGIC;
        mode_inverse_cipher : OUT STD_LOGIC;
        data_in_address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        data_in_ce0 : IN STD_LOGIC;
        data_in_q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        Nr : OUT STD_LOGIC_VECTOR (15 downto 0);
        data_out_address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        data_out_ce0 : IN STD_LOGIC;
        data_out_we0 : IN STD_LOGIC;
        data_out_d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        expandedKey_address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        expandedKey_ce0 : IN STD_LOGIC;
        expandedKey_q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        ap_local_deadlock : IN STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    state_1_U : component AES_Full_state_1_RAM_AUTO_1R1W
    generic map (
        DataWidth => 8,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => state_1_address0,
        ce0 => state_1_ce0,
        we0 => state_1_we0,
        d0 => state_1_d0,
        q0 => state_1_q0,
        address1 => state_1_address1,
        ce1 => state_1_ce1,
        we1 => state_1_we1,
        d1 => state_1_d1,
        q1 => state_1_q1);

    state_U : component AES_Full_state_1_RAM_AUTO_1R1W
    generic map (
        DataWidth => 8,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => state_address0,
        ce0 => state_ce0,
        we0 => state_we0,
        d0 => state_d0,
        q0 => state_q0,
        address1 => state_address1,
        ce1 => state_ce1,
        we1 => state_we1,
        d1 => state_d1,
        q1 => state_q1);

    grp_AES_Full_Pipeline_L_copy_fu_122 : component AES_Full_AES_Full_Pipeline_L_copy
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_AES_Full_Pipeline_L_copy_fu_122_ap_start,
        ap_done => grp_AES_Full_Pipeline_L_copy_fu_122_ap_done,
        ap_idle => grp_AES_Full_Pipeline_L_copy_fu_122_ap_idle,
        ap_ready => grp_AES_Full_Pipeline_L_copy_fu_122_ap_ready,
        data_in_address0 => grp_AES_Full_Pipeline_L_copy_fu_122_data_in_address0,
        data_in_ce0 => grp_AES_Full_Pipeline_L_copy_fu_122_data_in_ce0,
        data_in_q0 => data_in_q0,
        state_address0 => grp_AES_Full_Pipeline_L_copy_fu_122_state_address0,
        state_ce0 => grp_AES_Full_Pipeline_L_copy_fu_122_state_ce0,
        state_we0 => grp_AES_Full_Pipeline_L_copy_fu_122_state_we0,
        state_d0 => grp_AES_Full_Pipeline_L_copy_fu_122_state_d0);

    grp_AddRoundKey_fu_130 : component AES_Full_AddRoundKey
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_AddRoundKey_fu_130_ap_start,
        ap_done => grp_AddRoundKey_fu_130_ap_done,
        ap_idle => grp_AddRoundKey_fu_130_ap_idle,
        ap_ready => grp_AddRoundKey_fu_130_ap_ready,
        state_address0 => grp_AddRoundKey_fu_130_state_address0,
        state_ce0 => grp_AddRoundKey_fu_130_state_ce0,
        state_we0 => grp_AddRoundKey_fu_130_state_we0,
        state_d0 => grp_AddRoundKey_fu_130_state_d0,
        state_q0 => grp_AddRoundKey_fu_130_state_q0,
        state_address1 => grp_AddRoundKey_fu_130_state_address1,
        state_ce1 => grp_AddRoundKey_fu_130_state_ce1,
        state_we1 => grp_AddRoundKey_fu_130_state_we1,
        state_d1 => grp_AddRoundKey_fu_130_state_d1,
        state_q1 => grp_AddRoundKey_fu_130_state_q1,
        expandedKey_address0 => grp_AddRoundKey_fu_130_expandedKey_address0,
        expandedKey_ce0 => grp_AddRoundKey_fu_130_expandedKey_ce0,
        expandedKey_q0 => expandedKey_q0,
        roundKey => grp_AddRoundKey_fu_130_roundKey,
        ap_ce => ap_const_logic_1);

    grp_AES_Full_Pipeline_L_rounds_fu_139 : component AES_Full_AES_Full_Pipeline_L_rounds
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_AES_Full_Pipeline_L_rounds_fu_139_ap_start,
        ap_done => grp_AES_Full_Pipeline_L_rounds_fu_139_ap_done,
        ap_idle => grp_AES_Full_Pipeline_L_rounds_fu_139_ap_idle,
        ap_ready => grp_AES_Full_Pipeline_L_rounds_fu_139_ap_ready,
        Nr => Nr_read_reg_227,
        state_address0 => grp_AES_Full_Pipeline_L_rounds_fu_139_state_address0,
        state_ce0 => grp_AES_Full_Pipeline_L_rounds_fu_139_state_ce0,
        state_we0 => grp_AES_Full_Pipeline_L_rounds_fu_139_state_we0,
        state_d0 => grp_AES_Full_Pipeline_L_rounds_fu_139_state_d0,
        state_q0 => state_q0,
        state_address1 => grp_AES_Full_Pipeline_L_rounds_fu_139_state_address1,
        state_ce1 => grp_AES_Full_Pipeline_L_rounds_fu_139_state_ce1,
        state_we1 => grp_AES_Full_Pipeline_L_rounds_fu_139_state_we1,
        state_d1 => grp_AES_Full_Pipeline_L_rounds_fu_139_state_d1,
        state_q1 => state_q1,
        expandedKey_address0 => grp_AES_Full_Pipeline_L_rounds_fu_139_expandedKey_address0,
        expandedKey_ce0 => grp_AES_Full_Pipeline_L_rounds_fu_139_expandedKey_ce0,
        expandedKey_q0 => expandedKey_q0,
        sub_i => sub_i_reg_244);

    grp_AES_Full_Pipeline_L_copy_o_fu_154 : component AES_Full_AES_Full_Pipeline_L_copy_o
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_AES_Full_Pipeline_L_copy_o_fu_154_ap_start,
        ap_done => grp_AES_Full_Pipeline_L_copy_o_fu_154_ap_done,
        ap_idle => grp_AES_Full_Pipeline_L_copy_o_fu_154_ap_idle,
        ap_ready => grp_AES_Full_Pipeline_L_copy_o_fu_154_ap_ready,
        state_address0 => grp_AES_Full_Pipeline_L_copy_o_fu_154_state_address0,
        state_ce0 => grp_AES_Full_Pipeline_L_copy_o_fu_154_state_ce0,
        state_q0 => state_q0,
        data_out_address0 => grp_AES_Full_Pipeline_L_copy_o_fu_154_data_out_address0,
        data_out_ce0 => grp_AES_Full_Pipeline_L_copy_o_fu_154_data_out_ce0,
        data_out_we0 => grp_AES_Full_Pipeline_L_copy_o_fu_154_data_out_we0,
        data_out_d0 => grp_AES_Full_Pipeline_L_copy_o_fu_154_data_out_d0);

    grp_AES_Full_Pipeline_L_copy1_fu_161 : component AES_Full_AES_Full_Pipeline_L_copy1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_AES_Full_Pipeline_L_copy1_fu_161_ap_start,
        ap_done => grp_AES_Full_Pipeline_L_copy1_fu_161_ap_done,
        ap_idle => grp_AES_Full_Pipeline_L_copy1_fu_161_ap_idle,
        ap_ready => grp_AES_Full_Pipeline_L_copy1_fu_161_ap_ready,
        data_in_address0 => grp_AES_Full_Pipeline_L_copy1_fu_161_data_in_address0,
        data_in_ce0 => grp_AES_Full_Pipeline_L_copy1_fu_161_data_in_ce0,
        data_in_q0 => data_in_q0,
        state_1_address0 => grp_AES_Full_Pipeline_L_copy1_fu_161_state_1_address0,
        state_1_ce0 => grp_AES_Full_Pipeline_L_copy1_fu_161_state_1_ce0,
        state_1_we0 => grp_AES_Full_Pipeline_L_copy1_fu_161_state_1_we0,
        state_1_d0 => grp_AES_Full_Pipeline_L_copy1_fu_161_state_1_d0);

    grp_AES_Full_Pipeline_L_rounds2_fu_168 : component AES_Full_AES_Full_Pipeline_L_rounds2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_AES_Full_Pipeline_L_rounds2_fu_168_ap_start,
        ap_done => grp_AES_Full_Pipeline_L_rounds2_fu_168_ap_done,
        ap_idle => grp_AES_Full_Pipeline_L_rounds2_fu_168_ap_idle,
        ap_ready => grp_AES_Full_Pipeline_L_rounds2_fu_168_ap_ready,
        Nr => Nr_read_reg_227,
        state_1_address0 => grp_AES_Full_Pipeline_L_rounds2_fu_168_state_1_address0,
        state_1_ce0 => grp_AES_Full_Pipeline_L_rounds2_fu_168_state_1_ce0,
        state_1_we0 => grp_AES_Full_Pipeline_L_rounds2_fu_168_state_1_we0,
        state_1_d0 => grp_AES_Full_Pipeline_L_rounds2_fu_168_state_1_d0,
        state_1_q0 => state_1_q0,
        state_1_address1 => grp_AES_Full_Pipeline_L_rounds2_fu_168_state_1_address1,
        state_1_ce1 => grp_AES_Full_Pipeline_L_rounds2_fu_168_state_1_ce1,
        state_1_we1 => grp_AES_Full_Pipeline_L_rounds2_fu_168_state_1_we1,
        state_1_d1 => grp_AES_Full_Pipeline_L_rounds2_fu_168_state_1_d1,
        state_1_q1 => state_1_q1,
        trunc_ln => trunc_ln220_reg_249,
        expandedKey_address0 => grp_AES_Full_Pipeline_L_rounds2_fu_168_expandedKey_address0,
        expandedKey_ce0 => grp_AES_Full_Pipeline_L_rounds2_fu_168_expandedKey_ce0,
        expandedKey_q0 => expandedKey_q0,
        sub19_i => sub19_i_reg_254);

    grp_AES_Full_Pipeline_L_copy_o3_fu_188 : component AES_Full_AES_Full_Pipeline_L_copy_o3
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_AES_Full_Pipeline_L_copy_o3_fu_188_ap_start,
        ap_done => grp_AES_Full_Pipeline_L_copy_o3_fu_188_ap_done,
        ap_idle => grp_AES_Full_Pipeline_L_copy_o3_fu_188_ap_idle,
        ap_ready => grp_AES_Full_Pipeline_L_copy_o3_fu_188_ap_ready,
        state_1_address0 => grp_AES_Full_Pipeline_L_copy_o3_fu_188_state_1_address0,
        state_1_ce0 => grp_AES_Full_Pipeline_L_copy_o3_fu_188_state_1_ce0,
        state_1_q0 => state_1_q0,
        data_out_address0 => grp_AES_Full_Pipeline_L_copy_o3_fu_188_data_out_address0,
        data_out_ce0 => grp_AES_Full_Pipeline_L_copy_o3_fu_188_data_out_ce0,
        data_out_we0 => grp_AES_Full_Pipeline_L_copy_o3_fu_188_data_out_we0,
        data_out_d0 => grp_AES_Full_Pipeline_L_copy_o3_fu_188_data_out_d0);

    CRTLS_s_axi_U : component AES_Full_CRTLS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CRTLS_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CRTLS_DATA_WIDTH)
    port map (
        AWVALID => s_axi_CRTLS_AWVALID,
        AWREADY => s_axi_CRTLS_AWREADY,
        AWADDR => s_axi_CRTLS_AWADDR,
        WVALID => s_axi_CRTLS_WVALID,
        WREADY => s_axi_CRTLS_WREADY,
        WDATA => s_axi_CRTLS_WDATA,
        WSTRB => s_axi_CRTLS_WSTRB,
        ARVALID => s_axi_CRTLS_ARVALID,
        ARREADY => s_axi_CRTLS_ARREADY,
        ARADDR => s_axi_CRTLS_ARADDR,
        RVALID => s_axi_CRTLS_RVALID,
        RREADY => s_axi_CRTLS_RREADY,
        RDATA => s_axi_CRTLS_RDATA,
        RRESP => s_axi_CRTLS_RRESP,
        BVALID => s_axi_CRTLS_BVALID,
        BREADY => s_axi_CRTLS_BREADY,
        BRESP => s_axi_CRTLS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        mode_cipher => mode_cipher,
        mode_inverse_cipher => mode_inverse_cipher,
        data_in_address0 => data_in_address0,
        data_in_ce0 => data_in_ce0,
        data_in_q0 => data_in_q0,
        Nr => Nr,
        data_out_address0 => data_out_address0,
        data_out_ce0 => data_out_ce0,
        data_out_we0 => data_out_we0,
        data_out_d0 => data_out_d0,
        expandedKey_address0 => expandedKey_address0,
        expandedKey_ce0 => expandedKey_ce0,
        expandedKey_q0 => expandedKey_q0,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        ap_local_deadlock => ap_local_deadlock);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_AES_Full_Pipeline_L_copy1_fu_161_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_AES_Full_Pipeline_L_copy1_fu_161_ap_start_reg <= ap_const_logic_0;
            else
                if (((mode_inverse_cipher_read_reg_236 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_state23_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state23))) then 
                    grp_AES_Full_Pipeline_L_copy1_fu_161_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_AES_Full_Pipeline_L_copy1_fu_161_ap_ready = ap_const_logic_1)) then 
                    grp_AES_Full_Pipeline_L_copy1_fu_161_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_AES_Full_Pipeline_L_copy_fu_122_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_AES_Full_Pipeline_L_copy_fu_122_ap_start_reg <= ap_const_logic_0;
            else
                if (((mode_cipher_read_read_fu_116_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    grp_AES_Full_Pipeline_L_copy_fu_122_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_AES_Full_Pipeline_L_copy_fu_122_ap_ready = ap_const_logic_1)) then 
                    grp_AES_Full_Pipeline_L_copy_fu_122_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_AES_Full_Pipeline_L_copy_o3_fu_188_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_AES_Full_Pipeline_L_copy_o3_fu_188_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
                    grp_AES_Full_Pipeline_L_copy_o3_fu_188_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_AES_Full_Pipeline_L_copy_o3_fu_188_ap_ready = ap_const_logic_1)) then 
                    grp_AES_Full_Pipeline_L_copy_o3_fu_188_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_AES_Full_Pipeline_L_copy_o_fu_154_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_AES_Full_Pipeline_L_copy_o_fu_154_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
                    grp_AES_Full_Pipeline_L_copy_o_fu_154_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_AES_Full_Pipeline_L_copy_o_fu_154_ap_ready = ap_const_logic_1)) then 
                    grp_AES_Full_Pipeline_L_copy_o_fu_154_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_AES_Full_Pipeline_L_rounds2_fu_168_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_AES_Full_Pipeline_L_rounds2_fu_168_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
                    grp_AES_Full_Pipeline_L_rounds2_fu_168_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_AES_Full_Pipeline_L_rounds2_fu_168_ap_ready = ap_const_logic_1)) then 
                    grp_AES_Full_Pipeline_L_rounds2_fu_168_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_AES_Full_Pipeline_L_rounds_fu_139_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_AES_Full_Pipeline_L_rounds_fu_139_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                    grp_AES_Full_Pipeline_L_rounds_fu_139_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_AES_Full_Pipeline_L_rounds_fu_139_ap_ready = ap_const_logic_1)) then 
                    grp_AES_Full_Pipeline_L_rounds_fu_139_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_AddRoundKey_fu_130_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_AddRoundKey_fu_130_ap_start_reg <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_NS_fsm_state25) and (ap_const_logic_1 = ap_CS_fsm_state24)) or ((ap_const_logic_1 = ap_NS_fsm_state3) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
                    grp_AddRoundKey_fu_130_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_AddRoundKey_fu_130_ap_ready = ap_const_logic_1)) then 
                    grp_AddRoundKey_fu_130_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                Nr_read_reg_227 <= Nr;
                mode_cipher_read_reg_240 <= (0=>mode_cipher, others=>'-');
                mode_inverse_cipher_read_reg_236 <= (0=>mode_inverse_cipher, others=>'-');
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state42)) then
                sub19_i_reg_254 <= sub19_i_fu_220_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then
                sub_i_reg_244 <= sub_i_fu_198_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state25)) then
                trunc_ln220_reg_249 <= trunc_ln220_fu_205_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, mode_inverse_cipher_read_reg_236, mode_cipher_read_read_fu_116_p2, grp_AES_Full_Pipeline_L_copy_fu_122_ap_done, grp_AES_Full_Pipeline_L_rounds_fu_139_ap_done, grp_AES_Full_Pipeline_L_copy1_fu_161_ap_done, grp_AES_Full_Pipeline_L_rounds2_fu_168_ap_done, ap_CS_fsm_state2, ap_CS_fsm_state24, ap_CS_fsm_state21, ap_CS_fsm_state23, ap_block_state23_on_subcall_done, ap_CS_fsm_state43, ap_CS_fsm_state45, ap_block_state45_on_subcall_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((mode_cipher_read_read_fu_116_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state23;
                elsif (((mode_cipher_read_read_fu_116_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (grp_AES_Full_Pipeline_L_copy_fu_122_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state21) and (grp_AES_Full_Pipeline_L_rounds_fu_139_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state22;
                else
                    ap_NS_fsm <= ap_ST_fsm_state21;
                end if;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                if (((mode_inverse_cipher_read_reg_236 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_state23_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state23))) then
                    ap_NS_fsm <= ap_ST_fsm_state45;
                elsif (((mode_inverse_cipher_read_reg_236 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_state23_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state23))) then
                    ap_NS_fsm <= ap_ST_fsm_state24;
                else
                    ap_NS_fsm <= ap_ST_fsm_state23;
                end if;
            when ap_ST_fsm_state24 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state24) and (grp_AES_Full_Pipeline_L_copy1_fu_161_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state25;
                else
                    ap_NS_fsm <= ap_ST_fsm_state24;
                end if;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state43) and (grp_AES_Full_Pipeline_L_rounds2_fu_168_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state44;
                else
                    ap_NS_fsm <= ap_ST_fsm_state43;
                end if;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                if (((ap_const_boolean_0 = ap_block_state45_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state45))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state45;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    Nr_cast_fu_195_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Nr_read_reg_227),17));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state35 <= ap_CS_fsm(34);
    ap_CS_fsm_state36 <= ap_CS_fsm(35);
    ap_CS_fsm_state37 <= ap_CS_fsm(36);
    ap_CS_fsm_state38 <= ap_CS_fsm(37);
    ap_CS_fsm_state39 <= ap_CS_fsm(38);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state40 <= ap_CS_fsm(39);
    ap_CS_fsm_state41 <= ap_CS_fsm(40);
    ap_CS_fsm_state42 <= ap_CS_fsm(41);
    ap_CS_fsm_state43 <= ap_CS_fsm(42);
    ap_CS_fsm_state44 <= ap_CS_fsm(43);
    ap_CS_fsm_state45 <= ap_CS_fsm(44);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
    ap_NS_fsm_state25 <= ap_NS_fsm(24);
    ap_NS_fsm_state3 <= ap_NS_fsm(2);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state11_blk <= ap_const_logic_0;
    ap_ST_fsm_state12_blk <= ap_const_logic_0;
    ap_ST_fsm_state13_blk <= ap_const_logic_0;
    ap_ST_fsm_state14_blk <= ap_const_logic_0;
    ap_ST_fsm_state15_blk <= ap_const_logic_0;
    ap_ST_fsm_state16_blk <= ap_const_logic_0;
    ap_ST_fsm_state17_blk <= ap_const_logic_0;
    ap_ST_fsm_state18_blk <= ap_const_logic_0;
    ap_ST_fsm_state19_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state20_blk <= ap_const_logic_0;

    ap_ST_fsm_state21_blk_assign_proc : process(grp_AES_Full_Pipeline_L_rounds_fu_139_ap_done)
    begin
        if ((grp_AES_Full_Pipeline_L_rounds_fu_139_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state21_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state21_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state22_blk <= ap_const_logic_0;

    ap_ST_fsm_state23_blk_assign_proc : process(ap_block_state23_on_subcall_done)
    begin
        if ((ap_const_boolean_1 = ap_block_state23_on_subcall_done)) then 
            ap_ST_fsm_state23_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state23_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state24_blk_assign_proc : process(grp_AES_Full_Pipeline_L_copy1_fu_161_ap_done)
    begin
        if ((grp_AES_Full_Pipeline_L_copy1_fu_161_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state24_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state24_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state25_blk <= ap_const_logic_0;
    ap_ST_fsm_state26_blk <= ap_const_logic_0;
    ap_ST_fsm_state27_blk <= ap_const_logic_0;
    ap_ST_fsm_state28_blk <= ap_const_logic_0;
    ap_ST_fsm_state29_blk <= ap_const_logic_0;

    ap_ST_fsm_state2_blk_assign_proc : process(grp_AES_Full_Pipeline_L_copy_fu_122_ap_done)
    begin
        if ((grp_AES_Full_Pipeline_L_copy_fu_122_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state2_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state2_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state30_blk <= ap_const_logic_0;
    ap_ST_fsm_state31_blk <= ap_const_logic_0;
    ap_ST_fsm_state32_blk <= ap_const_logic_0;
    ap_ST_fsm_state33_blk <= ap_const_logic_0;
    ap_ST_fsm_state34_blk <= ap_const_logic_0;
    ap_ST_fsm_state35_blk <= ap_const_logic_0;
    ap_ST_fsm_state36_blk <= ap_const_logic_0;
    ap_ST_fsm_state37_blk <= ap_const_logic_0;
    ap_ST_fsm_state38_blk <= ap_const_logic_0;
    ap_ST_fsm_state39_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state40_blk <= ap_const_logic_0;
    ap_ST_fsm_state41_blk <= ap_const_logic_0;
    ap_ST_fsm_state42_blk <= ap_const_logic_0;

    ap_ST_fsm_state43_blk_assign_proc : process(grp_AES_Full_Pipeline_L_rounds2_fu_168_ap_done)
    begin
        if ((grp_AES_Full_Pipeline_L_rounds2_fu_168_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state43_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state43_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state44_blk <= ap_const_logic_0;

    ap_ST_fsm_state45_blk_assign_proc : process(ap_block_state45_on_subcall_done)
    begin
        if ((ap_const_boolean_1 = ap_block_state45_on_subcall_done)) then 
            ap_ST_fsm_state45_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state45_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_block_state23_on_subcall_done_assign_proc : process(mode_cipher_read_reg_240, grp_AES_Full_Pipeline_L_copy_o_fu_154_ap_done)
    begin
                ap_block_state23_on_subcall_done <= ((mode_cipher_read_reg_240 = ap_const_lv1_1) and (grp_AES_Full_Pipeline_L_copy_o_fu_154_ap_done = ap_const_logic_0));
    end process;


    ap_block_state45_on_subcall_done_assign_proc : process(mode_inverse_cipher_read_reg_236, grp_AES_Full_Pipeline_L_copy_o3_fu_188_ap_done)
    begin
                ap_block_state45_on_subcall_done <= ((mode_inverse_cipher_read_reg_236 = ap_const_lv1_1) and (grp_AES_Full_Pipeline_L_copy_o3_fu_188_ap_done = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state45, ap_block_state45_on_subcall_done)
    begin
        if (((ap_const_boolean_0 = ap_block_state45_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state45))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_local_block <= ap_const_logic_0;
    ap_local_deadlock <= ap_const_lv1_0;

    ap_ready_assign_proc : process(ap_CS_fsm_state45, ap_block_state45_on_subcall_done)
    begin
        if (((ap_const_boolean_0 = ap_block_state45_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state45))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    data_in_address0_assign_proc : process(grp_AES_Full_Pipeline_L_copy_fu_122_data_in_address0, grp_AES_Full_Pipeline_L_copy1_fu_161_data_in_address0, ap_CS_fsm_state2, ap_CS_fsm_state24)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            data_in_address0 <= grp_AES_Full_Pipeline_L_copy1_fu_161_data_in_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            data_in_address0 <= grp_AES_Full_Pipeline_L_copy_fu_122_data_in_address0;
        else 
            data_in_address0 <= "XXXX";
        end if; 
    end process;


    data_in_ce0_assign_proc : process(grp_AES_Full_Pipeline_L_copy_fu_122_data_in_ce0, grp_AES_Full_Pipeline_L_copy1_fu_161_data_in_ce0, ap_CS_fsm_state2, ap_CS_fsm_state24)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            data_in_ce0 <= grp_AES_Full_Pipeline_L_copy1_fu_161_data_in_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            data_in_ce0 <= grp_AES_Full_Pipeline_L_copy_fu_122_data_in_ce0;
        else 
            data_in_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    data_out_address0_assign_proc : process(mode_inverse_cipher_read_reg_236, mode_cipher_read_reg_240, grp_AES_Full_Pipeline_L_copy_o_fu_154_data_out_address0, grp_AES_Full_Pipeline_L_copy_o3_fu_188_data_out_address0, ap_CS_fsm_state23, ap_CS_fsm_state45)
    begin
        if (((mode_inverse_cipher_read_reg_236 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state45))) then 
            data_out_address0 <= grp_AES_Full_Pipeline_L_copy_o3_fu_188_data_out_address0;
        elsif (((mode_cipher_read_reg_240 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state23))) then 
            data_out_address0 <= grp_AES_Full_Pipeline_L_copy_o_fu_154_data_out_address0;
        else 
            data_out_address0 <= "XXXX";
        end if; 
    end process;


    data_out_ce0_assign_proc : process(mode_inverse_cipher_read_reg_236, mode_cipher_read_reg_240, grp_AES_Full_Pipeline_L_copy_o_fu_154_data_out_ce0, grp_AES_Full_Pipeline_L_copy_o3_fu_188_data_out_ce0, ap_CS_fsm_state23, ap_CS_fsm_state45)
    begin
        if (((mode_inverse_cipher_read_reg_236 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state45))) then 
            data_out_ce0 <= grp_AES_Full_Pipeline_L_copy_o3_fu_188_data_out_ce0;
        elsif (((mode_cipher_read_reg_240 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state23))) then 
            data_out_ce0 <= grp_AES_Full_Pipeline_L_copy_o_fu_154_data_out_ce0;
        else 
            data_out_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    data_out_d0_assign_proc : process(mode_inverse_cipher_read_reg_236, mode_cipher_read_reg_240, grp_AES_Full_Pipeline_L_copy_o_fu_154_data_out_d0, grp_AES_Full_Pipeline_L_copy_o3_fu_188_data_out_d0, ap_CS_fsm_state23, ap_CS_fsm_state45)
    begin
        if (((mode_inverse_cipher_read_reg_236 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state45))) then 
            data_out_d0 <= grp_AES_Full_Pipeline_L_copy_o3_fu_188_data_out_d0;
        elsif (((mode_cipher_read_reg_240 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state23))) then 
            data_out_d0 <= grp_AES_Full_Pipeline_L_copy_o_fu_154_data_out_d0;
        else 
            data_out_d0 <= "XXXXXXXX";
        end if; 
    end process;


    data_out_we0_assign_proc : process(mode_inverse_cipher_read_reg_236, mode_cipher_read_reg_240, grp_AES_Full_Pipeline_L_copy_o_fu_154_data_out_we0, grp_AES_Full_Pipeline_L_copy_o3_fu_188_data_out_we0, ap_CS_fsm_state23, ap_CS_fsm_state45)
    begin
        if (((mode_inverse_cipher_read_reg_236 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state45))) then 
            data_out_we0 <= grp_AES_Full_Pipeline_L_copy_o3_fu_188_data_out_we0;
        elsif (((mode_cipher_read_reg_240 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state23))) then 
            data_out_we0 <= grp_AES_Full_Pipeline_L_copy_o_fu_154_data_out_we0;
        else 
            data_out_we0 <= ap_const_logic_0;
        end if; 
    end process;


    expandedKey_address0_assign_proc : process(ap_CS_fsm_state25, grp_AddRoundKey_fu_130_expandedKey_address0, grp_AES_Full_Pipeline_L_rounds_fu_139_expandedKey_address0, grp_AES_Full_Pipeline_L_rounds2_fu_168_expandedKey_address0, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state34, ap_CS_fsm_state35, ap_CS_fsm_state36, ap_CS_fsm_state37, ap_CS_fsm_state38, ap_CS_fsm_state39, ap_CS_fsm_state40, ap_CS_fsm_state41, ap_CS_fsm_state21, ap_CS_fsm_state43)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            expandedKey_address0 <= grp_AES_Full_Pipeline_L_rounds2_fu_168_expandedKey_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            expandedKey_address0 <= grp_AES_Full_Pipeline_L_rounds_fu_139_expandedKey_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state25))) then 
            expandedKey_address0 <= grp_AddRoundKey_fu_130_expandedKey_address0;
        else 
            expandedKey_address0 <= "XXXXXXXX";
        end if; 
    end process;


    expandedKey_ce0_assign_proc : process(ap_CS_fsm_state25, grp_AddRoundKey_fu_130_expandedKey_ce0, grp_AES_Full_Pipeline_L_rounds_fu_139_expandedKey_ce0, grp_AES_Full_Pipeline_L_rounds2_fu_168_expandedKey_ce0, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state34, ap_CS_fsm_state35, ap_CS_fsm_state36, ap_CS_fsm_state37, ap_CS_fsm_state38, ap_CS_fsm_state39, ap_CS_fsm_state40, ap_CS_fsm_state41, ap_CS_fsm_state21, ap_CS_fsm_state43)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            expandedKey_ce0 <= grp_AES_Full_Pipeline_L_rounds2_fu_168_expandedKey_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            expandedKey_ce0 <= grp_AES_Full_Pipeline_L_rounds_fu_139_expandedKey_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state25))) then 
            expandedKey_ce0 <= grp_AddRoundKey_fu_130_expandedKey_ce0;
        else 
            expandedKey_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_AES_Full_Pipeline_L_copy1_fu_161_ap_start <= grp_AES_Full_Pipeline_L_copy1_fu_161_ap_start_reg;
    grp_AES_Full_Pipeline_L_copy_fu_122_ap_start <= grp_AES_Full_Pipeline_L_copy_fu_122_ap_start_reg;
    grp_AES_Full_Pipeline_L_copy_o3_fu_188_ap_start <= grp_AES_Full_Pipeline_L_copy_o3_fu_188_ap_start_reg;
    grp_AES_Full_Pipeline_L_copy_o_fu_154_ap_start <= grp_AES_Full_Pipeline_L_copy_o_fu_154_ap_start_reg;
    grp_AES_Full_Pipeline_L_rounds2_fu_168_ap_start <= grp_AES_Full_Pipeline_L_rounds2_fu_168_ap_start_reg;
    grp_AES_Full_Pipeline_L_rounds_fu_139_ap_start <= grp_AES_Full_Pipeline_L_rounds_fu_139_ap_start_reg;
    grp_AddRoundKey_fu_130_ap_start <= grp_AddRoundKey_fu_130_ap_start_reg;

    grp_AddRoundKey_fu_130_roundKey_assign_proc : process(ap_CS_fsm_state25, ap_CS_fsm_state3, shl_ln1_fu_208_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            grp_AddRoundKey_fu_130_roundKey <= shl_ln1_fu_208_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_AddRoundKey_fu_130_roundKey <= ap_const_lv8_0;
        else 
            grp_AddRoundKey_fu_130_roundKey <= "XXXXXXXX";
        end if; 
    end process;


    grp_AddRoundKey_fu_130_state_q0_assign_proc : process(ap_CS_fsm_state25, state_1_q0, state_q0, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state34, ap_CS_fsm_state35, ap_CS_fsm_state36, ap_CS_fsm_state37, ap_CS_fsm_state38, ap_CS_fsm_state39, ap_CS_fsm_state40, ap_CS_fsm_state41)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state25))) then 
            grp_AddRoundKey_fu_130_state_q0 <= state_1_q0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            grp_AddRoundKey_fu_130_state_q0 <= state_q0;
        else 
            grp_AddRoundKey_fu_130_state_q0 <= "XXXXXXXX";
        end if; 
    end process;


    grp_AddRoundKey_fu_130_state_q1_assign_proc : process(ap_CS_fsm_state25, state_1_q1, state_q1, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state34, ap_CS_fsm_state35, ap_CS_fsm_state36, ap_CS_fsm_state37, ap_CS_fsm_state38, ap_CS_fsm_state39, ap_CS_fsm_state40, ap_CS_fsm_state41)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state25))) then 
            grp_AddRoundKey_fu_130_state_q1 <= state_1_q1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            grp_AddRoundKey_fu_130_state_q1 <= state_q1;
        else 
            grp_AddRoundKey_fu_130_state_q1 <= "XXXXXXXX";
        end if; 
    end process;

    mode_cipher_read_read_fu_116_p2 <= (0=>mode_cipher, others=>'-');
    shl_ln1_fu_208_p3 <= (trunc_ln220_fu_205_p1 & ap_const_lv4_0);

    state_1_address0_assign_proc : process(mode_inverse_cipher_read_reg_236, ap_CS_fsm_state25, grp_AddRoundKey_fu_130_state_address0, grp_AES_Full_Pipeline_L_copy1_fu_161_state_1_address0, grp_AES_Full_Pipeline_L_rounds2_fu_168_state_1_address0, grp_AES_Full_Pipeline_L_copy_o3_fu_188_state_1_address0, ap_CS_fsm_state24, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state34, ap_CS_fsm_state35, ap_CS_fsm_state36, ap_CS_fsm_state37, ap_CS_fsm_state38, ap_CS_fsm_state39, ap_CS_fsm_state40, ap_CS_fsm_state41, ap_CS_fsm_state43, ap_CS_fsm_state45)
    begin
        if (((mode_inverse_cipher_read_reg_236 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state45))) then 
            state_1_address0 <= grp_AES_Full_Pipeline_L_copy_o3_fu_188_state_1_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            state_1_address0 <= grp_AES_Full_Pipeline_L_rounds2_fu_168_state_1_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            state_1_address0 <= grp_AES_Full_Pipeline_L_copy1_fu_161_state_1_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state25))) then 
            state_1_address0 <= grp_AddRoundKey_fu_130_state_address0;
        else 
            state_1_address0 <= "XXXX";
        end if; 
    end process;


    state_1_address1_assign_proc : process(ap_CS_fsm_state25, grp_AddRoundKey_fu_130_state_address1, grp_AES_Full_Pipeline_L_rounds2_fu_168_state_1_address1, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state34, ap_CS_fsm_state35, ap_CS_fsm_state36, ap_CS_fsm_state37, ap_CS_fsm_state38, ap_CS_fsm_state39, ap_CS_fsm_state40, ap_CS_fsm_state41, ap_CS_fsm_state43)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            state_1_address1 <= grp_AES_Full_Pipeline_L_rounds2_fu_168_state_1_address1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state25))) then 
            state_1_address1 <= grp_AddRoundKey_fu_130_state_address1;
        else 
            state_1_address1 <= "XXXX";
        end if; 
    end process;


    state_1_ce0_assign_proc : process(mode_inverse_cipher_read_reg_236, ap_CS_fsm_state25, grp_AddRoundKey_fu_130_state_ce0, grp_AES_Full_Pipeline_L_copy1_fu_161_state_1_ce0, grp_AES_Full_Pipeline_L_rounds2_fu_168_state_1_ce0, grp_AES_Full_Pipeline_L_copy_o3_fu_188_state_1_ce0, ap_CS_fsm_state24, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state34, ap_CS_fsm_state35, ap_CS_fsm_state36, ap_CS_fsm_state37, ap_CS_fsm_state38, ap_CS_fsm_state39, ap_CS_fsm_state40, ap_CS_fsm_state41, ap_CS_fsm_state43, ap_CS_fsm_state45)
    begin
        if (((mode_inverse_cipher_read_reg_236 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state45))) then 
            state_1_ce0 <= grp_AES_Full_Pipeline_L_copy_o3_fu_188_state_1_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            state_1_ce0 <= grp_AES_Full_Pipeline_L_rounds2_fu_168_state_1_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            state_1_ce0 <= grp_AES_Full_Pipeline_L_copy1_fu_161_state_1_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state25))) then 
            state_1_ce0 <= grp_AddRoundKey_fu_130_state_ce0;
        else 
            state_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    state_1_ce1_assign_proc : process(ap_CS_fsm_state25, grp_AddRoundKey_fu_130_state_ce1, grp_AES_Full_Pipeline_L_rounds2_fu_168_state_1_ce1, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state34, ap_CS_fsm_state35, ap_CS_fsm_state36, ap_CS_fsm_state37, ap_CS_fsm_state38, ap_CS_fsm_state39, ap_CS_fsm_state40, ap_CS_fsm_state41, ap_CS_fsm_state43)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            state_1_ce1 <= grp_AES_Full_Pipeline_L_rounds2_fu_168_state_1_ce1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state25))) then 
            state_1_ce1 <= grp_AddRoundKey_fu_130_state_ce1;
        else 
            state_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    state_1_d0_assign_proc : process(ap_CS_fsm_state25, grp_AddRoundKey_fu_130_state_d0, grp_AES_Full_Pipeline_L_copy1_fu_161_state_1_d0, grp_AES_Full_Pipeline_L_rounds2_fu_168_state_1_d0, ap_CS_fsm_state24, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state34, ap_CS_fsm_state35, ap_CS_fsm_state36, ap_CS_fsm_state37, ap_CS_fsm_state38, ap_CS_fsm_state39, ap_CS_fsm_state40, ap_CS_fsm_state41, ap_CS_fsm_state43)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            state_1_d0 <= grp_AES_Full_Pipeline_L_rounds2_fu_168_state_1_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            state_1_d0 <= grp_AES_Full_Pipeline_L_copy1_fu_161_state_1_d0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state25))) then 
            state_1_d0 <= grp_AddRoundKey_fu_130_state_d0;
        else 
            state_1_d0 <= "XXXXXXXX";
        end if; 
    end process;


    state_1_d1_assign_proc : process(ap_CS_fsm_state25, grp_AddRoundKey_fu_130_state_d1, grp_AES_Full_Pipeline_L_rounds2_fu_168_state_1_d1, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state34, ap_CS_fsm_state35, ap_CS_fsm_state36, ap_CS_fsm_state37, ap_CS_fsm_state38, ap_CS_fsm_state39, ap_CS_fsm_state40, ap_CS_fsm_state41, ap_CS_fsm_state43)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            state_1_d1 <= grp_AES_Full_Pipeline_L_rounds2_fu_168_state_1_d1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state25))) then 
            state_1_d1 <= grp_AddRoundKey_fu_130_state_d1;
        else 
            state_1_d1 <= "XXXXXXXX";
        end if; 
    end process;


    state_1_we0_assign_proc : process(ap_CS_fsm_state25, grp_AddRoundKey_fu_130_state_we0, grp_AES_Full_Pipeline_L_copy1_fu_161_state_1_we0, grp_AES_Full_Pipeline_L_rounds2_fu_168_state_1_we0, ap_CS_fsm_state24, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state34, ap_CS_fsm_state35, ap_CS_fsm_state36, ap_CS_fsm_state37, ap_CS_fsm_state38, ap_CS_fsm_state39, ap_CS_fsm_state40, ap_CS_fsm_state41, ap_CS_fsm_state43)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            state_1_we0 <= grp_AES_Full_Pipeline_L_rounds2_fu_168_state_1_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            state_1_we0 <= grp_AES_Full_Pipeline_L_copy1_fu_161_state_1_we0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state25))) then 
            state_1_we0 <= grp_AddRoundKey_fu_130_state_we0;
        else 
            state_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    state_1_we1_assign_proc : process(ap_CS_fsm_state25, grp_AddRoundKey_fu_130_state_we1, grp_AES_Full_Pipeline_L_rounds2_fu_168_state_1_we1, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state34, ap_CS_fsm_state35, ap_CS_fsm_state36, ap_CS_fsm_state37, ap_CS_fsm_state38, ap_CS_fsm_state39, ap_CS_fsm_state40, ap_CS_fsm_state41, ap_CS_fsm_state43)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            state_1_we1 <= grp_AES_Full_Pipeline_L_rounds2_fu_168_state_1_we1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state25))) then 
            state_1_we1 <= grp_AddRoundKey_fu_130_state_we1;
        else 
            state_1_we1 <= ap_const_logic_0;
        end if; 
    end process;


    state_address0_assign_proc : process(mode_cipher_read_reg_240, grp_AES_Full_Pipeline_L_copy_fu_122_state_address0, grp_AddRoundKey_fu_130_state_address0, grp_AES_Full_Pipeline_L_rounds_fu_139_state_address0, grp_AES_Full_Pipeline_L_copy_o_fu_154_state_address0, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state21, ap_CS_fsm_state23)
    begin
        if (((mode_cipher_read_reg_240 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state23))) then 
            state_address0 <= grp_AES_Full_Pipeline_L_copy_o_fu_154_state_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            state_address0 <= grp_AES_Full_Pipeline_L_rounds_fu_139_state_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            state_address0 <= grp_AddRoundKey_fu_130_state_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            state_address0 <= grp_AES_Full_Pipeline_L_copy_fu_122_state_address0;
        else 
            state_address0 <= "XXXX";
        end if; 
    end process;


    state_address1_assign_proc : process(grp_AddRoundKey_fu_130_state_address1, grp_AES_Full_Pipeline_L_rounds_fu_139_state_address1, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            state_address1 <= grp_AES_Full_Pipeline_L_rounds_fu_139_state_address1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            state_address1 <= grp_AddRoundKey_fu_130_state_address1;
        else 
            state_address1 <= "XXXX";
        end if; 
    end process;


    state_ce0_assign_proc : process(mode_cipher_read_reg_240, grp_AES_Full_Pipeline_L_copy_fu_122_state_ce0, grp_AddRoundKey_fu_130_state_ce0, grp_AES_Full_Pipeline_L_rounds_fu_139_state_ce0, grp_AES_Full_Pipeline_L_copy_o_fu_154_state_ce0, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state21, ap_CS_fsm_state23)
    begin
        if (((mode_cipher_read_reg_240 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state23))) then 
            state_ce0 <= grp_AES_Full_Pipeline_L_copy_o_fu_154_state_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            state_ce0 <= grp_AES_Full_Pipeline_L_rounds_fu_139_state_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            state_ce0 <= grp_AddRoundKey_fu_130_state_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            state_ce0 <= grp_AES_Full_Pipeline_L_copy_fu_122_state_ce0;
        else 
            state_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    state_ce1_assign_proc : process(grp_AddRoundKey_fu_130_state_ce1, grp_AES_Full_Pipeline_L_rounds_fu_139_state_ce1, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            state_ce1 <= grp_AES_Full_Pipeline_L_rounds_fu_139_state_ce1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            state_ce1 <= grp_AddRoundKey_fu_130_state_ce1;
        else 
            state_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    state_d0_assign_proc : process(grp_AES_Full_Pipeline_L_copy_fu_122_state_d0, grp_AddRoundKey_fu_130_state_d0, grp_AES_Full_Pipeline_L_rounds_fu_139_state_d0, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            state_d0 <= grp_AES_Full_Pipeline_L_rounds_fu_139_state_d0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            state_d0 <= grp_AddRoundKey_fu_130_state_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            state_d0 <= grp_AES_Full_Pipeline_L_copy_fu_122_state_d0;
        else 
            state_d0 <= "XXXXXXXX";
        end if; 
    end process;


    state_d1_assign_proc : process(grp_AddRoundKey_fu_130_state_d1, grp_AES_Full_Pipeline_L_rounds_fu_139_state_d1, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            state_d1 <= grp_AES_Full_Pipeline_L_rounds_fu_139_state_d1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            state_d1 <= grp_AddRoundKey_fu_130_state_d1;
        else 
            state_d1 <= "XXXXXXXX";
        end if; 
    end process;


    state_we0_assign_proc : process(grp_AES_Full_Pipeline_L_copy_fu_122_state_we0, grp_AddRoundKey_fu_130_state_we0, grp_AES_Full_Pipeline_L_rounds_fu_139_state_we0, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            state_we0 <= grp_AES_Full_Pipeline_L_rounds_fu_139_state_we0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            state_we0 <= grp_AddRoundKey_fu_130_state_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            state_we0 <= grp_AES_Full_Pipeline_L_copy_fu_122_state_we0;
        else 
            state_we0 <= ap_const_logic_0;
        end if; 
    end process;


    state_we1_assign_proc : process(grp_AddRoundKey_fu_130_state_we1, grp_AES_Full_Pipeline_L_rounds_fu_139_state_we1, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            state_we1 <= grp_AES_Full_Pipeline_L_rounds_fu_139_state_we1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            state_we1 <= grp_AddRoundKey_fu_130_state_we1;
        else 
            state_we1 <= ap_const_logic_0;
        end if; 
    end process;

    sub19_i_fu_220_p2 <= std_logic_vector(unsigned(zext_ln220_fu_217_p1) + unsigned(ap_const_lv17_1FFFF));
    sub_i_fu_198_p2 <= std_logic_vector(unsigned(Nr_cast_fu_195_p1) + unsigned(ap_const_lv17_1FFFF));
    trunc_ln220_fu_205_p1 <= Nr_read_reg_227(4 - 1 downto 0);
    zext_ln220_fu_217_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Nr_read_reg_227),17));
end behav;
