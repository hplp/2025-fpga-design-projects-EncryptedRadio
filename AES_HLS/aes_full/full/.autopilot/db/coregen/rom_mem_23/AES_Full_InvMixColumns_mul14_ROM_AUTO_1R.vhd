-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
-- Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity AES_Full_InvMixColumns_mul14_ROM_AUTO_1R is 
    generic(
             DataWidth     : integer := 8; 
             AddressWidth     : integer := 8; 
             AddressRange    : integer := 256
    ); 
    port (
          address0      : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DataWidth-1 downto 0);
          reset     : in std_logic;
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of AES_Full_InvMixColumns_mul14_ROM_AUTO_1R is 

signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 
type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00000000", 1 => "00001110", 2 => "00011100", 3 => "00010010", 
    4 => "00111000", 5 => "00110110", 6 => "00100100", 7 => "00101010", 
    8 => "01110000", 9 => "01111110", 10 => "01101100", 11 => "01100010", 
    12 => "01001000", 13 => "01000110", 14 => "01010100", 15 => "01011010", 
    16 => "11100000", 17 => "11101110", 18 => "11111100", 19 => "11110010", 
    20 => "11011000", 21 => "11010110", 22 => "11000100", 23 => "11001010", 
    24 => "10010000", 25 => "10011110", 26 => "10001100", 27 => "10000010", 
    28 => "10101000", 29 => "10100110", 30 => "10110100", 31 => "10111010", 
    32 => "11011011", 33 => "11010101", 34 => "11000111", 35 => "11001001", 
    36 => "11100011", 37 => "11101101", 38 => "11111111", 39 => "11110001", 
    40 => "10101011", 41 => "10100101", 42 => "10110111", 43 => "10111001", 
    44 => "10010011", 45 => "10011101", 46 => "10001111", 47 => "10000001", 
    48 => "00111011", 49 => "00110101", 50 => "00100111", 51 => "00101001", 
    52 => "00000011", 53 => "00001101", 54 => "00011111", 55 => "00010001", 
    56 => "01001011", 57 => "01000101", 58 => "01010111", 59 => "01011001", 
    60 => "01110011", 61 => "01111101", 62 => "01101111", 63 => "01100001", 
    64 => "10101101", 65 => "10100011", 66 => "10110001", 67 => "10111111", 
    68 => "10010101", 69 => "10011011", 70 => "10001001", 71 => "10000111", 
    72 => "11011101", 73 => "11010011", 74 => "11000001", 75 => "11001111", 
    76 => "11100101", 77 => "11101011", 78 => "11111001", 79 => "11110111", 
    80 => "01001101", 81 => "01000011", 82 => "01010001", 83 => "01011111", 
    84 => "01110101", 85 => "01111011", 86 => "01101001", 87 => "01100111", 
    88 => "00111101", 89 => "00110011", 90 => "00100001", 91 => "00101111", 
    92 => "00000101", 93 => "00001011", 94 => "00011001", 95 => "00010111", 
    96 => "01110110", 97 => "01111000", 98 => "01101010", 99 => "01100100", 
    100 => "01001110", 101 => "01000000", 102 => "01010010", 103 => "01011100", 
    104 => "00000110", 105 => "00001000", 106 => "00011010", 107 => "00010100", 
    108 => "00111110", 109 => "00110000", 110 => "00100010", 111 => "00101100", 
    112 => "10010110", 113 => "10011000", 114 => "10001010", 115 => "10000100", 
    116 => "10101110", 117 => "10100000", 118 => "10110010", 119 => "10111100", 
    120 => "11100110", 121 => "11101000", 122 => "11111010", 123 => "11110100", 
    124 => "11011110", 125 => "11010000", 126 => "11000010", 127 => "11001100", 
    128 => "01000001", 129 => "01001111", 130 => "01011101", 131 => "01010011", 
    132 => "01111001", 133 => "01110111", 134 => "01100101", 135 => "01101011", 
    136 => "00110001", 137 => "00111111", 138 => "00101101", 139 => "00100011", 
    140 => "00001001", 141 => "00000111", 142 => "00010101", 143 => "00011011", 
    144 => "10100001", 145 => "10101111", 146 => "10111101", 147 => "10110011", 
    148 => "10011001", 149 => "10010111", 150 => "10000101", 151 => "10001011", 
    152 => "11010001", 153 => "11011111", 154 => "11001101", 155 => "11000011", 
    156 => "11101001", 157 => "11100111", 158 => "11110101", 159 => "11111011", 
    160 => "10011010", 161 => "10010100", 162 => "10000110", 163 => "10001000", 
    164 => "10100010", 165 => "10101100", 166 => "10111110", 167 => "10110000", 
    168 => "11101010", 169 => "11100100", 170 => "11110110", 171 => "11111000", 
    172 => "11010010", 173 => "11011100", 174 => "11001110", 175 => "11000000", 
    176 => "01111010", 177 => "01110100", 178 => "01100110", 179 => "01101000", 
    180 => "01000010", 181 => "01001100", 182 => "01011110", 183 => "01010000", 
    184 => "00001010", 185 => "00000100", 186 => "00010110", 187 => "00011000", 
    188 => "00110010", 189 => "00111100", 190 => "00101110", 191 => "00100000", 
    192 => "11101100", 193 => "11100010", 194 => "11110000", 195 => "11111110", 
    196 => "11010100", 197 => "11011010", 198 => "11001000", 199 => "11000110", 
    200 => "10011100", 201 => "10010010", 202 => "10000000", 203 => "10001110", 
    204 => "10100100", 205 => "10101010", 206 => "10111000", 207 => "10110110", 
    208 => "00001100", 209 => "00000010", 210 => "00010000", 211 => "00011110", 
    212 => "00110100", 213 => "00111010", 214 => "00101000", 215 => "00100110", 
    216 => "01111100", 217 => "01110010", 218 => "01100000", 219 => "01101110", 
    220 => "01000100", 221 => "01001010", 222 => "01011000", 223 => "01010110", 
    224 => "00110111", 225 => "00111001", 226 => "00101011", 227 => "00100101", 
    228 => "00001111", 229 => "00000001", 230 => "00010011", 231 => "00011101", 
    232 => "01000111", 233 => "01001001", 234 => "01011011", 235 => "01010101", 
    236 => "01111111", 237 => "01110001", 238 => "01100011", 239 => "01101101", 
    240 => "11010111", 241 => "11011001", 242 => "11001011", 243 => "11000101", 
    244 => "11101111", 245 => "11100001", 246 => "11110011", 247 => "11111101", 
    248 => "10100111", 249 => "10101001", 250 => "10111011", 251 => "10110101", 
    252 => "10011111", 253 => "10010001", 254 => "10000011", 255 => "10001101" );


begin 


memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(address0_tmp)); 
        end if;
    end if;
end process;

end rtl;

