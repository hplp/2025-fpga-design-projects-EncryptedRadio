-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
-- Version: 2021.2
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity AES_Full_AddRoundKey is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    state_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    state_ce0 : OUT STD_LOGIC;
    state_we0 : OUT STD_LOGIC;
    state_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    state_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    state_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    state_ce1 : OUT STD_LOGIC;
    state_we1 : OUT STD_LOGIC;
    state_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    state_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    expandedKey_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    expandedKey_ce0 : OUT STD_LOGIC;
    expandedKey_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    roundKey : IN STD_LOGIC_VECTOR (7 downto 0);
    ap_ce : IN STD_LOGIC );
end;


architecture behav of AES_Full_AddRoundKey is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (16 downto 0) := "00000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (16 downto 0) := "00000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (16 downto 0) := "00000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (16 downto 0) := "00000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (16 downto 0) := "00000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (16 downto 0) := "00000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (16 downto 0) := "00001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (16 downto 0) := "00010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (16 downto 0) := "00100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (16 downto 0) := "01000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (16 downto 0) := "10000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv64_5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv64_6 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000110";
    constant ap_const_lv64_7 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000111";
    constant ap_const_lv64_8 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000";
    constant ap_const_lv64_9 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001001";
    constant ap_const_lv64_A : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001010";
    constant ap_const_lv64_B : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001011";
    constant ap_const_lv64_C : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001100";
    constant ap_const_lv64_D : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001101";
    constant ap_const_lv64_E : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001110";
    constant ap_const_lv64_F : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv8_2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_const_lv8_3 : STD_LOGIC_VECTOR (7 downto 0) := "00000011";
    constant ap_const_lv8_4 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_const_lv8_5 : STD_LOGIC_VECTOR (7 downto 0) := "00000101";
    constant ap_const_lv8_6 : STD_LOGIC_VECTOR (7 downto 0) := "00000110";
    constant ap_const_lv8_7 : STD_LOGIC_VECTOR (7 downto 0) := "00000111";
    constant ap_const_lv8_8 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_const_lv8_9 : STD_LOGIC_VECTOR (7 downto 0) := "00001001";
    constant ap_const_lv8_A : STD_LOGIC_VECTOR (7 downto 0) := "00001010";
    constant ap_const_lv8_B : STD_LOGIC_VECTOR (7 downto 0) := "00001011";
    constant ap_const_lv8_C : STD_LOGIC_VECTOR (7 downto 0) := "00001100";
    constant ap_const_lv8_D : STD_LOGIC_VECTOR (7 downto 0) := "00001101";
    constant ap_const_lv8_E : STD_LOGIC_VECTOR (7 downto 0) := "00001110";
    constant ap_const_lv8_F : STD_LOGIC_VECTOR (7 downto 0) := "00001111";
    constant ap_const_boolean_1 : BOOLEAN := true;

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal reg_378 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal reg_383 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal reg_388 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal reg_393 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal grp_fu_398_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_423 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal grp_fu_404_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_429 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal grp_fu_410_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_435 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal roundKey_read_reg_624 : STD_LOGIC_VECTOR (7 downto 0);
    signal state_addr_reg_643 : STD_LOGIC_VECTOR (3 downto 0);
    signal state_addr_83_reg_653 : STD_LOGIC_VECTOR (3 downto 0);
    signal xor_ln148_fu_446_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln148_reg_658 : STD_LOGIC_VECTOR (7 downto 0);
    signal state_addr_84_reg_668 : STD_LOGIC_VECTOR (3 downto 0);
    signal state_addr_85_reg_673 : STD_LOGIC_VECTOR (3 downto 0);
    signal state_addr_86_reg_683 : STD_LOGIC_VECTOR (3 downto 0);
    signal state_addr_87_reg_688 : STD_LOGIC_VECTOR (3 downto 0);
    signal xor_ln148_2_reg_693 : STD_LOGIC_VECTOR (7 downto 0);
    signal state_addr_88_reg_703 : STD_LOGIC_VECTOR (3 downto 0);
    signal state_addr_89_reg_708 : STD_LOGIC_VECTOR (3 downto 0);
    signal state_addr_90_reg_718 : STD_LOGIC_VECTOR (3 downto 0);
    signal state_addr_91_reg_723 : STD_LOGIC_VECTOR (3 downto 0);
    signal xor_ln148_4_reg_728 : STD_LOGIC_VECTOR (7 downto 0);
    signal state_load_91_reg_738 : STD_LOGIC_VECTOR (7 downto 0);
    signal state_addr_92_reg_743 : STD_LOGIC_VECTOR (3 downto 0);
    signal state_addr_93_reg_748 : STD_LOGIC_VECTOR (3 downto 0);
    signal state_load_93_reg_758 : STD_LOGIC_VECTOR (7 downto 0);
    signal state_addr_94_reg_763 : STD_LOGIC_VECTOR (3 downto 0);
    signal state_addr_95_reg_768 : STD_LOGIC_VECTOR (3 downto 0);
    signal xor_ln148_6_reg_773 : STD_LOGIC_VECTOR (7 downto 0);
    signal state_load_95_reg_783 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_416_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln148_7_reg_800 : STD_LOGIC_VECTOR (7 downto 0);
    signal state_load_97_reg_810 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln148_9_fu_542_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln148_9_reg_820 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal xor_ln148_11_fu_567_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln148_11_reg_835 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal roundKey_cast_fu_441_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln148_fu_457_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln148_1_fu_467_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln148_2_fu_477_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln148_3_fu_487_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln148_4_fu_497_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln148_5_fu_507_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln148_6_fu_517_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln148_7_fu_527_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln148_8_fu_537_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln148_9_fu_552_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln148_10_fu_562_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln148_11_fu_577_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln148_12_fu_587_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln148_13_fu_603_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln148_14_fu_613_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln148_13_fu_592_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal xor_ln148_15_fu_618_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln148_fu_452_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln148_1_fu_462_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln148_2_fu_472_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln148_3_fu_482_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln148_4_fu_492_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln148_5_fu_502_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln148_6_fu_512_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln148_7_fu_522_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln148_8_fu_532_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln148_9_fu_547_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln148_10_fu_557_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln148_11_fu_572_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln148_12_fu_582_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln148_13_fu_598_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln148_14_fu_608_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ST_fsm_state16_blk : STD_LOGIC;
    signal ap_ST_fsm_state17_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    reg_378_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_logic_1 = ap_ce)) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_logic_1 = ap_ce)) or ((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_logic_1 = ap_ce)))) then 
                reg_378 <= state_q1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_logic_1 = ap_ce))) then 
                reg_378 <= state_q0;
            end if; 
        end if;
    end process;

    reg_383_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_CS_fsm_state8) and (ap_const_logic_1 = ap_ce)) or ((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_logic_1 = ap_ce)))) then 
                reg_383 <= state_q1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_logic_1 = ap_ce))) then 
                reg_383 <= state_q0;
            end if; 
        end if;
    end process;

    reg_388_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_ce)) then
                if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                    reg_388 <= state_q1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                    reg_388 <= state_q0;
                end if;
            end if; 
        end if;
    end process;

    reg_393_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_ce)) then
                if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                    reg_393 <= state_q1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                    reg_393 <= state_q0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state10))) then
                reg_423 <= grp_fu_398_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state14))) then
                reg_429 <= grp_fu_404_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state7))) then
                reg_435 <= grp_fu_410_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                roundKey_read_reg_624 <= roundKey;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                state_load_91_reg_738 <= state_q0;
                xor_ln148_4_reg_728 <= grp_fu_398_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                state_load_93_reg_758 <= state_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                state_load_95_reg_783 <= state_q0;
                xor_ln148_6_reg_773 <= grp_fu_404_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                state_load_97_reg_810 <= state_q0;
                xor_ln148_7_reg_800 <= grp_fu_416_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                xor_ln148_11_reg_835 <= xor_ln148_11_fu_567_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                xor_ln148_2_reg_693 <= grp_fu_398_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                xor_ln148_9_reg_820 <= xor_ln148_9_fu_542_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                xor_ln148_reg_658 <= xor_ln148_fu_446_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_ce, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state5, ap_CS_fsm_state8, ap_CS_fsm_state7, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state14, ap_CS_fsm_state12, ap_CS_fsm_state11, ap_CS_fsm_state13, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_logic_1 = ap_ce))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_logic_1 = ap_ce))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_logic_1 = ap_ce))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_logic_1 = ap_ce))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_logic_1 = ap_ce))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and (ap_const_logic_1 = ap_ce))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                if (((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state10 => 
                if (((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state11 => 
                if (((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state12 => 
                if (((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state13 => 
                if (((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state14 => 
                if (((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state15 => 
                if (((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state15))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state16 => 
                if (((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state16))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_state17 => 
                if (((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state17))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state17;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln148_10_fu_557_p2 <= std_logic_vector(unsigned(roundKey_read_reg_624) + unsigned(ap_const_lv8_B));
    add_ln148_11_fu_572_p2 <= std_logic_vector(unsigned(roundKey_read_reg_624) + unsigned(ap_const_lv8_C));
    add_ln148_12_fu_582_p2 <= std_logic_vector(unsigned(roundKey_read_reg_624) + unsigned(ap_const_lv8_D));
    add_ln148_13_fu_598_p2 <= std_logic_vector(unsigned(roundKey_read_reg_624) + unsigned(ap_const_lv8_E));
    add_ln148_14_fu_608_p2 <= std_logic_vector(unsigned(roundKey_read_reg_624) + unsigned(ap_const_lv8_F));
    add_ln148_1_fu_462_p2 <= std_logic_vector(unsigned(roundKey_read_reg_624) + unsigned(ap_const_lv8_2));
    add_ln148_2_fu_472_p2 <= std_logic_vector(unsigned(roundKey_read_reg_624) + unsigned(ap_const_lv8_3));
    add_ln148_3_fu_482_p2 <= std_logic_vector(unsigned(roundKey_read_reg_624) + unsigned(ap_const_lv8_4));
    add_ln148_4_fu_492_p2 <= std_logic_vector(unsigned(roundKey_read_reg_624) + unsigned(ap_const_lv8_5));
    add_ln148_5_fu_502_p2 <= std_logic_vector(unsigned(roundKey_read_reg_624) + unsigned(ap_const_lv8_6));
    add_ln148_6_fu_512_p2 <= std_logic_vector(unsigned(roundKey_read_reg_624) + unsigned(ap_const_lv8_7));
    add_ln148_7_fu_522_p2 <= std_logic_vector(unsigned(roundKey_read_reg_624) + unsigned(ap_const_lv8_8));
    add_ln148_8_fu_532_p2 <= std_logic_vector(unsigned(roundKey_read_reg_624) + unsigned(ap_const_lv8_9));
    add_ln148_9_fu_547_p2 <= std_logic_vector(unsigned(roundKey_read_reg_624) + unsigned(ap_const_lv8_A));
    add_ln148_fu_452_p2 <= std_logic_vector(unsigned(roundKey_read_reg_624) + unsigned(ap_const_lv8_1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_ST_fsm_state10_blk_assign_proc : process(ap_ce)
    begin
        if ((ap_const_logic_0 = ap_ce)) then 
            ap_ST_fsm_state10_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state10_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state11_blk_assign_proc : process(ap_ce)
    begin
        if ((ap_const_logic_0 = ap_ce)) then 
            ap_ST_fsm_state11_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state11_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state12_blk_assign_proc : process(ap_ce)
    begin
        if ((ap_const_logic_0 = ap_ce)) then 
            ap_ST_fsm_state12_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state12_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state13_blk_assign_proc : process(ap_ce)
    begin
        if ((ap_const_logic_0 = ap_ce)) then 
            ap_ST_fsm_state13_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state13_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state14_blk_assign_proc : process(ap_ce)
    begin
        if ((ap_const_logic_0 = ap_ce)) then 
            ap_ST_fsm_state14_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state14_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state15_blk_assign_proc : process(ap_ce)
    begin
        if ((ap_const_logic_0 = ap_ce)) then 
            ap_ST_fsm_state15_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state15_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state16_blk_assign_proc : process(ap_ce)
    begin
        if ((ap_const_logic_0 = ap_ce)) then 
            ap_ST_fsm_state16_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state16_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state17_blk_assign_proc : process(ap_ce)
    begin
        if ((ap_const_logic_0 = ap_ce)) then 
            ap_ST_fsm_state17_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state17_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state1_blk_assign_proc : process(ap_start, ap_ce)
    begin
        if (((ap_const_logic_0 = ap_ce) or (ap_start = ap_const_logic_0))) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state2_blk_assign_proc : process(ap_ce)
    begin
        if ((ap_const_logic_0 = ap_ce)) then 
            ap_ST_fsm_state2_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state2_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state3_blk_assign_proc : process(ap_ce)
    begin
        if ((ap_const_logic_0 = ap_ce)) then 
            ap_ST_fsm_state3_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state3_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state4_blk_assign_proc : process(ap_ce)
    begin
        if ((ap_const_logic_0 = ap_ce)) then 
            ap_ST_fsm_state4_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state4_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state5_blk_assign_proc : process(ap_ce)
    begin
        if ((ap_const_logic_0 = ap_ce)) then 
            ap_ST_fsm_state5_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state5_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state6_blk_assign_proc : process(ap_ce)
    begin
        if ((ap_const_logic_0 = ap_ce)) then 
            ap_ST_fsm_state6_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state6_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state7_blk_assign_proc : process(ap_ce)
    begin
        if ((ap_const_logic_0 = ap_ce)) then 
            ap_ST_fsm_state7_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state7_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state8_blk_assign_proc : process(ap_ce)
    begin
        if ((ap_const_logic_0 = ap_ce)) then 
            ap_ST_fsm_state8_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state8_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state9_blk_assign_proc : process(ap_ce)
    begin
        if ((ap_const_logic_0 = ap_ce)) then 
            ap_ST_fsm_state9_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state9_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce, ap_CS_fsm_state17)
    begin
        if ((((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state17)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_ce, ap_CS_fsm_state17)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    expandedKey_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state5, ap_CS_fsm_state8, ap_CS_fsm_state7, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state14, ap_CS_fsm_state12, ap_CS_fsm_state11, ap_CS_fsm_state13, ap_CS_fsm_state15, ap_CS_fsm_state16, roundKey_cast_fu_441_p1, zext_ln148_fu_457_p1, zext_ln148_1_fu_467_p1, zext_ln148_2_fu_477_p1, zext_ln148_3_fu_487_p1, zext_ln148_4_fu_497_p1, zext_ln148_5_fu_507_p1, zext_ln148_6_fu_517_p1, zext_ln148_7_fu_527_p1, zext_ln148_8_fu_537_p1, zext_ln148_9_fu_552_p1, zext_ln148_10_fu_562_p1, zext_ln148_11_fu_577_p1, zext_ln148_12_fu_587_p1, zext_ln148_13_fu_603_p1, zext_ln148_14_fu_613_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            expandedKey_address0 <= zext_ln148_14_fu_613_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            expandedKey_address0 <= zext_ln148_13_fu_603_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            expandedKey_address0 <= zext_ln148_12_fu_587_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            expandedKey_address0 <= zext_ln148_11_fu_577_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            expandedKey_address0 <= zext_ln148_10_fu_562_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            expandedKey_address0 <= zext_ln148_9_fu_552_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            expandedKey_address0 <= zext_ln148_8_fu_537_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            expandedKey_address0 <= zext_ln148_7_fu_527_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            expandedKey_address0 <= zext_ln148_6_fu_517_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            expandedKey_address0 <= zext_ln148_5_fu_507_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            expandedKey_address0 <= zext_ln148_4_fu_497_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            expandedKey_address0 <= zext_ln148_3_fu_487_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            expandedKey_address0 <= zext_ln148_2_fu_477_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            expandedKey_address0 <= zext_ln148_1_fu_467_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            expandedKey_address0 <= zext_ln148_fu_457_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            expandedKey_address0 <= roundKey_cast_fu_441_p1(8 - 1 downto 0);
        else 
            expandedKey_address0 <= "XXXXXXXX";
        end if; 
    end process;


    expandedKey_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state5, ap_CS_fsm_state8, ap_CS_fsm_state7, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state14, ap_CS_fsm_state12, ap_CS_fsm_state11, ap_CS_fsm_state13, ap_CS_fsm_state15, ap_CS_fsm_state16)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state8) and (ap_const_logic_1 = ap_ce)) or ((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_logic_1 = ap_ce)) or ((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_logic_1 = ap_ce)) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_logic_1 = ap_ce)) or ((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_logic_1 = ap_ce)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_logic_1 = ap_ce)) or ((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state16)) or ((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state15)) or ((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state13)) or ((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state11)) or ((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state12)) or ((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state14)) or ((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state10)) or ((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state9)) or ((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state7)) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            expandedKey_ce0 <= ap_const_logic_1;
        else 
            expandedKey_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_398_p2 <= (reg_378 xor expandedKey_q0);
    grp_fu_404_p2 <= (reg_383 xor expandedKey_q0);
    grp_fu_410_p2 <= (reg_388 xor expandedKey_q0);
    grp_fu_416_p2 <= (reg_393 xor expandedKey_q0);
    roundKey_cast_fu_441_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(roundKey),64));
    state_addr_83_reg_653 <= ap_const_lv64_1(4 - 1 downto 0);
    state_addr_84_reg_668 <= ap_const_lv64_2(4 - 1 downto 0);
    state_addr_85_reg_673 <= ap_const_lv64_3(4 - 1 downto 0);
    state_addr_86_reg_683 <= ap_const_lv64_4(4 - 1 downto 0);
    state_addr_87_reg_688 <= ap_const_lv64_5(4 - 1 downto 0);
    state_addr_88_reg_703 <= ap_const_lv64_6(4 - 1 downto 0);
    state_addr_89_reg_708 <= ap_const_lv64_7(4 - 1 downto 0);
    state_addr_90_reg_718 <= ap_const_lv64_8(4 - 1 downto 0);
    state_addr_91_reg_723 <= ap_const_lv64_9(4 - 1 downto 0);
    state_addr_92_reg_743 <= ap_const_lv64_A(4 - 1 downto 0);
    state_addr_93_reg_748 <= ap_const_lv64_B(4 - 1 downto 0);
    state_addr_94_reg_763 <= ap_const_lv64_C(4 - 1 downto 0);
    state_addr_95_reg_768 <= ap_const_lv64_D(4 - 1 downto 0);
    state_addr_reg_643 <= ap_const_lv64_0(4 - 1 downto 0);

    state_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state5, ap_CS_fsm_state8, ap_CS_fsm_state7, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state14, ap_CS_fsm_state12, state_addr_83_reg_653, state_addr_85_reg_673, state_addr_87_reg_688, state_addr_89_reg_708, state_addr_91_reg_723, state_addr_93_reg_748, state_addr_95_reg_768, ap_CS_fsm_state11, ap_CS_fsm_state13, ap_CS_fsm_state15, ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            state_address0 <= ap_const_lv64_E(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            state_address0 <= state_addr_95_reg_768;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            state_address0 <= state_addr_93_reg_748;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            state_address0 <= state_addr_91_reg_723;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            state_address0 <= state_addr_89_reg_708;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            state_address0 <= state_addr_87_reg_688;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            state_address0 <= state_addr_85_reg_673;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            state_address0 <= state_addr_83_reg_653;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            state_address0 <= ap_const_lv64_F(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            state_address0 <= ap_const_lv64_D(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            state_address0 <= ap_const_lv64_B(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            state_address0 <= ap_const_lv64_9(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            state_address0 <= ap_const_lv64_7(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            state_address0 <= ap_const_lv64_5(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            state_address0 <= ap_const_lv64_3(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            state_address0 <= ap_const_lv64_1(4 - 1 downto 0);
        else 
            state_address0 <= "XXXX";
        end if; 
    end process;


    state_address1_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state5, ap_CS_fsm_state8, ap_CS_fsm_state7, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state14, ap_CS_fsm_state12, state_addr_reg_643, state_addr_84_reg_668, state_addr_86_reg_683, state_addr_88_reg_703, state_addr_90_reg_718, state_addr_92_reg_743, state_addr_94_reg_763, ap_CS_fsm_state11, ap_CS_fsm_state13, ap_CS_fsm_state15, ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            state_address1 <= ap_const_lv64_F(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            state_address1 <= state_addr_94_reg_763;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            state_address1 <= state_addr_92_reg_743;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            state_address1 <= state_addr_90_reg_718;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            state_address1 <= state_addr_88_reg_703;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            state_address1 <= state_addr_86_reg_683;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            state_address1 <= state_addr_84_reg_668;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            state_address1 <= state_addr_reg_643;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            state_address1 <= ap_const_lv64_E(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            state_address1 <= ap_const_lv64_C(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            state_address1 <= ap_const_lv64_A(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            state_address1 <= ap_const_lv64_8(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            state_address1 <= ap_const_lv64_6(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            state_address1 <= ap_const_lv64_4(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            state_address1 <= ap_const_lv64_2(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            state_address1 <= ap_const_lv64_0(4 - 1 downto 0);
        else 
            state_address1 <= "XXXX";
        end if; 
    end process;


    state_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state5, ap_CS_fsm_state8, ap_CS_fsm_state7, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state14, ap_CS_fsm_state12, ap_CS_fsm_state11, ap_CS_fsm_state13, ap_CS_fsm_state15, ap_CS_fsm_state16)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state8) and (ap_const_logic_1 = ap_ce)) or ((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_logic_1 = ap_ce)) or ((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_logic_1 = ap_ce)) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_logic_1 = ap_ce)) or ((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_logic_1 = ap_ce)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_logic_1 = ap_ce)) or ((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state16)) or ((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state15)) or ((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state13)) or ((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state11)) or ((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state12)) or ((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state14)) or ((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state10)) or ((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state9)) or ((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state7)) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            state_ce0 <= ap_const_logic_1;
        else 
            state_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    state_ce1_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state5, ap_CS_fsm_state8, ap_CS_fsm_state7, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state14, ap_CS_fsm_state12, ap_CS_fsm_state11, ap_CS_fsm_state13, ap_CS_fsm_state15, ap_CS_fsm_state17)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state8) and (ap_const_logic_1 = ap_ce)) or ((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_logic_1 = ap_ce)) or ((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_logic_1 = ap_ce)) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_logic_1 = ap_ce)) or ((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_logic_1 = ap_ce)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_logic_1 = ap_ce)) or ((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state17)) or ((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state15)) or ((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state13)) or ((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state11)) or ((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state12)) or ((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state14)) or ((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state10)) or ((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state9)) or ((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state7)) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            state_ce1 <= ap_const_logic_1;
        else 
            state_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    state_d0_assign_proc : process(ap_CS_fsm_state9, reg_423, ap_CS_fsm_state10, reg_429, ap_CS_fsm_state14, reg_435, ap_CS_fsm_state12, grp_fu_416_p2, xor_ln148_7_reg_800, xor_ln148_9_reg_820, ap_CS_fsm_state11, xor_ln148_11_reg_835, ap_CS_fsm_state13, ap_CS_fsm_state15, ap_CS_fsm_state16, xor_ln148_13_fu_592_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            state_d0 <= grp_fu_416_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            state_d0 <= xor_ln148_13_fu_592_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            state_d0 <= xor_ln148_11_reg_835;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            state_d0 <= xor_ln148_9_reg_820;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            state_d0 <= xor_ln148_7_reg_800;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            state_d0 <= reg_435;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            state_d0 <= reg_429;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            state_d0 <= reg_423;
        else 
            state_d0 <= "XXXXXXXX";
        end if; 
    end process;


    state_d1_assign_proc : process(ap_CS_fsm_state9, reg_423, ap_CS_fsm_state10, reg_429, ap_CS_fsm_state14, reg_435, ap_CS_fsm_state12, xor_ln148_reg_658, xor_ln148_2_reg_693, xor_ln148_4_reg_728, xor_ln148_6_reg_773, ap_CS_fsm_state11, ap_CS_fsm_state13, ap_CS_fsm_state15, ap_CS_fsm_state17, xor_ln148_15_fu_618_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            state_d1 <= xor_ln148_15_fu_618_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            state_d1 <= reg_429;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            state_d1 <= reg_435;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            state_d1 <= reg_423;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            state_d1 <= xor_ln148_6_reg_773;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            state_d1 <= xor_ln148_4_reg_728;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            state_d1 <= xor_ln148_2_reg_693;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            state_d1 <= xor_ln148_reg_658;
        else 
            state_d1 <= "XXXXXXXX";
        end if; 
    end process;


    state_we0_assign_proc : process(ap_ce, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state14, ap_CS_fsm_state12, ap_CS_fsm_state11, ap_CS_fsm_state13, ap_CS_fsm_state15, ap_CS_fsm_state16)
    begin
        if ((((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state16)) or ((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state15)) or ((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state13)) or ((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state11)) or ((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state12)) or ((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state14)) or ((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state10)) or ((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state9)))) then 
            state_we0 <= ap_const_logic_1;
        else 
            state_we0 <= ap_const_logic_0;
        end if; 
    end process;


    state_we1_assign_proc : process(ap_ce, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state14, ap_CS_fsm_state12, ap_CS_fsm_state11, ap_CS_fsm_state13, ap_CS_fsm_state15, ap_CS_fsm_state17)
    begin
        if ((((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state17)) or ((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state15)) or ((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state13)) or ((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state11)) or ((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state12)) or ((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state14)) or ((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state10)) or ((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state9)))) then 
            state_we1 <= ap_const_logic_1;
        else 
            state_we1 <= ap_const_logic_0;
        end if; 
    end process;

    xor_ln148_11_fu_567_p2 <= (state_load_93_reg_758 xor expandedKey_q0);
    xor_ln148_13_fu_592_p2 <= (state_load_95_reg_783 xor expandedKey_q0);
    xor_ln148_15_fu_618_p2 <= (state_load_97_reg_810 xor expandedKey_q0);
    xor_ln148_9_fu_542_p2 <= (state_load_91_reg_738 xor expandedKey_q0);
    xor_ln148_fu_446_p2 <= (state_q1 xor expandedKey_q0);
    zext_ln148_10_fu_562_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln148_10_fu_557_p2),64));
    zext_ln148_11_fu_577_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln148_11_fu_572_p2),64));
    zext_ln148_12_fu_587_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln148_12_fu_582_p2),64));
    zext_ln148_13_fu_603_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln148_13_fu_598_p2),64));
    zext_ln148_14_fu_613_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln148_14_fu_608_p2),64));
    zext_ln148_1_fu_467_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln148_1_fu_462_p2),64));
    zext_ln148_2_fu_477_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln148_2_fu_472_p2),64));
    zext_ln148_3_fu_487_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln148_3_fu_482_p2),64));
    zext_ln148_4_fu_497_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln148_4_fu_492_p2),64));
    zext_ln148_5_fu_507_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln148_5_fu_502_p2),64));
    zext_ln148_6_fu_517_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln148_6_fu_512_p2),64));
    zext_ln148_7_fu_527_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln148_7_fu_522_p2),64));
    zext_ln148_8_fu_537_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln148_8_fu_532_p2),64));
    zext_ln148_9_fu_552_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln148_9_fu_547_p2),64));
    zext_ln148_fu_457_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln148_fu_452_p2),64));
end behav;
