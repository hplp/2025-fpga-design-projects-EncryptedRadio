// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Version: 2021.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module AES_Full_AddRoundKey (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        state_address0,
        state_ce0,
        state_we0,
        state_d0,
        state_q0,
        state_address1,
        state_ce1,
        state_we1,
        state_d1,
        state_q1,
        expandedKey_address0,
        expandedKey_ce0,
        expandedKey_q0,
        roundKey,
        ap_ce
);

parameter    ap_ST_fsm_state1 = 17'd1;
parameter    ap_ST_fsm_state2 = 17'd2;
parameter    ap_ST_fsm_state3 = 17'd4;
parameter    ap_ST_fsm_state4 = 17'd8;
parameter    ap_ST_fsm_state5 = 17'd16;
parameter    ap_ST_fsm_state6 = 17'd32;
parameter    ap_ST_fsm_state7 = 17'd64;
parameter    ap_ST_fsm_state8 = 17'd128;
parameter    ap_ST_fsm_state9 = 17'd256;
parameter    ap_ST_fsm_state10 = 17'd512;
parameter    ap_ST_fsm_state11 = 17'd1024;
parameter    ap_ST_fsm_state12 = 17'd2048;
parameter    ap_ST_fsm_state13 = 17'd4096;
parameter    ap_ST_fsm_state14 = 17'd8192;
parameter    ap_ST_fsm_state15 = 17'd16384;
parameter    ap_ST_fsm_state16 = 17'd32768;
parameter    ap_ST_fsm_state17 = 17'd65536;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] state_address0;
output   state_ce0;
output   state_we0;
output  [7:0] state_d0;
input  [7:0] state_q0;
output  [3:0] state_address1;
output   state_ce1;
output   state_we1;
output  [7:0] state_d1;
input  [7:0] state_q1;
output  [7:0] expandedKey_address0;
output   expandedKey_ce0;
input  [7:0] expandedKey_q0;
input  [7:0] roundKey;
input   ap_ce;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[3:0] state_address0;
reg state_ce0;
reg state_we0;
reg[7:0] state_d0;
reg[3:0] state_address1;
reg state_ce1;
reg state_we1;
reg[7:0] state_d1;
reg[7:0] expandedKey_address0;
reg expandedKey_ce0;

(* fsm_encoding = "none" *) reg   [16:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [7:0] reg_378;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state6;
reg   [7:0] reg_383;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state8;
reg   [7:0] reg_388;
wire    ap_CS_fsm_state7;
reg   [7:0] reg_393;
wire    ap_CS_fsm_state9;
wire   [7:0] grp_fu_398_p2;
reg   [7:0] reg_423;
wire    ap_CS_fsm_state10;
wire   [7:0] grp_fu_404_p2;
reg   [7:0] reg_429;
wire    ap_CS_fsm_state14;
wire   [7:0] grp_fu_410_p2;
reg   [7:0] reg_435;
wire    ap_CS_fsm_state12;
reg   [7:0] roundKey_read_reg_624;
wire   [3:0] state_addr_reg_643;
wire   [3:0] state_addr_83_reg_653;
wire   [7:0] xor_ln148_fu_446_p2;
reg   [7:0] xor_ln148_reg_658;
wire   [3:0] state_addr_84_reg_668;
wire   [3:0] state_addr_85_reg_673;
wire   [3:0] state_addr_86_reg_683;
wire   [3:0] state_addr_87_reg_688;
reg   [7:0] xor_ln148_2_reg_693;
wire   [3:0] state_addr_88_reg_703;
wire   [3:0] state_addr_89_reg_708;
wire   [3:0] state_addr_90_reg_718;
wire   [3:0] state_addr_91_reg_723;
reg   [7:0] xor_ln148_4_reg_728;
reg   [7:0] state_load_91_reg_738;
wire   [3:0] state_addr_92_reg_743;
wire   [3:0] state_addr_93_reg_748;
reg   [7:0] state_load_93_reg_758;
wire   [3:0] state_addr_94_reg_763;
wire   [3:0] state_addr_95_reg_768;
reg   [7:0] xor_ln148_6_reg_773;
reg   [7:0] state_load_95_reg_783;
wire   [7:0] grp_fu_416_p2;
reg   [7:0] xor_ln148_7_reg_800;
reg   [7:0] state_load_97_reg_810;
wire   [7:0] xor_ln148_9_fu_542_p2;
reg   [7:0] xor_ln148_9_reg_820;
wire    ap_CS_fsm_state11;
wire   [7:0] xor_ln148_11_fu_567_p2;
reg   [7:0] xor_ln148_11_reg_835;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state16;
wire   [63:0] roundKey_cast_fu_441_p1;
wire   [63:0] zext_ln148_fu_457_p1;
wire   [63:0] zext_ln148_1_fu_467_p1;
wire   [63:0] zext_ln148_2_fu_477_p1;
wire   [63:0] zext_ln148_3_fu_487_p1;
wire   [63:0] zext_ln148_4_fu_497_p1;
wire   [63:0] zext_ln148_5_fu_507_p1;
wire   [63:0] zext_ln148_6_fu_517_p1;
wire   [63:0] zext_ln148_7_fu_527_p1;
wire   [63:0] zext_ln148_8_fu_537_p1;
wire   [63:0] zext_ln148_9_fu_552_p1;
wire   [63:0] zext_ln148_10_fu_562_p1;
wire   [63:0] zext_ln148_11_fu_577_p1;
wire   [63:0] zext_ln148_12_fu_587_p1;
wire   [63:0] zext_ln148_13_fu_603_p1;
wire   [63:0] zext_ln148_14_fu_613_p1;
wire   [7:0] xor_ln148_13_fu_592_p2;
wire    ap_CS_fsm_state17;
wire   [7:0] xor_ln148_15_fu_618_p2;
wire   [7:0] add_ln148_fu_452_p2;
wire   [7:0] add_ln148_1_fu_462_p2;
wire   [7:0] add_ln148_2_fu_472_p2;
wire   [7:0] add_ln148_3_fu_482_p2;
wire   [7:0] add_ln148_4_fu_492_p2;
wire   [7:0] add_ln148_5_fu_502_p2;
wire   [7:0] add_ln148_6_fu_512_p2;
wire   [7:0] add_ln148_7_fu_522_p2;
wire   [7:0] add_ln148_8_fu_532_p2;
wire   [7:0] add_ln148_9_fu_547_p2;
wire   [7:0] add_ln148_10_fu_557_p2;
wire   [7:0] add_ln148_11_fu_572_p2;
wire   [7:0] add_ln148_12_fu_582_p2;
wire   [7:0] add_ln148_13_fu_598_p2;
wire   [7:0] add_ln148_14_fu_608_p2;
reg   [16:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
reg    ap_ST_fsm_state2_blk;
reg    ap_ST_fsm_state3_blk;
reg    ap_ST_fsm_state4_blk;
reg    ap_ST_fsm_state5_blk;
reg    ap_ST_fsm_state6_blk;
reg    ap_ST_fsm_state7_blk;
reg    ap_ST_fsm_state8_blk;
reg    ap_ST_fsm_state9_blk;
reg    ap_ST_fsm_state10_blk;
reg    ap_ST_fsm_state11_blk;
reg    ap_ST_fsm_state12_blk;
reg    ap_ST_fsm_state13_blk;
reg    ap_ST_fsm_state14_blk;
reg    ap_ST_fsm_state15_blk;
reg    ap_ST_fsm_state16_blk;
reg    ap_ST_fsm_state17_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 17'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_state6) & (1'b1 == ap_ce)) | ((1'b1 == ap_CS_fsm_state4) & (1'b1 == ap_ce)) | ((1'b1 == ap_CS_fsm_state3) & (1'b1 == ap_ce)))) begin
        reg_378 <= state_q1;
    end else if (((1'b1 == ap_CS_fsm_state2) & (1'b1 == ap_ce))) begin
        reg_378 <= state_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_state8) & (1'b1 == ap_ce)) | ((1'b1 == ap_CS_fsm_state5) & (1'b1 == ap_ce)))) begin
        reg_383 <= state_q1;
    end else if (((1'b1 == ap_CS_fsm_state3) & (1'b1 == ap_ce))) begin
        reg_383 <= state_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_ce)) begin
        if ((1'b1 == ap_CS_fsm_state7)) begin
            reg_388 <= state_q1;
        end else if ((1'b1 == ap_CS_fsm_state4)) begin
            reg_388 <= state_q0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_ce)) begin
        if ((1'b1 == ap_CS_fsm_state9)) begin
            reg_393 <= state_q1;
        end else if ((1'b1 == ap_CS_fsm_state5)) begin
            reg_393 <= state_q0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state10))) begin
        reg_423 <= grp_fu_398_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state14))) begin
        reg_429 <= grp_fu_404_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state7))) begin
        reg_435 <= grp_fu_410_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        roundKey_read_reg_624 <= roundKey;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        state_load_91_reg_738 <= state_q0;
        xor_ln148_4_reg_728 <= grp_fu_398_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        state_load_93_reg_758 <= state_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        state_load_95_reg_783 <= state_q0;
        xor_ln148_6_reg_773 <= grp_fu_404_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        state_load_97_reg_810 <= state_q0;
        xor_ln148_7_reg_800 <= grp_fu_416_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        xor_ln148_11_reg_835 <= xor_ln148_11_fu_567_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        xor_ln148_2_reg_693 <= grp_fu_398_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        xor_ln148_9_reg_820 <= xor_ln148_9_fu_542_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        xor_ln148_reg_658 <= xor_ln148_fu_446_p2;
    end
end

always @ (*) begin
    if ((1'b0 == ap_ce)) begin
        ap_ST_fsm_state10_blk = 1'b1;
    end else begin
        ap_ST_fsm_state10_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_ce)) begin
        ap_ST_fsm_state11_blk = 1'b1;
    end else begin
        ap_ST_fsm_state11_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_ce)) begin
        ap_ST_fsm_state12_blk = 1'b1;
    end else begin
        ap_ST_fsm_state12_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_ce)) begin
        ap_ST_fsm_state13_blk = 1'b1;
    end else begin
        ap_ST_fsm_state13_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_ce)) begin
        ap_ST_fsm_state14_blk = 1'b1;
    end else begin
        ap_ST_fsm_state14_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_ce)) begin
        ap_ST_fsm_state15_blk = 1'b1;
    end else begin
        ap_ST_fsm_state15_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_ce)) begin
        ap_ST_fsm_state16_blk = 1'b1;
    end else begin
        ap_ST_fsm_state16_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_ce)) begin
        ap_ST_fsm_state17_blk = 1'b1;
    end else begin
        ap_ST_fsm_state17_blk = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_ce) | (ap_start == 1'b0))) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_ce)) begin
        ap_ST_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_fsm_state2_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_ce)) begin
        ap_ST_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_fsm_state3_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_ce)) begin
        ap_ST_fsm_state4_blk = 1'b1;
    end else begin
        ap_ST_fsm_state4_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_ce)) begin
        ap_ST_fsm_state5_blk = 1'b1;
    end else begin
        ap_ST_fsm_state5_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_ce)) begin
        ap_ST_fsm_state6_blk = 1'b1;
    end else begin
        ap_ST_fsm_state6_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_ce)) begin
        ap_ST_fsm_state7_blk = 1'b1;
    end else begin
        ap_ST_fsm_state7_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_ce)) begin
        ap_ST_fsm_state8_blk = 1'b1;
    end else begin
        ap_ST_fsm_state8_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_ce)) begin
        ap_ST_fsm_state9_blk = 1'b1;
    end else begin
        ap_ST_fsm_state9_blk = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state17)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state17))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        expandedKey_address0 = zext_ln148_14_fu_613_p1;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        expandedKey_address0 = zext_ln148_13_fu_603_p1;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        expandedKey_address0 = zext_ln148_12_fu_587_p1;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        expandedKey_address0 = zext_ln148_11_fu_577_p1;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        expandedKey_address0 = zext_ln148_10_fu_562_p1;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        expandedKey_address0 = zext_ln148_9_fu_552_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        expandedKey_address0 = zext_ln148_8_fu_537_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        expandedKey_address0 = zext_ln148_7_fu_527_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        expandedKey_address0 = zext_ln148_6_fu_517_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        expandedKey_address0 = zext_ln148_5_fu_507_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        expandedKey_address0 = zext_ln148_4_fu_497_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        expandedKey_address0 = zext_ln148_3_fu_487_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        expandedKey_address0 = zext_ln148_2_fu_477_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        expandedKey_address0 = zext_ln148_1_fu_467_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        expandedKey_address0 = zext_ln148_fu_457_p1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        expandedKey_address0 = roundKey_cast_fu_441_p1;
    end else begin
        expandedKey_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state8) & (1'b1 == ap_ce)) | ((1'b1 == ap_CS_fsm_state5) & (1'b1 == ap_ce)) | ((1'b1 == ap_CS_fsm_state6) & (1'b1 == ap_ce)) | ((1'b1 == ap_CS_fsm_state4) & (1'b1 == ap_ce)) | ((1'b1 == ap_CS_fsm_state3) & (1'b1 == ap_ce)) | ((1'b1 == ap_CS_fsm_state2) & (1'b1 == ap_ce)) | ((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state16)) | ((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state15)) | ((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state13)) | ((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state11)) | ((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state12)) | ((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state14)) | ((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state10)) | ((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state9)) | ((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state7)) | ((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1)))) begin
        expandedKey_ce0 = 1'b1;
    end else begin
        expandedKey_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        state_address0 = 64'd14;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        state_address0 = state_addr_95_reg_768;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        state_address0 = state_addr_93_reg_748;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        state_address0 = state_addr_91_reg_723;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        state_address0 = state_addr_89_reg_708;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        state_address0 = state_addr_87_reg_688;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        state_address0 = state_addr_85_reg_673;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        state_address0 = state_addr_83_reg_653;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        state_address0 = 64'd15;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        state_address0 = 64'd13;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        state_address0 = 64'd11;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        state_address0 = 64'd9;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        state_address0 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        state_address0 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        state_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        state_address0 = 64'd1;
    end else begin
        state_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        state_address1 = 64'd15;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        state_address1 = state_addr_94_reg_763;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        state_address1 = state_addr_92_reg_743;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        state_address1 = state_addr_90_reg_718;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        state_address1 = state_addr_88_reg_703;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        state_address1 = state_addr_86_reg_683;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        state_address1 = state_addr_84_reg_668;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        state_address1 = state_addr_reg_643;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        state_address1 = 64'd14;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        state_address1 = 64'd12;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        state_address1 = 64'd10;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        state_address1 = 64'd8;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        state_address1 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        state_address1 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        state_address1 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        state_address1 = 64'd0;
    end else begin
        state_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state8) & (1'b1 == ap_ce)) | ((1'b1 == ap_CS_fsm_state5) & (1'b1 == ap_ce)) | ((1'b1 == ap_CS_fsm_state6) & (1'b1 == ap_ce)) | ((1'b1 == ap_CS_fsm_state4) & (1'b1 == ap_ce)) | ((1'b1 == ap_CS_fsm_state3) & (1'b1 == ap_ce)) | ((1'b1 == ap_CS_fsm_state2) & (1'b1 == ap_ce)) | ((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state16)) | ((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state15)) | ((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state13)) | ((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state11)) | ((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state12)) | ((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state14)) | ((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state10)) | ((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state9)) | ((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state7)) | ((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1)))) begin
        state_ce0 = 1'b1;
    end else begin
        state_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state8) & (1'b1 == ap_ce)) | ((1'b1 == ap_CS_fsm_state5) & (1'b1 == ap_ce)) | ((1'b1 == ap_CS_fsm_state6) & (1'b1 == ap_ce)) | ((1'b1 == ap_CS_fsm_state4) & (1'b1 == ap_ce)) | ((1'b1 == ap_CS_fsm_state3) & (1'b1 == ap_ce)) | ((1'b1 == ap_CS_fsm_state2) & (1'b1 == ap_ce)) | ((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state17)) | ((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state15)) | ((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state13)) | ((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state11)) | ((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state12)) | ((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state14)) | ((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state10)) | ((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state9)) | ((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state7)) | ((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1)))) begin
        state_ce1 = 1'b1;
    end else begin
        state_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        state_d0 = grp_fu_416_p2;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        state_d0 = xor_ln148_13_fu_592_p2;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        state_d0 = xor_ln148_11_reg_835;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        state_d0 = xor_ln148_9_reg_820;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        state_d0 = xor_ln148_7_reg_800;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        state_d0 = reg_435;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        state_d0 = reg_429;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        state_d0 = reg_423;
    end else begin
        state_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        state_d1 = xor_ln148_15_fu_618_p2;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        state_d1 = reg_429;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        state_d1 = reg_435;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        state_d1 = reg_423;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        state_d1 = xor_ln148_6_reg_773;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        state_d1 = xor_ln148_4_reg_728;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        state_d1 = xor_ln148_2_reg_693;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        state_d1 = xor_ln148_reg_658;
    end else begin
        state_d1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state16)) | ((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state15)) | ((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state13)) | ((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state11)) | ((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state12)) | ((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state14)) | ((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state10)) | ((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state9)))) begin
        state_we0 = 1'b1;
    end else begin
        state_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state17)) | ((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state15)) | ((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state13)) | ((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state11)) | ((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state12)) | ((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state14)) | ((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state10)) | ((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state9)))) begin
        state_we1 = 1'b1;
    end else begin
        state_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (1'b1 == ap_ce))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (1'b1 == ap_ce))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (1'b1 == ap_ce))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (1'b1 == ap_ce))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (1'b1 == ap_ce))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state8 : begin
            if (((1'b1 == ap_CS_fsm_state8) & (1'b1 == ap_ce))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state9 : begin
            if (((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state9))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state10 : begin
            if (((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state10))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state11 : begin
            if (((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state11))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state12 : begin
            if (((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state12))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state13 : begin
            if (((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state13))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state14 : begin
            if (((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state14))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state15 : begin
            if (((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state15))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end
        end
        ap_ST_fsm_state16 : begin
            if (((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state16))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        ap_ST_fsm_state17 : begin
            if (((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state17))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln148_10_fu_557_p2 = (roundKey_read_reg_624 + 8'd11);

assign add_ln148_11_fu_572_p2 = (roundKey_read_reg_624 + 8'd12);

assign add_ln148_12_fu_582_p2 = (roundKey_read_reg_624 + 8'd13);

assign add_ln148_13_fu_598_p2 = (roundKey_read_reg_624 + 8'd14);

assign add_ln148_14_fu_608_p2 = (roundKey_read_reg_624 + 8'd15);

assign add_ln148_1_fu_462_p2 = (roundKey_read_reg_624 + 8'd2);

assign add_ln148_2_fu_472_p2 = (roundKey_read_reg_624 + 8'd3);

assign add_ln148_3_fu_482_p2 = (roundKey_read_reg_624 + 8'd4);

assign add_ln148_4_fu_492_p2 = (roundKey_read_reg_624 + 8'd5);

assign add_ln148_5_fu_502_p2 = (roundKey_read_reg_624 + 8'd6);

assign add_ln148_6_fu_512_p2 = (roundKey_read_reg_624 + 8'd7);

assign add_ln148_7_fu_522_p2 = (roundKey_read_reg_624 + 8'd8);

assign add_ln148_8_fu_532_p2 = (roundKey_read_reg_624 + 8'd9);

assign add_ln148_9_fu_547_p2 = (roundKey_read_reg_624 + 8'd10);

assign add_ln148_fu_452_p2 = (roundKey_read_reg_624 + 8'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign grp_fu_398_p2 = (reg_378 ^ expandedKey_q0);

assign grp_fu_404_p2 = (reg_383 ^ expandedKey_q0);

assign grp_fu_410_p2 = (reg_388 ^ expandedKey_q0);

assign grp_fu_416_p2 = (reg_393 ^ expandedKey_q0);

assign roundKey_cast_fu_441_p1 = roundKey;

assign state_addr_83_reg_653 = 64'd1;

assign state_addr_84_reg_668 = 64'd2;

assign state_addr_85_reg_673 = 64'd3;

assign state_addr_86_reg_683 = 64'd4;

assign state_addr_87_reg_688 = 64'd5;

assign state_addr_88_reg_703 = 64'd6;

assign state_addr_89_reg_708 = 64'd7;

assign state_addr_90_reg_718 = 64'd8;

assign state_addr_91_reg_723 = 64'd9;

assign state_addr_92_reg_743 = 64'd10;

assign state_addr_93_reg_748 = 64'd11;

assign state_addr_94_reg_763 = 64'd12;

assign state_addr_95_reg_768 = 64'd13;

assign state_addr_reg_643 = 64'd0;

assign xor_ln148_11_fu_567_p2 = (state_load_93_reg_758 ^ expandedKey_q0);

assign xor_ln148_13_fu_592_p2 = (state_load_95_reg_783 ^ expandedKey_q0);

assign xor_ln148_15_fu_618_p2 = (state_load_97_reg_810 ^ expandedKey_q0);

assign xor_ln148_9_fu_542_p2 = (state_load_91_reg_738 ^ expandedKey_q0);

assign xor_ln148_fu_446_p2 = (state_q1 ^ expandedKey_q0);

assign zext_ln148_10_fu_562_p1 = add_ln148_10_fu_557_p2;

assign zext_ln148_11_fu_577_p1 = add_ln148_11_fu_572_p2;

assign zext_ln148_12_fu_587_p1 = add_ln148_12_fu_582_p2;

assign zext_ln148_13_fu_603_p1 = add_ln148_13_fu_598_p2;

assign zext_ln148_14_fu_613_p1 = add_ln148_14_fu_608_p2;

assign zext_ln148_1_fu_467_p1 = add_ln148_1_fu_462_p2;

assign zext_ln148_2_fu_477_p1 = add_ln148_2_fu_472_p2;

assign zext_ln148_3_fu_487_p1 = add_ln148_3_fu_482_p2;

assign zext_ln148_4_fu_497_p1 = add_ln148_4_fu_492_p2;

assign zext_ln148_5_fu_507_p1 = add_ln148_5_fu_502_p2;

assign zext_ln148_6_fu_517_p1 = add_ln148_6_fu_512_p2;

assign zext_ln148_7_fu_527_p1 = add_ln148_7_fu_522_p2;

assign zext_ln148_8_fu_537_p1 = add_ln148_8_fu_532_p2;

assign zext_ln148_9_fu_552_p1 = add_ln148_9_fu_547_p2;

assign zext_ln148_fu_457_p1 = add_ln148_fu_452_p2;

endmodule //AES_Full_AddRoundKey
