-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity AES_Encrypt is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    plaintext_TDATA : IN STD_LOGIC_VECTOR (7 downto 0);
    plaintext_TVALID : IN STD_LOGIC;
    plaintext_TREADY : OUT STD_LOGIC;
    expandedKey_TDATA : IN STD_LOGIC_VECTOR (7 downto 0);
    expandedKey_TVALID : IN STD_LOGIC;
    expandedKey_TREADY : OUT STD_LOGIC;
    Nr : IN STD_LOGIC_VECTOR (15 downto 0);
    ciphertext_TDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
    ciphertext_TVALID : OUT STD_LOGIC;
    ciphertext_TREADY : IN STD_LOGIC );
end;


architecture behav of AES_Encrypt is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "AES_Encrypt,hls_ip_2017_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.669000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=6,HLS_SYN_DSP=0,HLS_SYN_FF=530,HLS_SYN_LUT=3201}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000000001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000000010";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000000100";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000001000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000010000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000100000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000001000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000010000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000100000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000001000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000010000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000100000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000001000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000010000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000100000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000001000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000010000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000100000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (28 downto 0) := "00000000001000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (28 downto 0) := "00000000010000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (28 downto 0) := "00000000100000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (28 downto 0) := "00000001000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (28 downto 0) := "00000010000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (28 downto 0) := "00000100000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (28 downto 0) := "00001000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (28 downto 0) := "00010000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (28 downto 0) := "00100000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (28 downto 0) := "01000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (28 downto 0) := "10000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv64_5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv64_6 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000110";
    constant ap_const_lv64_7 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000111";
    constant ap_const_lv64_8 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000";
    constant ap_const_lv64_9 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001001";
    constant ap_const_lv64_A : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001010";
    constant ap_const_lv64_B : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001011";
    constant ap_const_lv64_C : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001100";
    constant ap_const_lv64_D : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001101";
    constant ap_const_lv64_E : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001110";
    constant ap_const_lv64_F : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001111";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv17_1FFFF : STD_LOGIC_VECTOR (16 downto 0) := "11111111111111111";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal plaintext_0_data_out : STD_LOGIC_VECTOR (7 downto 0);
    signal plaintext_0_vld_in : STD_LOGIC;
    signal plaintext_0_vld_out : STD_LOGIC;
    signal plaintext_0_ack_in : STD_LOGIC;
    signal plaintext_0_ack_out : STD_LOGIC;
    signal plaintext_0_payload_A : STD_LOGIC_VECTOR (7 downto 0);
    signal plaintext_0_payload_B : STD_LOGIC_VECTOR (7 downto 0);
    signal plaintext_0_sel_rd : STD_LOGIC := '0';
    signal plaintext_0_sel_wr : STD_LOGIC := '0';
    signal plaintext_0_sel : STD_LOGIC;
    signal plaintext_0_load_A : STD_LOGIC;
    signal plaintext_0_load_B : STD_LOGIC;
    signal plaintext_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal plaintext_0_state_cmp_full : STD_LOGIC;
    signal expandedKey_0_data_out : STD_LOGIC_VECTOR (7 downto 0);
    signal expandedKey_0_vld_in : STD_LOGIC;
    signal expandedKey_0_vld_out : STD_LOGIC;
    signal expandedKey_0_ack_in : STD_LOGIC;
    signal expandedKey_0_ack_out : STD_LOGIC;
    signal expandedKey_0_payload_A : STD_LOGIC_VECTOR (7 downto 0);
    signal expandedKey_0_payload_B : STD_LOGIC_VECTOR (7 downto 0);
    signal expandedKey_0_sel_rd : STD_LOGIC := '0';
    signal expandedKey_0_sel_wr : STD_LOGIC := '0';
    signal expandedKey_0_sel : STD_LOGIC;
    signal expandedKey_0_load_A : STD_LOGIC;
    signal expandedKey_0_load_B : STD_LOGIC;
    signal expandedKey_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal expandedKey_0_state_cmp_full : STD_LOGIC;
    signal ciphertext_1_data_out : STD_LOGIC_VECTOR (7 downto 0);
    signal ciphertext_1_vld_in : STD_LOGIC;
    signal ciphertext_1_vld_out : STD_LOGIC;
    signal ciphertext_1_ack_in : STD_LOGIC;
    signal ciphertext_1_ack_out : STD_LOGIC;
    signal ciphertext_1_payload_A : STD_LOGIC_VECTOR (7 downto 0);
    signal ciphertext_1_payload_B : STD_LOGIC_VECTOR (7 downto 0);
    signal ciphertext_1_sel_rd : STD_LOGIC := '0';
    signal ciphertext_1_sel_wr : STD_LOGIC := '0';
    signal ciphertext_1_sel : STD_LOGIC;
    signal ciphertext_1_load_A : STD_LOGIC;
    signal ciphertext_1_load_B : STD_LOGIC;
    signal ciphertext_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal ciphertext_1_state_cmp_full : STD_LOGIC;
    signal plaintext_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal tmp_reg_391 : STD_LOGIC_VECTOR (0 downto 0);
    signal ciphertext_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal i_reg_272 : STD_LOGIC_VECTOR (4 downto 0);
    signal state_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_fu_339_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal i_3_fu_345_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_3_reg_395 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal tmp_s_fu_359_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_s_reg_400 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal grp_AddRoundKey_fu_295_ap_done : STD_LOGIC;
    signal i_4_fu_370_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_4_reg_408 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal tmp_19_fu_380_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_19_reg_413 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_fu_365_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal state_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal state_ce0 : STD_LOGIC;
    signal state_we0 : STD_LOGIC;
    signal state_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal state_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal state_ce1 : STD_LOGIC;
    signal state_we1 : STD_LOGIC;
    signal state_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal state_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_AddRoundKey_fu_295_ap_start : STD_LOGIC;
    signal grp_AddRoundKey_fu_295_ap_idle : STD_LOGIC;
    signal grp_AddRoundKey_fu_295_ap_ready : STD_LOGIC;
    signal grp_AddRoundKey_fu_295_state_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_AddRoundKey_fu_295_state_ce0 : STD_LOGIC;
    signal grp_AddRoundKey_fu_295_state_we0 : STD_LOGIC;
    signal grp_AddRoundKey_fu_295_state_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_AddRoundKey_fu_295_state_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_AddRoundKey_fu_295_state_ce1 : STD_LOGIC;
    signal grp_AddRoundKey_fu_295_state_we1 : STD_LOGIC;
    signal grp_AddRoundKey_fu_295_state_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_AddRoundKey_fu_295_roundKey_TVALID : STD_LOGIC;
    signal grp_AddRoundKey_fu_295_roundKey_TREADY : STD_LOGIC;
    signal grp_MixColumns_fu_315_ap_start : STD_LOGIC;
    signal grp_MixColumns_fu_315_ap_done : STD_LOGIC;
    signal grp_MixColumns_fu_315_ap_idle : STD_LOGIC;
    signal grp_MixColumns_fu_315_ap_ready : STD_LOGIC;
    signal grp_MixColumns_fu_315_state_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_MixColumns_fu_315_state_ce0 : STD_LOGIC;
    signal grp_MixColumns_fu_315_state_we0 : STD_LOGIC;
    signal grp_MixColumns_fu_315_state_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_MixColumns_fu_315_state_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_MixColumns_fu_315_state_ce1 : STD_LOGIC;
    signal grp_SubBytes_fu_322_ap_start : STD_LOGIC;
    signal grp_SubBytes_fu_322_ap_done : STD_LOGIC;
    signal grp_SubBytes_fu_322_ap_idle : STD_LOGIC;
    signal grp_SubBytes_fu_322_ap_ready : STD_LOGIC;
    signal grp_SubBytes_fu_322_state_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_SubBytes_fu_322_state_ce0 : STD_LOGIC;
    signal grp_SubBytes_fu_322_state_we0 : STD_LOGIC;
    signal grp_SubBytes_fu_322_state_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_SubBytes_fu_322_state_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_SubBytes_fu_322_state_ce1 : STD_LOGIC;
    signal grp_SubBytes_fu_322_state_we1 : STD_LOGIC;
    signal grp_SubBytes_fu_322_state_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_ShiftRows_fu_329_ap_start : STD_LOGIC;
    signal grp_ShiftRows_fu_329_ap_done : STD_LOGIC;
    signal grp_ShiftRows_fu_329_ap_idle : STD_LOGIC;
    signal grp_ShiftRows_fu_329_ap_ready : STD_LOGIC;
    signal grp_ShiftRows_fu_329_state_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_ShiftRows_fu_329_state_ce0 : STD_LOGIC;
    signal grp_ShiftRows_fu_329_state_we0 : STD_LOGIC;
    signal grp_ShiftRows_fu_329_state_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_ShiftRows_fu_329_state_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_ShiftRows_fu_329_state_ce1 : STD_LOGIC;
    signal ap_phi_mux_i_phi_fu_276_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal i1_reg_284 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_reg_grp_AddRoundKey_fu_295_ap_start : STD_LOGIC := '0';
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_reg_grp_MixColumns_fu_315_ap_start : STD_LOGIC := '0';
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_reg_grp_SubBytes_fu_322_ap_start : STD_LOGIC := '0';
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_reg_grp_ShiftRows_fu_329_ap_start : STD_LOGIC := '0';
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal tmp_18_fu_351_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_cast_fu_356_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_67_cast_fu_376_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (28 downto 0);
    signal ap_block_state11_on_subcall_done : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component AddRoundKey IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        state_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        state_ce0 : OUT STD_LOGIC;
        state_we0 : OUT STD_LOGIC;
        state_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        state_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        state_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        state_ce1 : OUT STD_LOGIC;
        state_we1 : OUT STD_LOGIC;
        state_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        state_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
        roundKey_TDATA : IN STD_LOGIC_VECTOR (7 downto 0);
        roundKey_TVALID : IN STD_LOGIC;
        roundKey_TREADY : OUT STD_LOGIC );
    end component;


    component MixColumns IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        state_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        state_ce0 : OUT STD_LOGIC;
        state_we0 : OUT STD_LOGIC;
        state_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        state_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        state_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        state_ce1 : OUT STD_LOGIC;
        state_q1 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component SubBytes IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        state_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        state_ce0 : OUT STD_LOGIC;
        state_we0 : OUT STD_LOGIC;
        state_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        state_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        state_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        state_ce1 : OUT STD_LOGIC;
        state_we1 : OUT STD_LOGIC;
        state_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        state_q1 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component ShiftRows IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        state_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        state_ce0 : OUT STD_LOGIC;
        state_we0 : OUT STD_LOGIC;
        state_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        state_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        state_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        state_ce1 : OUT STD_LOGIC;
        state_q1 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component AES_Encrypt_state IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (7 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    state_U : component AES_Encrypt_state
    generic map (
        DataWidth => 8,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => state_address0,
        ce0 => state_ce0,
        we0 => state_we0,
        d0 => state_d0,
        q0 => state_q0,
        address1 => state_address1,
        ce1 => state_ce1,
        we1 => state_we1,
        d1 => state_d1,
        q1 => state_q1);

    grp_AddRoundKey_fu_295 : component AddRoundKey
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_AddRoundKey_fu_295_ap_start,
        ap_done => grp_AddRoundKey_fu_295_ap_done,
        ap_idle => grp_AddRoundKey_fu_295_ap_idle,
        ap_ready => grp_AddRoundKey_fu_295_ap_ready,
        state_address0 => grp_AddRoundKey_fu_295_state_address0,
        state_ce0 => grp_AddRoundKey_fu_295_state_ce0,
        state_we0 => grp_AddRoundKey_fu_295_state_we0,
        state_d0 => grp_AddRoundKey_fu_295_state_d0,
        state_q0 => state_q0,
        state_address1 => grp_AddRoundKey_fu_295_state_address1,
        state_ce1 => grp_AddRoundKey_fu_295_state_ce1,
        state_we1 => grp_AddRoundKey_fu_295_state_we1,
        state_d1 => grp_AddRoundKey_fu_295_state_d1,
        state_q1 => state_q1,
        roundKey_TDATA => expandedKey_0_data_out,
        roundKey_TVALID => grp_AddRoundKey_fu_295_roundKey_TVALID,
        roundKey_TREADY => grp_AddRoundKey_fu_295_roundKey_TREADY);

    grp_MixColumns_fu_315 : component MixColumns
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_MixColumns_fu_315_ap_start,
        ap_done => grp_MixColumns_fu_315_ap_done,
        ap_idle => grp_MixColumns_fu_315_ap_idle,
        ap_ready => grp_MixColumns_fu_315_ap_ready,
        state_address0 => grp_MixColumns_fu_315_state_address0,
        state_ce0 => grp_MixColumns_fu_315_state_ce0,
        state_we0 => grp_MixColumns_fu_315_state_we0,
        state_d0 => grp_MixColumns_fu_315_state_d0,
        state_q0 => state_q0,
        state_address1 => grp_MixColumns_fu_315_state_address1,
        state_ce1 => grp_MixColumns_fu_315_state_ce1,
        state_q1 => state_q1);

    grp_SubBytes_fu_322 : component SubBytes
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_SubBytes_fu_322_ap_start,
        ap_done => grp_SubBytes_fu_322_ap_done,
        ap_idle => grp_SubBytes_fu_322_ap_idle,
        ap_ready => grp_SubBytes_fu_322_ap_ready,
        state_address0 => grp_SubBytes_fu_322_state_address0,
        state_ce0 => grp_SubBytes_fu_322_state_ce0,
        state_we0 => grp_SubBytes_fu_322_state_we0,
        state_d0 => grp_SubBytes_fu_322_state_d0,
        state_q0 => state_q0,
        state_address1 => grp_SubBytes_fu_322_state_address1,
        state_ce1 => grp_SubBytes_fu_322_state_ce1,
        state_we1 => grp_SubBytes_fu_322_state_we1,
        state_d1 => grp_SubBytes_fu_322_state_d1,
        state_q1 => state_q1);

    grp_ShiftRows_fu_329 : component ShiftRows
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_ShiftRows_fu_329_ap_start,
        ap_done => grp_ShiftRows_fu_329_ap_done,
        ap_idle => grp_ShiftRows_fu_329_ap_idle,
        ap_ready => grp_ShiftRows_fu_329_ap_ready,
        state_address0 => grp_ShiftRows_fu_329_state_address0,
        state_ce0 => grp_ShiftRows_fu_329_state_ce0,
        state_we0 => grp_ShiftRows_fu_329_state_we0,
        state_d0 => grp_ShiftRows_fu_329_state_d0,
        state_q0 => state_q0,
        state_address1 => grp_ShiftRows_fu_329_state_address1,
        state_ce1 => grp_ShiftRows_fu_329_state_ce1,
        state_q1 => state_q1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_grp_AddRoundKey_fu_295_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_grp_AddRoundKey_fu_295_ap_start <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                    ap_reg_grp_AddRoundKey_fu_295_ap_start <= ap_const_logic_1;
                elsif ((grp_AddRoundKey_fu_295_ap_ready = ap_const_logic_1)) then 
                    ap_reg_grp_AddRoundKey_fu_295_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_grp_MixColumns_fu_315_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_grp_MixColumns_fu_315_ap_start <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                    ap_reg_grp_MixColumns_fu_315_ap_start <= ap_const_logic_1;
                elsif ((grp_MixColumns_fu_315_ap_ready = ap_const_logic_1)) then 
                    ap_reg_grp_MixColumns_fu_315_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_grp_ShiftRows_fu_329_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_grp_ShiftRows_fu_329_ap_start <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                    ap_reg_grp_ShiftRows_fu_329_ap_start <= ap_const_logic_1;
                elsif ((grp_ShiftRows_fu_329_ap_ready = ap_const_logic_1)) then 
                    ap_reg_grp_ShiftRows_fu_329_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_grp_SubBytes_fu_322_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_grp_SubBytes_fu_322_ap_start <= ap_const_logic_0;
            else
                if (((exitcond_fu_365_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                    ap_reg_grp_SubBytes_fu_322_ap_start <= ap_const_logic_1;
                elsif ((grp_SubBytes_fu_322_ap_ready = ap_const_logic_1)) then 
                    ap_reg_grp_SubBytes_fu_322_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ciphertext_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ciphertext_1_sel_rd <= ap_const_logic_0;
            else
                if (((ciphertext_1_ack_out = ap_const_logic_1) and (ciphertext_1_vld_out = ap_const_logic_1))) then 
                                        ciphertext_1_sel_rd <= not(ciphertext_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    ciphertext_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ciphertext_1_sel_wr <= ap_const_logic_0;
            else
                if (((ciphertext_1_ack_in = ap_const_logic_1) and (ciphertext_1_vld_in = ap_const_logic_1))) then 
                                        ciphertext_1_sel_wr <= not(ciphertext_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    ciphertext_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ciphertext_1_state <= ap_const_lv2_0;
            else
                if ((((ciphertext_1_state = ap_const_lv2_2) and (ciphertext_1_vld_in = ap_const_logic_0)) or ((ciphertext_1_state = ap_const_lv2_3) and (ciphertext_1_vld_in = ap_const_logic_0) and (ciphertext_1_ack_out = ap_const_logic_1)))) then 
                    ciphertext_1_state <= ap_const_lv2_2;
                elsif ((((ciphertext_1_state = ap_const_lv2_1) and (ciphertext_1_ack_out = ap_const_logic_0)) or ((ciphertext_1_state = ap_const_lv2_3) and (ciphertext_1_ack_out = ap_const_logic_0) and (ciphertext_1_vld_in = ap_const_logic_1)))) then 
                    ciphertext_1_state <= ap_const_lv2_1;
                elsif (((not(((ciphertext_1_vld_in = ap_const_logic_0) and (ciphertext_1_ack_out = ap_const_logic_1))) and not(((ciphertext_1_ack_out = ap_const_logic_0) and (ciphertext_1_vld_in = ap_const_logic_1))) and (ciphertext_1_state = ap_const_lv2_3)) or ((ciphertext_1_state = ap_const_lv2_1) and (ciphertext_1_ack_out = ap_const_logic_1)) or ((ciphertext_1_state = ap_const_lv2_2) and (ciphertext_1_vld_in = ap_const_logic_1)))) then 
                    ciphertext_1_state <= ap_const_lv2_3;
                else 
                    ciphertext_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    expandedKey_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                expandedKey_0_sel_rd <= ap_const_logic_0;
            else
                if (((expandedKey_0_ack_out = ap_const_logic_1) and (expandedKey_0_vld_out = ap_const_logic_1))) then 
                                        expandedKey_0_sel_rd <= not(expandedKey_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    expandedKey_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                expandedKey_0_sel_wr <= ap_const_logic_0;
            else
                if (((expandedKey_0_ack_in = ap_const_logic_1) and (expandedKey_0_vld_in = ap_const_logic_1))) then 
                                        expandedKey_0_sel_wr <= not(expandedKey_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    expandedKey_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                expandedKey_0_state <= ap_const_lv2_0;
            else
                if ((((expandedKey_0_state = ap_const_lv2_2) and (expandedKey_0_vld_in = ap_const_logic_0)) or ((expandedKey_0_state = ap_const_lv2_3) and (expandedKey_0_vld_in = ap_const_logic_0) and (expandedKey_0_ack_out = ap_const_logic_1)))) then 
                    expandedKey_0_state <= ap_const_lv2_2;
                elsif ((((expandedKey_0_state = ap_const_lv2_1) and (expandedKey_0_ack_out = ap_const_logic_0)) or ((expandedKey_0_state = ap_const_lv2_3) and (expandedKey_0_ack_out = ap_const_logic_0) and (expandedKey_0_vld_in = ap_const_logic_1)))) then 
                    expandedKey_0_state <= ap_const_lv2_1;
                elsif (((not(((expandedKey_0_vld_in = ap_const_logic_0) and (expandedKey_0_ack_out = ap_const_logic_1))) and not(((expandedKey_0_ack_out = ap_const_logic_0) and (expandedKey_0_vld_in = ap_const_logic_1))) and (expandedKey_0_state = ap_const_lv2_3)) or ((expandedKey_0_state = ap_const_lv2_1) and (expandedKey_0_ack_out = ap_const_logic_1)) or ((expandedKey_0_state = ap_const_lv2_2) and (expandedKey_0_vld_in = ap_const_logic_1)))) then 
                    expandedKey_0_state <= ap_const_lv2_3;
                else 
                    expandedKey_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    plaintext_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                plaintext_0_sel_rd <= ap_const_logic_0;
            else
                if (((plaintext_0_ack_out = ap_const_logic_1) and (plaintext_0_vld_out = ap_const_logic_1))) then 
                                        plaintext_0_sel_rd <= not(plaintext_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    plaintext_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                plaintext_0_sel_wr <= ap_const_logic_0;
            else
                if (((plaintext_0_ack_in = ap_const_logic_1) and (plaintext_0_vld_in = ap_const_logic_1))) then 
                                        plaintext_0_sel_wr <= not(plaintext_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    plaintext_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                plaintext_0_state <= ap_const_lv2_0;
            else
                if ((((plaintext_0_state = ap_const_lv2_2) and (plaintext_0_vld_in = ap_const_logic_0)) or ((plaintext_0_state = ap_const_lv2_3) and (plaintext_0_vld_in = ap_const_logic_0) and (plaintext_0_ack_out = ap_const_logic_1)))) then 
                    plaintext_0_state <= ap_const_lv2_2;
                elsif ((((plaintext_0_state = ap_const_lv2_1) and (plaintext_0_ack_out = ap_const_logic_0)) or ((plaintext_0_state = ap_const_lv2_3) and (plaintext_0_ack_out = ap_const_logic_0) and (plaintext_0_vld_in = ap_const_logic_1)))) then 
                    plaintext_0_state <= ap_const_lv2_1;
                elsif (((not(((plaintext_0_vld_in = ap_const_logic_0) and (plaintext_0_ack_out = ap_const_logic_1))) and not(((plaintext_0_ack_out = ap_const_logic_0) and (plaintext_0_vld_in = ap_const_logic_1))) and (plaintext_0_state = ap_const_lv2_3)) or ((plaintext_0_state = ap_const_lv2_1) and (plaintext_0_ack_out = ap_const_logic_1)) or ((plaintext_0_state = ap_const_lv2_2) and (plaintext_0_vld_in = ap_const_logic_1)))) then 
                    plaintext_0_state <= ap_const_lv2_3;
                else 
                    plaintext_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    i1_reg_284_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((grp_AddRoundKey_fu_295_ap_done = ap_const_logic_1)) then
                if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                    i1_reg_284 <= i_4_reg_408;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                    i1_reg_284 <= ap_const_lv16_0;
                end if;
            end if; 
        end if;
    end process;

    i_reg_272_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_reg_391 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                i_reg_272 <= i_3_reg_395;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_reg_272 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ciphertext_1_load_A = ap_const_logic_1)) then
                ciphertext_1_payload_A <= state_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ciphertext_1_load_B = ap_const_logic_1)) then
                ciphertext_1_payload_B <= state_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((expandedKey_0_load_A = ap_const_logic_1)) then
                expandedKey_0_payload_A <= expandedKey_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((expandedKey_0_load_B = ap_const_logic_1)) then
                expandedKey_0_payload_B <= expandedKey_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                i_3_reg_395 <= i_3_fu_345_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                i_4_reg_408 <= i_4_fu_370_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((plaintext_0_load_A = ap_const_logic_1)) then
                plaintext_0_payload_A <= plaintext_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((plaintext_0_load_B = ap_const_logic_1)) then
                plaintext_0_payload_B <= plaintext_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_365_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                tmp_19_reg_413 <= tmp_19_fu_380_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                tmp_reg_391 <= tmp_fu_339_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_AddRoundKey_fu_295_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                tmp_s_reg_400 <= tmp_s_fu_359_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ciphertext_1_ack_in, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, tmp_fu_339_p2, ap_enable_reg_pp0_iter0, ap_CS_fsm_state5, grp_AddRoundKey_fu_295_ap_done, ap_CS_fsm_state6, tmp_19_reg_413, exitcond_fu_365_p2, ap_block_pp0_stage0_subdone, grp_SubBytes_fu_322_ap_done, grp_ShiftRows_fu_329_ap_done, ap_CS_fsm_state13, ap_CS_fsm_state11, ap_CS_fsm_state7, ap_CS_fsm_state9, ap_block_state11_on_subcall_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((tmp_fu_339_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((tmp_fu_339_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                if (((grp_AddRoundKey_fu_295_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                if (((exitcond_fu_365_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                if (((grp_SubBytes_fu_322_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                if (((tmp_19_reg_413 = ap_const_lv1_1) and (grp_ShiftRows_fu_329_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                elsif (((tmp_19_reg_413 = ap_const_lv1_0) and (grp_ShiftRows_fu_329_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                if (((ap_const_boolean_0 = ap_block_state11_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                if (((grp_AddRoundKey_fu_295_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state14 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state14) and (ciphertext_1_ack_in = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state15 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state15) and (ciphertext_1_ack_in = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state16 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state16) and (ciphertext_1_ack_in = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_state17 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state17) and (ciphertext_1_ack_in = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                else
                    ap_NS_fsm <= ap_ST_fsm_state17;
                end if;
            when ap_ST_fsm_state18 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state18) and (ciphertext_1_ack_in = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                else
                    ap_NS_fsm <= ap_ST_fsm_state18;
                end if;
            when ap_ST_fsm_state19 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state19) and (ciphertext_1_ack_in = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state20;
                else
                    ap_NS_fsm <= ap_ST_fsm_state19;
                end if;
            when ap_ST_fsm_state20 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state20) and (ciphertext_1_ack_in = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state21;
                else
                    ap_NS_fsm <= ap_ST_fsm_state20;
                end if;
            when ap_ST_fsm_state21 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state21) and (ciphertext_1_ack_in = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state22;
                else
                    ap_NS_fsm <= ap_ST_fsm_state21;
                end if;
            when ap_ST_fsm_state22 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state22) and (ciphertext_1_ack_in = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state23;
                else
                    ap_NS_fsm <= ap_ST_fsm_state22;
                end if;
            when ap_ST_fsm_state23 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state23) and (ciphertext_1_ack_in = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state24;
                else
                    ap_NS_fsm <= ap_ST_fsm_state23;
                end if;
            when ap_ST_fsm_state24 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state24) and (ciphertext_1_ack_in = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state25;
                else
                    ap_NS_fsm <= ap_ST_fsm_state24;
                end if;
            when ap_ST_fsm_state25 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state25) and (ciphertext_1_ack_in = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state26;
                else
                    ap_NS_fsm <= ap_ST_fsm_state25;
                end if;
            when ap_ST_fsm_state26 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state26) and (ciphertext_1_ack_in = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state27;
                else
                    ap_NS_fsm <= ap_ST_fsm_state26;
                end if;
            when ap_ST_fsm_state27 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state27) and (ciphertext_1_ack_in = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state28;
                else
                    ap_NS_fsm <= ap_ST_fsm_state27;
                end if;
            when ap_ST_fsm_state28 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state28) and (ciphertext_1_ack_in = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state29;
                else
                    ap_NS_fsm <= ap_ST_fsm_state28;
                end if;
            when ap_ST_fsm_state29 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state29) and (ciphertext_1_ack_in = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state30;
                else
                    ap_NS_fsm <= ap_ST_fsm_state29;
                end if;
            when ap_ST_fsm_state30 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state30) and (ciphertext_1_ack_in = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state30;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(8);
    ap_CS_fsm_state11 <= ap_CS_fsm(9);
    ap_CS_fsm_state12 <= ap_CS_fsm(10);
    ap_CS_fsm_state13 <= ap_CS_fsm(11);
    ap_CS_fsm_state14 <= ap_CS_fsm(12);
    ap_CS_fsm_state15 <= ap_CS_fsm(13);
    ap_CS_fsm_state16 <= ap_CS_fsm(14);
    ap_CS_fsm_state17 <= ap_CS_fsm(15);
    ap_CS_fsm_state18 <= ap_CS_fsm(16);
    ap_CS_fsm_state19 <= ap_CS_fsm(17);
    ap_CS_fsm_state20 <= ap_CS_fsm(18);
    ap_CS_fsm_state21 <= ap_CS_fsm(19);
    ap_CS_fsm_state22 <= ap_CS_fsm(20);
    ap_CS_fsm_state23 <= ap_CS_fsm(21);
    ap_CS_fsm_state24 <= ap_CS_fsm(22);
    ap_CS_fsm_state25 <= ap_CS_fsm(23);
    ap_CS_fsm_state26 <= ap_CS_fsm(24);
    ap_CS_fsm_state27 <= ap_CS_fsm(25);
    ap_CS_fsm_state28 <= ap_CS_fsm(26);
    ap_CS_fsm_state29 <= ap_CS_fsm(27);
    ap_CS_fsm_state30 <= ap_CS_fsm(28);
    ap_CS_fsm_state4 <= ap_CS_fsm(2);
    ap_CS_fsm_state5 <= ap_CS_fsm(3);
    ap_CS_fsm_state6 <= ap_CS_fsm(4);
    ap_CS_fsm_state7 <= ap_CS_fsm(5);
    ap_CS_fsm_state8 <= ap_CS_fsm(6);
    ap_CS_fsm_state9 <= ap_CS_fsm(7);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(plaintext_0_vld_out, ap_enable_reg_pp0_iter1, tmp_reg_391)
    begin
                ap_block_pp0_stage0_11001 <= ((tmp_reg_391 = ap_const_lv1_0) and (plaintext_0_vld_out = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(plaintext_0_vld_out, ap_enable_reg_pp0_iter1, tmp_reg_391)
    begin
                ap_block_pp0_stage0_subdone <= ((tmp_reg_391 = ap_const_lv1_0) and (plaintext_0_vld_out = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_state11_on_subcall_done_assign_proc : process(tmp_19_reg_413, grp_MixColumns_fu_315_ap_done)
    begin
                ap_block_state11_on_subcall_done <= ((tmp_19_reg_413 = ap_const_lv1_0) and (grp_MixColumns_fu_315_ap_done = ap_const_logic_0));
    end process;

        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_pp0_stage0_iter1_assign_proc : process(plaintext_0_vld_out, tmp_reg_391)
    begin
                ap_block_state3_pp0_stage0_iter1 <= ((tmp_reg_391 = ap_const_lv1_0) and (plaintext_0_vld_out = ap_const_logic_0));
    end process;


    ap_condition_pp0_exit_iter0_state2_assign_proc : process(tmp_fu_339_p2)
    begin
        if ((tmp_fu_339_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ciphertext_1_ack_in, ap_CS_fsm_state30)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state30) and (ciphertext_1_ack_in = ap_const_logic_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_i_phi_fu_276_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, tmp_reg_391, i_reg_272, i_3_reg_395)
    begin
        if (((tmp_reg_391 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_i_phi_fu_276_p4 <= i_3_reg_395;
        else 
            ap_phi_mux_i_phi_fu_276_p4 <= i_reg_272;
        end if; 
    end process;


    ap_ready_assign_proc : process(ciphertext_1_ack_in, ap_CS_fsm_state30)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state30) and (ciphertext_1_ack_in = ap_const_logic_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    ciphertext_1_ack_in <= ciphertext_1_state(1);
    ciphertext_1_ack_out <= ciphertext_TREADY;

    ciphertext_1_data_out_assign_proc : process(ciphertext_1_payload_A, ciphertext_1_payload_B, ciphertext_1_sel)
    begin
        if ((ciphertext_1_sel = ap_const_logic_1)) then 
            ciphertext_1_data_out <= ciphertext_1_payload_B;
        else 
            ciphertext_1_data_out <= ciphertext_1_payload_A;
        end if; 
    end process;

    ciphertext_1_load_A <= (not(ciphertext_1_sel_wr) and ciphertext_1_state_cmp_full);
    ciphertext_1_load_B <= (ciphertext_1_state_cmp_full and ciphertext_1_sel_wr);
    ciphertext_1_sel <= ciphertext_1_sel_rd;
    ciphertext_1_state_cmp_full <= '0' when (ciphertext_1_state = ap_const_lv2_1) else '1';

    ciphertext_1_vld_in_assign_proc : process(ciphertext_1_ack_in, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state29) and (ciphertext_1_ack_in = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state28) and (ciphertext_1_ack_in = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state27) and (ciphertext_1_ack_in = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state26) and (ciphertext_1_ack_in = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state25) and (ciphertext_1_ack_in = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state24) and (ciphertext_1_ack_in = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state23) and (ciphertext_1_ack_in = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state22) and (ciphertext_1_ack_in = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state21) and (ciphertext_1_ack_in = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state20) and (ciphertext_1_ack_in = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state19) and (ciphertext_1_ack_in = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state18) and (ciphertext_1_ack_in = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state17) and (ciphertext_1_ack_in = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state16) and (ciphertext_1_ack_in = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state15) and (ciphertext_1_ack_in = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state14) and (ciphertext_1_ack_in = ap_const_logic_1)))) then 
            ciphertext_1_vld_in <= ap_const_logic_1;
        else 
            ciphertext_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    ciphertext_1_vld_out <= ciphertext_1_state(0);
    ciphertext_TDATA <= ciphertext_1_data_out;

    ciphertext_TDATA_blk_n_assign_proc : process(ciphertext_1_state, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            ciphertext_TDATA_blk_n <= ciphertext_1_state(1);
        else 
            ciphertext_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    ciphertext_TVALID <= ciphertext_1_state(0);
    exitcond_fu_365_p2 <= "1" when (i1_reg_284 = Nr) else "0";
    expandedKey_0_ack_in <= expandedKey_0_state(1);
    expandedKey_0_ack_out <= grp_AddRoundKey_fu_295_roundKey_TREADY;

    expandedKey_0_data_out_assign_proc : process(expandedKey_0_payload_A, expandedKey_0_payload_B, expandedKey_0_sel)
    begin
        if ((expandedKey_0_sel = ap_const_logic_1)) then 
            expandedKey_0_data_out <= expandedKey_0_payload_B;
        else 
            expandedKey_0_data_out <= expandedKey_0_payload_A;
        end if; 
    end process;

    expandedKey_0_load_A <= (not(expandedKey_0_sel_wr) and expandedKey_0_state_cmp_full);
    expandedKey_0_load_B <= (expandedKey_0_state_cmp_full and expandedKey_0_sel_wr);
    expandedKey_0_sel <= expandedKey_0_sel_rd;
    expandedKey_0_state_cmp_full <= '0' when (expandedKey_0_state = ap_const_lv2_1) else '1';
    expandedKey_0_vld_in <= expandedKey_TVALID;
    expandedKey_0_vld_out <= expandedKey_0_state(0);
    expandedKey_TREADY <= expandedKey_0_state(1);
    grp_AddRoundKey_fu_295_ap_start <= ap_reg_grp_AddRoundKey_fu_295_ap_start;
    grp_AddRoundKey_fu_295_roundKey_TVALID <= expandedKey_0_state(0);
    grp_MixColumns_fu_315_ap_start <= ap_reg_grp_MixColumns_fu_315_ap_start;
    grp_ShiftRows_fu_329_ap_start <= ap_reg_grp_ShiftRows_fu_329_ap_start;
    grp_SubBytes_fu_322_ap_start <= ap_reg_grp_SubBytes_fu_322_ap_start;
    i_3_fu_345_p2 <= std_logic_vector(unsigned(ap_phi_mux_i_phi_fu_276_p4) + unsigned(ap_const_lv5_1));
    i_4_fu_370_p2 <= std_logic_vector(unsigned(i1_reg_284) + unsigned(ap_const_lv16_1));
    plaintext_0_ack_in <= plaintext_0_state(1);

    plaintext_0_ack_out_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, tmp_reg_391, ap_block_pp0_stage0_11001)
    begin
        if (((tmp_reg_391 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            plaintext_0_ack_out <= ap_const_logic_1;
        else 
            plaintext_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    plaintext_0_data_out_assign_proc : process(plaintext_0_payload_A, plaintext_0_payload_B, plaintext_0_sel)
    begin
        if ((plaintext_0_sel = ap_const_logic_1)) then 
            plaintext_0_data_out <= plaintext_0_payload_B;
        else 
            plaintext_0_data_out <= plaintext_0_payload_A;
        end if; 
    end process;

    plaintext_0_load_A <= (plaintext_0_state_cmp_full and not(plaintext_0_sel_wr));
    plaintext_0_load_B <= (plaintext_0_state_cmp_full and plaintext_0_sel_wr);
    plaintext_0_sel <= plaintext_0_sel_rd;
    plaintext_0_state_cmp_full <= '0' when (plaintext_0_state = ap_const_lv2_1) else '1';
    plaintext_0_vld_in <= plaintext_TVALID;
    plaintext_0_vld_out <= plaintext_0_state(0);

    plaintext_TDATA_blk_n_assign_proc : process(plaintext_0_state, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, tmp_reg_391)
    begin
        if (((tmp_reg_391 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            plaintext_TDATA_blk_n <= plaintext_0_state(0);
        else 
            plaintext_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    plaintext_TREADY <= plaintext_0_state(1);

    state_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state5, ap_CS_fsm_state6, tmp_19_reg_413, exitcond_fu_365_p2, grp_AddRoundKey_fu_295_state_address0, grp_MixColumns_fu_315_state_address0, grp_SubBytes_fu_322_state_address0, grp_ShiftRows_fu_329_state_address0, ap_CS_fsm_state13, ap_CS_fsm_state11, ap_CS_fsm_state7, ap_CS_fsm_state9, tmp_18_fu_351_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            state_address0 <= ap_const_lv64_F(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            state_address0 <= ap_const_lv64_E(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            state_address0 <= ap_const_lv64_D(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            state_address0 <= ap_const_lv64_C(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            state_address0 <= ap_const_lv64_B(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            state_address0 <= ap_const_lv64_A(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            state_address0 <= ap_const_lv64_9(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            state_address0 <= ap_const_lv64_8(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            state_address0 <= ap_const_lv64_7(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            state_address0 <= ap_const_lv64_6(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            state_address0 <= ap_const_lv64_5(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            state_address0 <= ap_const_lv64_4(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            state_address0 <= ap_const_lv64_3(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            state_address0 <= ap_const_lv64_2(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            state_address0 <= ap_const_lv64_1(4 - 1 downto 0);
        elsif (((exitcond_fu_365_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            state_address0 <= ap_const_lv64_0(4 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            state_address0 <= tmp_18_fu_351_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            state_address0 <= grp_ShiftRows_fu_329_state_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            state_address0 <= grp_SubBytes_fu_322_state_address0;
        elsif (((tmp_19_reg_413 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            state_address0 <= grp_MixColumns_fu_315_state_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            state_address0 <= grp_AddRoundKey_fu_295_state_address0;
        else 
            state_address0 <= "XXXX";
        end if; 
    end process;


    state_address1_assign_proc : process(ap_CS_fsm_state5, tmp_19_reg_413, grp_AddRoundKey_fu_295_state_address1, grp_MixColumns_fu_315_state_address1, grp_SubBytes_fu_322_state_address1, grp_ShiftRows_fu_329_state_address1, ap_CS_fsm_state13, ap_CS_fsm_state11, ap_CS_fsm_state7, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            state_address1 <= grp_ShiftRows_fu_329_state_address1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            state_address1 <= grp_SubBytes_fu_322_state_address1;
        elsif (((tmp_19_reg_413 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            state_address1 <= grp_MixColumns_fu_315_state_address1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            state_address1 <= grp_AddRoundKey_fu_295_state_address1;
        else 
            state_address1 <= "XXXX";
        end if; 
    end process;


    state_ce0_assign_proc : process(ciphertext_1_ack_in, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_block_pp0_stage0_11001, ap_CS_fsm_state5, ap_CS_fsm_state6, tmp_19_reg_413, exitcond_fu_365_p2, grp_AddRoundKey_fu_295_state_ce0, grp_MixColumns_fu_315_state_ce0, grp_SubBytes_fu_322_state_ce0, grp_ShiftRows_fu_329_state_ce0, ap_CS_fsm_state13, ap_CS_fsm_state11, ap_CS_fsm_state7, ap_CS_fsm_state9)
    begin
        if ((((exitcond_fu_365_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6)) or ((ap_const_logic_1 = ap_CS_fsm_state28) and (ciphertext_1_ack_in = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state27) and (ciphertext_1_ack_in = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state26) and (ciphertext_1_ack_in = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state25) and (ciphertext_1_ack_in = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state24) and (ciphertext_1_ack_in = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state23) and (ciphertext_1_ack_in = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state22) and (ciphertext_1_ack_in = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state21) and (ciphertext_1_ack_in = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state20) and (ciphertext_1_ack_in = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state19) and (ciphertext_1_ack_in = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state18) and (ciphertext_1_ack_in = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state17) and (ciphertext_1_ack_in = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state16) and (ciphertext_1_ack_in = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state15) and (ciphertext_1_ack_in = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state14) and (ciphertext_1_ack_in = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            state_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            state_ce0 <= grp_ShiftRows_fu_329_state_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            state_ce0 <= grp_SubBytes_fu_322_state_ce0;
        elsif (((tmp_19_reg_413 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            state_ce0 <= grp_MixColumns_fu_315_state_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            state_ce0 <= grp_AddRoundKey_fu_295_state_ce0;
        else 
            state_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    state_ce1_assign_proc : process(ap_CS_fsm_state5, tmp_19_reg_413, grp_AddRoundKey_fu_295_state_ce1, grp_MixColumns_fu_315_state_ce1, grp_SubBytes_fu_322_state_ce1, grp_ShiftRows_fu_329_state_ce1, ap_CS_fsm_state13, ap_CS_fsm_state11, ap_CS_fsm_state7, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            state_ce1 <= grp_ShiftRows_fu_329_state_ce1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            state_ce1 <= grp_SubBytes_fu_322_state_ce1;
        elsif (((tmp_19_reg_413 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            state_ce1 <= grp_MixColumns_fu_315_state_ce1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            state_ce1 <= grp_AddRoundKey_fu_295_state_ce1;
        else 
            state_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    state_d0_assign_proc : process(plaintext_0_data_out, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, ap_CS_fsm_state5, tmp_19_reg_413, grp_AddRoundKey_fu_295_state_d0, grp_MixColumns_fu_315_state_d0, grp_SubBytes_fu_322_state_d0, grp_ShiftRows_fu_329_state_d0, ap_CS_fsm_state13, ap_CS_fsm_state11, ap_CS_fsm_state7, ap_CS_fsm_state9)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            state_d0 <= plaintext_0_data_out;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            state_d0 <= grp_ShiftRows_fu_329_state_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            state_d0 <= grp_SubBytes_fu_322_state_d0;
        elsif (((tmp_19_reg_413 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            state_d0 <= grp_MixColumns_fu_315_state_d0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            state_d0 <= grp_AddRoundKey_fu_295_state_d0;
        else 
            state_d0 <= "XXXXXXXX";
        end if; 
    end process;


    state_d1_assign_proc : process(ap_CS_fsm_state5, grp_AddRoundKey_fu_295_state_d1, grp_SubBytes_fu_322_state_d1, ap_CS_fsm_state13, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            state_d1 <= grp_SubBytes_fu_322_state_d1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            state_d1 <= grp_AddRoundKey_fu_295_state_d1;
        else 
            state_d1 <= "XXXXXXXX";
        end if; 
    end process;


    state_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, tmp_reg_391, ap_block_pp0_stage0_11001, ap_CS_fsm_state5, tmp_19_reg_413, grp_AddRoundKey_fu_295_state_we0, grp_MixColumns_fu_315_state_we0, grp_SubBytes_fu_322_state_we0, grp_ShiftRows_fu_329_state_we0, ap_CS_fsm_state13, ap_CS_fsm_state11, ap_CS_fsm_state7, ap_CS_fsm_state9)
    begin
        if (((tmp_reg_391 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            state_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            state_we0 <= grp_ShiftRows_fu_329_state_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            state_we0 <= grp_SubBytes_fu_322_state_we0;
        elsif (((tmp_19_reg_413 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            state_we0 <= grp_MixColumns_fu_315_state_we0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            state_we0 <= grp_AddRoundKey_fu_295_state_we0;
        else 
            state_we0 <= ap_const_logic_0;
        end if; 
    end process;


    state_we1_assign_proc : process(ap_CS_fsm_state5, grp_AddRoundKey_fu_295_state_we1, grp_SubBytes_fu_322_state_we1, ap_CS_fsm_state13, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            state_we1 <= grp_SubBytes_fu_322_state_we1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            state_we1 <= grp_AddRoundKey_fu_295_state_we1;
        else 
            state_we1 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_18_fu_351_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_272),64));
    tmp_19_fu_380_p2 <= "1" when (tmp_67_cast_fu_376_p1 = tmp_s_reg_400) else "0";
    tmp_67_cast_fu_376_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i1_reg_284),17));
    tmp_cast_fu_356_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Nr),17));
    tmp_fu_339_p2 <= "1" when (ap_phi_mux_i_phi_fu_276_p4 = ap_const_lv5_10) else "0";
    tmp_s_fu_359_p2 <= std_logic_vector(unsigned(tmp_cast_fu_356_p1) + unsigned(ap_const_lv17_1FFFF));
end behav;
