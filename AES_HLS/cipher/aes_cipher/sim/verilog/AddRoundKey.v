// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module AddRoundKey (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        state_address0,
        state_ce0,
        state_we0,
        state_d0,
        state_q0,
        state_address1,
        state_ce1,
        state_we1,
        state_d1,
        state_q1,
        roundKey_TDATA,
        roundKey_TVALID,
        roundKey_TREADY,
        roundKey_TDATA_blk_n,
        ap_ce
);

parameter    ap_ST_fsm_state1 = 16'd1;
parameter    ap_ST_fsm_state2 = 16'd2;
parameter    ap_ST_fsm_state3 = 16'd4;
parameter    ap_ST_fsm_state4 = 16'd8;
parameter    ap_ST_fsm_state5 = 16'd16;
parameter    ap_ST_fsm_state6 = 16'd32;
parameter    ap_ST_fsm_state7 = 16'd64;
parameter    ap_ST_fsm_state8 = 16'd128;
parameter    ap_ST_fsm_state9 = 16'd256;
parameter    ap_ST_fsm_state10 = 16'd512;
parameter    ap_ST_fsm_state11 = 16'd1024;
parameter    ap_ST_fsm_state12 = 16'd2048;
parameter    ap_ST_fsm_state13 = 16'd4096;
parameter    ap_ST_fsm_state14 = 16'd8192;
parameter    ap_ST_fsm_state15 = 16'd16384;
parameter    ap_ST_fsm_state16 = 16'd32768;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] state_address0;
output   state_ce0;
output   state_we0;
output  [7:0] state_d0;
input  [7:0] state_q0;
output  [3:0] state_address1;
output   state_ce1;
output   state_we1;
output  [7:0] state_d1;
input  [7:0] state_q1;
input  [7:0] roundKey_TDATA;
input   roundKey_TVALID;
output   roundKey_TREADY;
output   roundKey_TDATA_blk_n;
input   ap_ce;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[3:0] state_address0;
reg state_ce0;
reg state_we0;
reg[7:0] state_d0;
reg[3:0] state_address1;
reg state_ce1;
reg state_we1;
reg[7:0] state_d1;
reg roundKey_TREADY;
reg roundKey_TDATA_blk_n;

(* fsm_encoding = "none" *) reg   [15:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state16;
reg   [7:0] reg_205;
reg    ap_block_state1;
reg   [7:0] reg_209;
reg   [7:0] reg_213;
reg   [7:0] reg_217;
reg   [7:0] reg_221;
reg   [7:0] reg_225;
wire   [3:0] state_addr_reg_318;
wire   [3:0] state_addr_42_reg_323;
wire   [3:0] state_addr_43_reg_328;
wire   [3:0] state_addr_44_reg_333;
reg   [7:0] state_load_2_reg_338;
reg   [7:0] state_load_3_reg_343;
wire   [3:0] state_addr_45_reg_348;
wire   [3:0] state_addr_46_reg_353;
reg   [7:0] state_load_4_reg_358;
reg   [7:0] state_load_5_reg_363;
wire   [3:0] state_addr_47_reg_368;
wire   [3:0] state_addr_48_reg_373;
reg   [7:0] roundKey_read_4_reg_378;
reg   [7:0] state_load_6_reg_383;
reg   [7:0] state_load_7_reg_388;
wire   [3:0] state_addr_49_reg_393;
wire   [3:0] state_addr_50_reg_398;
reg   [7:0] roundKey_read_5_reg_403;
reg   [7:0] state_load_8_reg_408;
reg   [7:0] state_load_9_reg_413;
wire   [3:0] state_addr_51_reg_418;
wire   [3:0] state_addr_52_reg_423;
reg   [7:0] roundKey_read_6_reg_428;
reg   [7:0] state_load_10_reg_433;
reg   [7:0] state_load_11_reg_438;
wire   [3:0] state_addr_53_reg_443;
wire   [3:0] state_addr_54_reg_448;
reg   [7:0] roundKey_read_7_reg_453;
reg   [7:0] state_load_12_reg_458;
reg   [7:0] state_load_13_reg_463;
wire   [3:0] state_addr_55_reg_468;
wire   [3:0] state_addr_56_reg_473;
wire   [7:0] grp_fu_229_p2;
wire   [7:0] tmp_65_1_fu_236_p2;
wire   [7:0] tmp_65_2_fu_243_p2;
wire   [7:0] tmp_65_3_fu_249_p2;
wire   [7:0] tmp_65_4_fu_255_p2;
wire   [7:0] tmp_65_5_fu_260_p2;
wire   [7:0] tmp_65_6_fu_265_p2;
wire   [7:0] tmp_65_7_fu_270_p2;
wire   [7:0] tmp_65_8_fu_275_p2;
wire   [7:0] tmp_65_9_fu_281_p2;
wire   [7:0] tmp_65_s_fu_287_p2;
wire   [7:0] tmp_65_10_fu_293_p2;
wire   [7:0] tmp_65_11_fu_299_p2;
wire   [7:0] tmp_65_12_fu_305_p2;
wire   [7:0] tmp_65_14_fu_311_p2;
reg   [15:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 16'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((~((roundKey_TVALID == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1) & (1'b1 == ap_ce)) | ((roundKey_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state15) & (1'b1 == ap_ce)) | ((roundKey_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state13) & (1'b1 == ap_ce)) | ((roundKey_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state9) & (1'b1 == ap_ce)))) begin
        reg_205 <= roundKey_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((((roundKey_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state2) & (1'b1 == ap_ce)) | ((roundKey_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state9) & (1'b1 == ap_ce)))) begin
        reg_209 <= state_q0;
        reg_217 <= state_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((((roundKey_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state2) & (1'b1 == ap_ce)) | ((roundKey_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state14) & (1'b1 == ap_ce)) | ((roundKey_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state10) & (1'b1 == ap_ce)))) begin
        reg_213 <= roundKey_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((((roundKey_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state3) & (1'b1 == ap_ce)) | ((roundKey_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state11) & (1'b1 == ap_ce)))) begin
        reg_221 <= roundKey_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((((roundKey_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state4) & (1'b1 == ap_ce)) | ((roundKey_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state12) & (1'b1 == ap_ce)))) begin
        reg_225 <= roundKey_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((roundKey_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state5) & (1'b1 == ap_ce))) begin
        roundKey_read_4_reg_378 <= roundKey_TDATA;
        state_load_6_reg_383 <= state_q0;
        state_load_7_reg_388 <= state_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((roundKey_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state6) & (1'b1 == ap_ce))) begin
        roundKey_read_5_reg_403 <= roundKey_TDATA;
        state_load_8_reg_408 <= state_q0;
        state_load_9_reg_413 <= state_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((roundKey_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state7) & (1'b1 == ap_ce))) begin
        roundKey_read_6_reg_428 <= roundKey_TDATA;
        state_load_10_reg_433 <= state_q0;
        state_load_11_reg_438 <= state_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((roundKey_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state8) & (1'b1 == ap_ce))) begin
        roundKey_read_7_reg_453 <= roundKey_TDATA;
        state_load_12_reg_458 <= state_q0;
        state_load_13_reg_463 <= state_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((roundKey_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state3) & (1'b1 == ap_ce))) begin
        state_load_2_reg_338 <= state_q0;
        state_load_3_reg_343 <= state_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((roundKey_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state4) & (1'b1 == ap_ce))) begin
        state_load_4_reg_358 <= state_q0;
        state_load_5_reg_363 <= state_q1;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((roundKey_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state16) & (1'b1 == ap_ce)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((roundKey_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state16) & (1'b1 == ap_ce))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        roundKey_TDATA_blk_n = roundKey_TVALID;
    end else begin
        roundKey_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((roundKey_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state8) & (1'b1 == ap_ce)) | ((roundKey_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state7) & (1'b1 == ap_ce)) | ((roundKey_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state6) & (1'b1 == ap_ce)) | ((roundKey_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state5) & (1'b1 == ap_ce)) | ((roundKey_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state4) & (1'b1 == ap_ce)) | ((roundKey_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state3) & (1'b1 == ap_ce)) | ((roundKey_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state2) & (1'b1 == ap_ce)) | (~((roundKey_TVALID == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1) & (1'b1 == ap_ce)) | ((roundKey_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state16) & (1'b1 == ap_ce)) | ((roundKey_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state15) & (1'b1 == ap_ce)) | ((roundKey_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state14) & (1'b1 == ap_ce)) | ((roundKey_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state13) & (1'b1 == ap_ce)) | ((roundKey_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state12) & (1'b1 == ap_ce)) | ((roundKey_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state11) & (1'b1 == ap_ce)) | ((roundKey_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state10) & (1'b1 == ap_ce)) | ((roundKey_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state9) & (1'b1 == ap_ce)))) begin
        roundKey_TREADY = 1'b1;
    end else begin
        roundKey_TREADY = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        state_address0 = state_addr_55_reg_468;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        state_address0 = state_addr_53_reg_443;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        state_address0 = state_addr_51_reg_418;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        state_address0 = state_addr_49_reg_393;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        state_address0 = state_addr_47_reg_368;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        state_address0 = state_addr_45_reg_348;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        state_address0 = state_addr_43_reg_328;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        state_address0 = state_addr_reg_318;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        state_address0 = 64'd14;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        state_address0 = 64'd12;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        state_address0 = 64'd10;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        state_address0 = 64'd8;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        state_address0 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        state_address0 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        state_address0 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        state_address0 = 64'd0;
    end else begin
        state_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        state_address1 = state_addr_56_reg_473;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        state_address1 = state_addr_54_reg_448;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        state_address1 = state_addr_52_reg_423;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        state_address1 = state_addr_50_reg_398;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        state_address1 = state_addr_48_reg_373;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        state_address1 = state_addr_46_reg_353;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        state_address1 = state_addr_44_reg_333;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        state_address1 = state_addr_42_reg_323;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        state_address1 = 64'd15;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        state_address1 = 64'd13;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        state_address1 = 64'd11;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        state_address1 = 64'd9;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        state_address1 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        state_address1 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        state_address1 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        state_address1 = 64'd1;
    end else begin
        state_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((roundKey_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state8) & (1'b1 == ap_ce)) | ((roundKey_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state7) & (1'b1 == ap_ce)) | ((roundKey_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state6) & (1'b1 == ap_ce)) | ((roundKey_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state5) & (1'b1 == ap_ce)) | ((roundKey_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state4) & (1'b1 == ap_ce)) | ((roundKey_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state3) & (1'b1 == ap_ce)) | ((roundKey_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state2) & (1'b1 == ap_ce)) | (~((roundKey_TVALID == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1) & (1'b1 == ap_ce)) | ((roundKey_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state16) & (1'b1 == ap_ce)) | ((roundKey_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state15) & (1'b1 == ap_ce)) | ((roundKey_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state14) & (1'b1 == ap_ce)) | ((roundKey_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state13) & (1'b1 == ap_ce)) | ((roundKey_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state12) & (1'b1 == ap_ce)) | ((roundKey_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state11) & (1'b1 == ap_ce)) | ((roundKey_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state10) & (1'b1 == ap_ce)) | ((roundKey_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state9) & (1'b1 == ap_ce)))) begin
        state_ce0 = 1'b1;
    end else begin
        state_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((roundKey_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state8) & (1'b1 == ap_ce)) | ((roundKey_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state7) & (1'b1 == ap_ce)) | ((roundKey_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state6) & (1'b1 == ap_ce)) | ((roundKey_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state5) & (1'b1 == ap_ce)) | ((roundKey_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state4) & (1'b1 == ap_ce)) | ((roundKey_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state3) & (1'b1 == ap_ce)) | ((roundKey_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state2) & (1'b1 == ap_ce)) | (~((roundKey_TVALID == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1) & (1'b1 == ap_ce)) | ((roundKey_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state16) & (1'b1 == ap_ce)) | ((roundKey_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state15) & (1'b1 == ap_ce)) | ((roundKey_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state14) & (1'b1 == ap_ce)) | ((roundKey_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state13) & (1'b1 == ap_ce)) | ((roundKey_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state12) & (1'b1 == ap_ce)) | ((roundKey_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state11) & (1'b1 == ap_ce)) | ((roundKey_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state10) & (1'b1 == ap_ce)) | ((roundKey_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state9) & (1'b1 == ap_ce)))) begin
        state_ce1 = 1'b1;
    end else begin
        state_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        state_d0 = tmp_65_11_fu_299_p2;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        state_d0 = tmp_65_s_fu_287_p2;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        state_d0 = tmp_65_8_fu_275_p2;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        state_d0 = tmp_65_6_fu_265_p2;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        state_d0 = tmp_65_4_fu_255_p2;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        state_d0 = tmp_65_2_fu_243_p2;
    end else if (((1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state9))) begin
        state_d0 = grp_fu_229_p2;
    end else begin
        state_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        state_d1 = tmp_65_14_fu_311_p2;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        state_d1 = tmp_65_12_fu_305_p2;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        state_d1 = tmp_65_10_fu_293_p2;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        state_d1 = tmp_65_9_fu_281_p2;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        state_d1 = tmp_65_7_fu_270_p2;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        state_d1 = tmp_65_5_fu_260_p2;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        state_d1 = tmp_65_3_fu_249_p2;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        state_d1 = tmp_65_1_fu_236_p2;
    end else begin
        state_d1 = 'bx;
    end
end

always @ (*) begin
    if ((((roundKey_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state16) & (1'b1 == ap_ce)) | ((roundKey_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state15) & (1'b1 == ap_ce)) | ((roundKey_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state14) & (1'b1 == ap_ce)) | ((roundKey_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state13) & (1'b1 == ap_ce)) | ((roundKey_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state12) & (1'b1 == ap_ce)) | ((roundKey_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state11) & (1'b1 == ap_ce)) | ((roundKey_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state10) & (1'b1 == ap_ce)) | ((roundKey_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state9) & (1'b1 == ap_ce)))) begin
        state_we0 = 1'b1;
    end else begin
        state_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((roundKey_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state16) & (1'b1 == ap_ce)) | ((roundKey_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state15) & (1'b1 == ap_ce)) | ((roundKey_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state14) & (1'b1 == ap_ce)) | ((roundKey_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state13) & (1'b1 == ap_ce)) | ((roundKey_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state12) & (1'b1 == ap_ce)) | ((roundKey_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state11) & (1'b1 == ap_ce)) | ((roundKey_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state10) & (1'b1 == ap_ce)) | ((roundKey_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state9) & (1'b1 == ap_ce)))) begin
        state_we1 = 1'b1;
    end else begin
        state_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((roundKey_TVALID == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1) & (1'b1 == ap_ce))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((roundKey_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state2) & (1'b1 == ap_ce))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((roundKey_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state3) & (1'b1 == ap_ce))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((roundKey_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state4) & (1'b1 == ap_ce))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((roundKey_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state5) & (1'b1 == ap_ce))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((roundKey_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state6) & (1'b1 == ap_ce))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((roundKey_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state7) & (1'b1 == ap_ce))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state8 : begin
            if (((roundKey_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state8) & (1'b1 == ap_ce))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state9 : begin
            if (((roundKey_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state9) & (1'b1 == ap_ce))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state10 : begin
            if (((roundKey_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state10) & (1'b1 == ap_ce))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state11 : begin
            if (((roundKey_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state11) & (1'b1 == ap_ce))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state12 : begin
            if (((roundKey_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state12) & (1'b1 == ap_ce))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state13 : begin
            if (((roundKey_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state13) & (1'b1 == ap_ce))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state14 : begin
            if (((roundKey_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state14) & (1'b1 == ap_ce))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state15 : begin
            if (((roundKey_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state15) & (1'b1 == ap_ce))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end
        end
        ap_ST_fsm_state16 : begin
            if (((roundKey_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state16) & (1'b1 == ap_ce))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state1 = ((roundKey_TVALID == 1'b0) | (ap_start == 1'b0));
end

assign grp_fu_229_p2 = (reg_209 ^ reg_205);

assign state_addr_42_reg_323 = 64'd1;

assign state_addr_43_reg_328 = 64'd2;

assign state_addr_44_reg_333 = 64'd3;

assign state_addr_45_reg_348 = 64'd4;

assign state_addr_46_reg_353 = 64'd5;

assign state_addr_47_reg_368 = 64'd6;

assign state_addr_48_reg_373 = 64'd7;

assign state_addr_49_reg_393 = 64'd8;

assign state_addr_50_reg_398 = 64'd9;

assign state_addr_51_reg_418 = 64'd10;

assign state_addr_52_reg_423 = 64'd11;

assign state_addr_53_reg_443 = 64'd12;

assign state_addr_54_reg_448 = 64'd13;

assign state_addr_55_reg_468 = 64'd14;

assign state_addr_56_reg_473 = 64'd15;

assign state_addr_reg_318 = 64'd0;

assign tmp_65_10_fu_293_p2 = (state_load_11_reg_438 ^ reg_225);

assign tmp_65_11_fu_299_p2 = (state_load_12_reg_458 ^ reg_205);

assign tmp_65_12_fu_305_p2 = (state_load_13_reg_463 ^ reg_213);

assign tmp_65_14_fu_311_p2 = (roundKey_TDATA ^ reg_217);

assign tmp_65_1_fu_236_p2 = (reg_217 ^ reg_213);

assign tmp_65_2_fu_243_p2 = (state_load_2_reg_338 ^ reg_221);

assign tmp_65_3_fu_249_p2 = (state_load_3_reg_343 ^ reg_225);

assign tmp_65_4_fu_255_p2 = (state_load_4_reg_358 ^ roundKey_read_4_reg_378);

assign tmp_65_5_fu_260_p2 = (state_load_5_reg_363 ^ roundKey_read_5_reg_403);

assign tmp_65_6_fu_265_p2 = (state_load_6_reg_383 ^ roundKey_read_6_reg_428);

assign tmp_65_7_fu_270_p2 = (state_load_7_reg_388 ^ roundKey_read_7_reg_453);

assign tmp_65_8_fu_275_p2 = (state_load_8_reg_408 ^ reg_205);

assign tmp_65_9_fu_281_p2 = (state_load_9_reg_413 ^ reg_213);

assign tmp_65_s_fu_287_p2 = (state_load_10_reg_433 ^ reg_221);

endmodule //AddRoundKey
