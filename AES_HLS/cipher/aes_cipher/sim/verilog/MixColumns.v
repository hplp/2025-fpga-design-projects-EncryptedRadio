// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module MixColumns (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        state_address0,
        state_ce0,
        state_we0,
        state_d0,
        state_q0,
        state_address1,
        state_ce1,
        state_we1,
        state_d1,
        state_q1,
        ap_ce
);

parameter    ap_ST_fsm_state1 = 18'd1;
parameter    ap_ST_fsm_state2 = 18'd2;
parameter    ap_ST_fsm_state3 = 18'd4;
parameter    ap_ST_fsm_state4 = 18'd8;
parameter    ap_ST_fsm_state5 = 18'd16;
parameter    ap_ST_fsm_state6 = 18'd32;
parameter    ap_ST_fsm_state7 = 18'd64;
parameter    ap_ST_fsm_state8 = 18'd128;
parameter    ap_ST_fsm_state9 = 18'd256;
parameter    ap_ST_fsm_state10 = 18'd512;
parameter    ap_ST_fsm_state11 = 18'd1024;
parameter    ap_ST_fsm_state12 = 18'd2048;
parameter    ap_ST_fsm_state13 = 18'd4096;
parameter    ap_ST_fsm_state14 = 18'd8192;
parameter    ap_ST_fsm_state15 = 18'd16384;
parameter    ap_ST_fsm_state16 = 18'd32768;
parameter    ap_ST_fsm_state17 = 18'd65536;
parameter    ap_ST_fsm_state18 = 18'd131072;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] state_address0;
output   state_ce0;
output   state_we0;
output  [7:0] state_d0;
input  [7:0] state_q0;
output  [3:0] state_address1;
output   state_ce1;
output   state_we1;
output  [7:0] state_d1;
input  [7:0] state_q1;
input   ap_ce;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[3:0] state_address0;
reg state_ce0;
reg state_we0;
reg[7:0] state_d0;
reg[3:0] state_address1;
reg state_ce1;
reg state_we1;
reg[7:0] state_d1;

(* fsm_encoding = "none" *) reg   [17:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [9:0] cipher_address0;
reg    cipher_ce0;
wire   [7:0] cipher_q0;
reg   [9:0] cipher_address1;
reg    cipher_ce1;
wire   [7:0] cipher_q1;
reg   [7:0] reg_456;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state5;
reg   [7:0] reg_460;
wire    ap_CS_fsm_state6;
reg   [7:0] reg_465;
wire    ap_CS_fsm_state3;
reg   [7:0] reg_470;
wire    ap_CS_fsm_state9;
reg   [7:0] reg_475;
wire    ap_CS_fsm_state4;
wire   [3:0] state_addr_reg_1041;
wire   [3:0] state_addr_27_reg_1046;
wire   [3:0] state_addr_28_reg_1061;
wire   [3:0] state_addr_29_reg_1066;
wire   [7:0] tmp_9_fu_510_p2;
reg   [7:0] tmp_9_reg_1071;
wire   [3:0] state_addr_30_reg_1086;
wire   [3:0] state_addr_31_reg_1091;
wire   [7:0] tmp_3_fu_546_p2;
reg   [7:0] tmp_3_reg_1096;
reg   [7:0] state_load_20_reg_1111;
wire   [3:0] state_addr_32_reg_1119;
wire   [3:0] state_addr_33_reg_1124;
wire   [7:0] tmp_1_fu_582_p2;
reg   [7:0] tmp_1_reg_1129;
wire   [3:0] state_addr_34_reg_1144;
wire   [3:0] state_addr_35_reg_1149;
wire   [7:0] tmp_2_fu_618_p2;
reg   [7:0] tmp_2_reg_1154;
wire   [3:0] state_addr_36_reg_1169;
wire   [3:0] state_addr_37_reg_1174;
wire   [7:0] tmp_8_fu_653_p2;
reg   [7:0] tmp_8_reg_1179;
wire    ap_CS_fsm_state7;
reg   [7:0] state_load_25_reg_1194;
reg   [7:0] state_load_26_reg_1202;
wire   [3:0] state_addr_38_reg_1210;
wire   [3:0] state_addr_39_reg_1215;
wire   [7:0] tmp_s_fu_688_p2;
reg   [7:0] tmp_s_reg_1220;
wire    ap_CS_fsm_state8;
reg   [7:0] state_load_27_reg_1235;
reg   [7:0] state_load_28_reg_1243;
wire   [3:0] state_addr_40_reg_1251;
wire   [3:0] state_addr_41_reg_1256;
wire   [7:0] tmp_4_fu_723_p2;
reg   [7:0] tmp_4_reg_1261;
wire   [7:0] tmp_5_fu_758_p2;
reg   [7:0] tmp_5_reg_1276;
wire    ap_CS_fsm_state10;
wire   [7:0] tmp_6_fu_792_p2;
reg   [7:0] tmp_6_reg_1291;
wire    ap_CS_fsm_state11;
wire   [7:0] tmp_7_fu_826_p2;
reg   [7:0] tmp_7_reg_1306;
wire    ap_CS_fsm_state12;
wire   [7:0] tmp_10_fu_860_p2;
reg   [7:0] tmp_10_reg_1321;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state16;
wire    ap_CS_fsm_state17;
wire   [63:0] addr_fu_480_p3;
wire   [63:0] addr1_fu_489_p3;
wire   [63:0] addr2_fu_516_p3;
wire   [63:0] addr3_fu_525_p3;
wire   [63:0] addr4_fu_552_p3;
wire   [63:0] addr5_fu_561_p3;
wire   [63:0] addr6_fu_588_p3;
wire   [63:0] addr7_fu_597_p3;
wire   [63:0] addr8_fu_624_p3;
wire   [63:0] addr9_fu_633_p3;
wire   [63:0] addr10_fu_659_p3;
wire   [63:0] addr11_fu_667_p3;
wire   [63:0] addr12_fu_694_p3;
wire   [63:0] addr13_fu_703_p3;
wire   [63:0] addr14_fu_729_p3;
wire   [63:0] addr15_fu_738_p3;
wire   [63:0] addr16_fu_764_p3;
wire   [63:0] addr17_fu_773_p3;
wire   [63:0] addr18_fu_798_p3;
wire   [63:0] addr19_fu_807_p3;
wire   [63:0] addr20_fu_832_p3;
wire   [63:0] addr21_fu_840_p3;
wire   [63:0] addr22_fu_866_p3;
wire   [63:0] addr23_fu_875_p3;
wire   [63:0] addr24_fu_901_p3;
wire   [63:0] addr25_fu_909_p3;
wire   [63:0] addr26_fu_936_p3;
wire   [63:0] addr27_fu_944_p3;
wire   [63:0] addr28_fu_971_p3;
wire   [63:0] addr29_fu_980_p3;
wire   [63:0] addr30_fu_1006_p3;
wire   [63:0] addr31_fu_1014_p3;
wire   [7:0] tmp_11_fu_894_p2;
wire   [7:0] tmp_12_fu_929_p2;
wire   [7:0] tmp_13_fu_964_p2;
wire   [7:0] tmp_14_fu_999_p2;
wire    ap_CS_fsm_state18;
wire   [7:0] tmp_15_fu_1034_p2;
wire   [7:0] tmp2_fu_504_p2;
wire   [7:0] tmp1_fu_498_p2;
wire   [7:0] tmp4_fu_540_p2;
wire   [7:0] tmp3_fu_534_p2;
wire   [7:0] tmp6_fu_576_p2;
wire   [7:0] tmp5_fu_570_p2;
wire   [7:0] tmp8_fu_612_p2;
wire   [7:0] tmp7_fu_606_p2;
wire   [7:0] tmp_fu_647_p2;
wire   [7:0] tmp9_fu_641_p2;
wire   [7:0] tmp11_fu_682_p2;
wire   [7:0] tmp10_fu_676_p2;
wire   [7:0] tmp13_fu_717_p2;
wire   [7:0] tmp12_fu_712_p2;
wire   [7:0] tmp15_fu_752_p2;
wire   [7:0] tmp14_fu_747_p2;
wire   [7:0] tmp17_fu_788_p2;
wire   [7:0] tmp16_fu_782_p2;
wire   [7:0] tmp19_fu_820_p2;
wire   [7:0] tmp18_fu_815_p2;
wire   [7:0] tmp21_fu_854_p2;
wire   [7:0] tmp20_fu_848_p2;
wire   [7:0] tmp23_fu_888_p2;
wire   [7:0] tmp22_fu_883_p2;
wire   [7:0] tmp25_fu_923_p2;
wire   [7:0] tmp24_fu_917_p2;
wire   [7:0] tmp27_fu_958_p2;
wire   [7:0] tmp26_fu_953_p2;
wire   [7:0] tmp29_fu_993_p2;
wire   [7:0] tmp28_fu_989_p2;
wire   [7:0] tmp31_fu_1028_p2;
wire   [7:0] tmp30_fu_1023_p2;
reg   [17:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 18'd1;
end

MixColumns_cipher #(
    .DataWidth( 8 ),
    .AddressRange( 768 ),
    .AddressWidth( 10 ))
cipher_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(cipher_address0),
    .ce0(cipher_ce0),
    .q0(cipher_q0),
    .address1(cipher_address1),
    .ce1(cipher_ce1),
    .q1(cipher_q1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_ce)) begin
        if ((1'b1 == ap_CS_fsm_state6)) begin
            reg_460 <= state_q0;
        end else if ((1'b1 == ap_CS_fsm_state2)) begin
            reg_460 <= state_q1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_ce)) begin
        if ((1'b1 == ap_CS_fsm_state6)) begin
            reg_465 <= state_q1;
        end else if ((1'b1 == ap_CS_fsm_state3)) begin
            reg_465 <= state_q0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state9))) begin
        reg_470 <= state_q0;
    end else if ((((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state3)) | ((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state5)))) begin
        reg_470 <= state_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_ce)) begin
        if ((1'b1 == ap_CS_fsm_state9)) begin
            reg_475 <= state_q1;
        end else if ((1'b1 == ap_CS_fsm_state4)) begin
            reg_475 <= state_q0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state5)) | ((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state2)))) begin
        reg_456 <= state_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state4))) begin
        state_load_20_reg_1111 <= state_q1;
        tmp_3_reg_1096 <= tmp_3_fu_546_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state7))) begin
        state_load_25_reg_1194 <= state_q0;
        state_load_26_reg_1202 <= state_q1;
        tmp_8_reg_1179 <= tmp_8_fu_653_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state8))) begin
        state_load_27_reg_1235 <= state_q0;
        state_load_28_reg_1243 <= state_q1;
        tmp_s_reg_1220 <= tmp_s_fu_688_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state13))) begin
        tmp_10_reg_1321 <= tmp_10_fu_860_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state5))) begin
        tmp_1_reg_1129 <= tmp_1_fu_582_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state6))) begin
        tmp_2_reg_1154 <= tmp_2_fu_618_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state9))) begin
        tmp_4_reg_1261 <= tmp_4_fu_723_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state10))) begin
        tmp_5_reg_1276 <= tmp_5_fu_758_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state11))) begin
        tmp_6_reg_1291 <= tmp_6_fu_792_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state12))) begin
        tmp_7_reg_1306 <= tmp_7_fu_826_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state3))) begin
        tmp_9_reg_1071 <= tmp_9_fu_510_p2;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state18)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state18))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        cipher_address0 = addr30_fu_1006_p3;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        cipher_address0 = addr28_fu_971_p3;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        cipher_address0 = addr26_fu_936_p3;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        cipher_address0 = addr24_fu_901_p3;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        cipher_address0 = addr22_fu_866_p3;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        cipher_address0 = addr20_fu_832_p3;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        cipher_address0 = addr18_fu_798_p3;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        cipher_address0 = addr16_fu_764_p3;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        cipher_address0 = addr14_fu_729_p3;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        cipher_address0 = addr12_fu_694_p3;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        cipher_address0 = addr10_fu_659_p3;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        cipher_address0 = addr8_fu_624_p3;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        cipher_address0 = addr6_fu_588_p3;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        cipher_address0 = addr4_fu_552_p3;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        cipher_address0 = addr2_fu_516_p3;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        cipher_address0 = addr_fu_480_p3;
    end else begin
        cipher_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        cipher_address1 = addr31_fu_1014_p3;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        cipher_address1 = addr29_fu_980_p3;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        cipher_address1 = addr27_fu_944_p3;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        cipher_address1 = addr25_fu_909_p3;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        cipher_address1 = addr23_fu_875_p3;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        cipher_address1 = addr21_fu_840_p3;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        cipher_address1 = addr19_fu_807_p3;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        cipher_address1 = addr17_fu_773_p3;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        cipher_address1 = addr15_fu_738_p3;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        cipher_address1 = addr13_fu_703_p3;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        cipher_address1 = addr11_fu_667_p3;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        cipher_address1 = addr9_fu_633_p3;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        cipher_address1 = addr7_fu_597_p3;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        cipher_address1 = addr5_fu_561_p3;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        cipher_address1 = addr3_fu_525_p3;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        cipher_address1 = addr1_fu_489_p3;
    end else begin
        cipher_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state3)) | ((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state6)) | ((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state5)) | ((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state17)) | ((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state16)) | ((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state15)) | ((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state14)) | ((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state13)) | ((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state12)) | ((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state11)) | ((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state10)) | ((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state8)) | ((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state7)) | ((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state4)) | ((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state9)) | ((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state2)))) begin
        cipher_ce0 = 1'b1;
    end else begin
        cipher_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state3)) | ((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state6)) | ((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state5)) | ((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state17)) | ((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state16)) | ((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state15)) | ((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state14)) | ((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state13)) | ((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state12)) | ((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state11)) | ((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state10)) | ((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state8)) | ((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state7)) | ((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state4)) | ((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state9)) | ((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state2)))) begin
        cipher_ce1 = 1'b1;
    end else begin
        cipher_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        state_address0 = state_addr_40_reg_1251;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        state_address0 = state_addr_38_reg_1210;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        state_address0 = state_addr_36_reg_1169;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        state_address0 = state_addr_34_reg_1144;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        state_address0 = state_addr_32_reg_1119;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        state_address0 = state_addr_30_reg_1086;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        state_address0 = state_addr_28_reg_1061;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        state_address0 = state_addr_reg_1041;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        state_address0 = 64'd14;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        state_address0 = 64'd12;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        state_address0 = 64'd10;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        state_address0 = 64'd8;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        state_address0 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        state_address0 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        state_address0 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        state_address0 = 64'd0;
    end else begin
        state_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        state_address1 = state_addr_41_reg_1256;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        state_address1 = state_addr_39_reg_1215;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        state_address1 = state_addr_37_reg_1174;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        state_address1 = state_addr_35_reg_1149;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        state_address1 = state_addr_33_reg_1124;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        state_address1 = state_addr_31_reg_1091;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        state_address1 = state_addr_29_reg_1066;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        state_address1 = state_addr_27_reg_1046;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        state_address1 = 64'd15;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        state_address1 = 64'd13;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        state_address1 = 64'd11;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        state_address1 = 64'd9;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        state_address1 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        state_address1 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        state_address1 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        state_address1 = 64'd1;
    end else begin
        state_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state3)) | ((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state6)) | ((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state5)) | ((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state17)) | ((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state15)) | ((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state14)) | ((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state13)) | ((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state12)) | ((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state11)) | ((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state10)) | ((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state8)) | ((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state7)) | ((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state4)) | ((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state9)) | ((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state2)) | ((1'b1 == ap_ce) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        state_ce0 = 1'b1;
    end else begin
        state_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state3)) | ((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state6)) | ((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state5)) | ((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state18)) | ((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state16)) | ((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state14)) | ((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state13)) | ((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state12)) | ((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state11)) | ((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state10)) | ((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state8)) | ((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state7)) | ((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state4)) | ((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state9)) | ((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state2)) | ((1'b1 == ap_ce) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        state_ce1 = 1'b1;
    end else begin
        state_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        state_d0 = tmp_14_fu_999_p2;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        state_d0 = tmp_12_fu_929_p2;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        state_d0 = tmp_10_reg_1321;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        state_d0 = tmp_6_reg_1291;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        state_d0 = tmp_4_reg_1261;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        state_d0 = tmp_8_reg_1179;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        state_d0 = tmp_1_reg_1129;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        state_d0 = tmp_9_reg_1071;
    end else begin
        state_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        state_d1 = tmp_15_fu_1034_p2;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        state_d1 = tmp_13_fu_964_p2;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        state_d1 = tmp_11_fu_894_p2;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        state_d1 = tmp_7_reg_1306;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        state_d1 = tmp_5_reg_1276;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        state_d1 = tmp_s_reg_1220;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        state_d1 = tmp_2_reg_1154;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        state_d1 = tmp_3_reg_1096;
    end else begin
        state_d1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state17)) | ((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state15)) | ((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state14)) | ((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state13)) | ((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state12)) | ((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state11)) | ((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state10)) | ((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state9)))) begin
        state_we0 = 1'b1;
    end else begin
        state_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state18)) | ((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state16)) | ((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state14)) | ((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state13)) | ((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state12)) | ((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state11)) | ((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state10)) | ((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state9)))) begin
        state_we1 = 1'b1;
    end else begin
        state_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_ce) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state8 : begin
            if (((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state9 : begin
            if (((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state9))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state10 : begin
            if (((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state10))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state11 : begin
            if (((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state11))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state12 : begin
            if (((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state12))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state13 : begin
            if (((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state13))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state14 : begin
            if (((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state14))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state15 : begin
            if (((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state15))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end
        end
        ap_ST_fsm_state16 : begin
            if (((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state16))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        ap_ST_fsm_state17 : begin
            if (((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state17))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end
        end
        ap_ST_fsm_state18 : begin
            if (((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state18))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign addr10_fu_659_p3 = {{56'd1}, {state_load_20_reg_1111}};

assign addr11_fu_667_p3 = {{56'd2}, {reg_456}};

assign addr12_fu_694_p3 = {{56'd1}, {reg_456}};

assign addr13_fu_703_p3 = {{56'd2}, {reg_470}};

assign addr14_fu_729_p3 = {{56'd2}, {reg_475}};

assign addr15_fu_738_p3 = {{56'd1}, {reg_470}};

assign addr16_fu_764_p3 = {{56'd1}, {reg_460}};

assign addr17_fu_773_p3 = {{56'd2}, {reg_465}};

assign addr18_fu_798_p3 = {{56'd1}, {reg_465}};

assign addr19_fu_807_p3 = {{56'd2}, {state_load_25_reg_1194}};

assign addr1_fu_489_p3 = {{56'd2}, {state_q1}};

assign addr20_fu_832_p3 = {{56'd1}, {state_load_25_reg_1194}};

assign addr21_fu_840_p3 = {{56'd2}, {state_load_26_reg_1202}};

assign addr22_fu_866_p3 = {{56'd2}, {reg_460}};

assign addr23_fu_875_p3 = {{56'd1}, {state_load_26_reg_1202}};

assign addr24_fu_901_p3 = {{56'd1}, {state_load_27_reg_1235}};

assign addr25_fu_909_p3 = {{56'd2}, {state_load_28_reg_1243}};

assign addr26_fu_936_p3 = {{56'd1}, {state_load_28_reg_1243}};

assign addr27_fu_944_p3 = {{56'd2}, {reg_470}};

assign addr28_fu_971_p3 = {{56'd1}, {reg_470}};

assign addr29_fu_980_p3 = {{56'd2}, {reg_475}};

assign addr2_fu_516_p3 = {{56'd1}, {reg_460}};

assign addr30_fu_1006_p3 = {{56'd2}, {state_load_27_reg_1235}};

assign addr31_fu_1014_p3 = {{56'd1}, {reg_475}};

assign addr3_fu_525_p3 = {{56'd2}, {state_q0}};

assign addr4_fu_552_p3 = {{56'd1}, {reg_465}};

assign addr5_fu_561_p3 = {{56'd2}, {reg_470}};

assign addr6_fu_588_p3 = {{56'd2}, {reg_456}};

assign addr7_fu_597_p3 = {{56'd1}, {reg_470}};

assign addr8_fu_624_p3 = {{56'd1}, {reg_475}};

assign addr9_fu_633_p3 = {{56'd2}, {state_load_20_reg_1111}};

assign addr_fu_480_p3 = {{56'd1}, {state_q0}};

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign state_addr_27_reg_1046 = 64'd1;

assign state_addr_28_reg_1061 = 64'd2;

assign state_addr_29_reg_1066 = 64'd3;

assign state_addr_30_reg_1086 = 64'd4;

assign state_addr_31_reg_1091 = 64'd5;

assign state_addr_32_reg_1119 = 64'd6;

assign state_addr_33_reg_1124 = 64'd7;

assign state_addr_34_reg_1144 = 64'd8;

assign state_addr_35_reg_1149 = 64'd9;

assign state_addr_36_reg_1169 = 64'd10;

assign state_addr_37_reg_1174 = 64'd11;

assign state_addr_38_reg_1210 = 64'd12;

assign state_addr_39_reg_1215 = 64'd13;

assign state_addr_40_reg_1251 = 64'd14;

assign state_addr_41_reg_1256 = 64'd15;

assign state_addr_reg_1041 = 64'd0;

assign tmp10_fu_676_p2 = (reg_475 ^ reg_470);

assign tmp11_fu_682_p2 = (cipher_q1 ^ cipher_q0);

assign tmp12_fu_712_p2 = (state_load_20_reg_1111 ^ reg_475);

assign tmp13_fu_717_p2 = (cipher_q1 ^ cipher_q0);

assign tmp14_fu_747_p2 = (state_load_20_reg_1111 ^ reg_456);

assign tmp15_fu_752_p2 = (cipher_q1 ^ cipher_q0);

assign tmp16_fu_782_p2 = (cipher_q1 ^ cipher_q0);

assign tmp17_fu_788_p2 = (state_load_26_reg_1202 ^ state_load_25_reg_1194);

assign tmp18_fu_815_p2 = (state_load_26_reg_1202 ^ reg_460);

assign tmp19_fu_820_p2 = (cipher_q1 ^ cipher_q0);

assign tmp1_fu_498_p2 = (cipher_q1 ^ cipher_q0);

assign tmp20_fu_848_p2 = (reg_465 ^ reg_460);

assign tmp21_fu_854_p2 = (cipher_q1 ^ cipher_q0);

assign tmp22_fu_883_p2 = (state_load_25_reg_1194 ^ reg_465);

assign tmp23_fu_888_p2 = (cipher_q1 ^ cipher_q0);

assign tmp24_fu_917_p2 = (cipher_q1 ^ cipher_q0);

assign tmp25_fu_923_p2 = (reg_475 ^ reg_470);

assign tmp26_fu_953_p2 = (state_load_27_reg_1235 ^ reg_475);

assign tmp27_fu_958_p2 = (cipher_q1 ^ cipher_q0);

assign tmp28_fu_989_p2 = (state_load_28_reg_1243 ^ state_load_27_reg_1235);

assign tmp29_fu_993_p2 = (cipher_q1 ^ cipher_q0);

assign tmp2_fu_504_p2 = (state_q1 ^ state_q0);

assign tmp30_fu_1023_p2 = (state_load_28_reg_1243 ^ reg_470);

assign tmp31_fu_1028_p2 = (cipher_q1 ^ cipher_q0);

assign tmp3_fu_534_p2 = (reg_470 ^ reg_456);

assign tmp4_fu_540_p2 = (cipher_q1 ^ cipher_q0);

assign tmp5_fu_570_p2 = (reg_460 ^ reg_456);

assign tmp6_fu_576_p2 = (cipher_q1 ^ cipher_q0);

assign tmp7_fu_606_p2 = (reg_465 ^ reg_460);

assign tmp8_fu_612_p2 = (cipher_q1 ^ cipher_q0);

assign tmp9_fu_641_p2 = (cipher_q1 ^ cipher_q0);

assign tmp_10_fu_860_p2 = (tmp21_fu_854_p2 ^ tmp20_fu_848_p2);

assign tmp_11_fu_894_p2 = (tmp23_fu_888_p2 ^ tmp22_fu_883_p2);

assign tmp_12_fu_929_p2 = (tmp25_fu_923_p2 ^ tmp24_fu_917_p2);

assign tmp_13_fu_964_p2 = (tmp27_fu_958_p2 ^ tmp26_fu_953_p2);

assign tmp_14_fu_999_p2 = (tmp29_fu_993_p2 ^ tmp28_fu_989_p2);

assign tmp_15_fu_1034_p2 = (tmp31_fu_1028_p2 ^ tmp30_fu_1023_p2);

assign tmp_1_fu_582_p2 = (tmp6_fu_576_p2 ^ tmp5_fu_570_p2);

assign tmp_2_fu_618_p2 = (tmp8_fu_612_p2 ^ tmp7_fu_606_p2);

assign tmp_3_fu_546_p2 = (tmp4_fu_540_p2 ^ tmp3_fu_534_p2);

assign tmp_4_fu_723_p2 = (tmp13_fu_717_p2 ^ tmp12_fu_712_p2);

assign tmp_5_fu_758_p2 = (tmp15_fu_752_p2 ^ tmp14_fu_747_p2);

assign tmp_6_fu_792_p2 = (tmp17_fu_788_p2 ^ tmp16_fu_782_p2);

assign tmp_7_fu_826_p2 = (tmp19_fu_820_p2 ^ tmp18_fu_815_p2);

assign tmp_8_fu_653_p2 = (tmp_fu_647_p2 ^ tmp9_fu_641_p2);

assign tmp_9_fu_510_p2 = (tmp2_fu_504_p2 ^ tmp1_fu_498_p2);

assign tmp_fu_647_p2 = (reg_470 ^ reg_456);

assign tmp_s_fu_688_p2 = (tmp11_fu_682_p2 ^ tmp10_fu_676_p2);

endmodule //MixColumns
