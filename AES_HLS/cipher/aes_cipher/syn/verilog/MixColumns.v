// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module MixColumns (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        state_address0,
        state_ce0,
        state_we0,
        state_d0,
        state_q0,
        state_address1,
        state_ce1,
        state_q1
);

parameter    ap_ST_fsm_state1 = 13'd1;
parameter    ap_ST_fsm_state2 = 13'd2;
parameter    ap_ST_fsm_state3 = 13'd4;
parameter    ap_ST_fsm_state4 = 13'd8;
parameter    ap_ST_fsm_state5 = 13'd16;
parameter    ap_ST_fsm_state6 = 13'd32;
parameter    ap_ST_fsm_state7 = 13'd64;
parameter    ap_ST_fsm_state8 = 13'd128;
parameter    ap_ST_fsm_state9 = 13'd256;
parameter    ap_ST_fsm_state10 = 13'd512;
parameter    ap_ST_fsm_state11 = 13'd1024;
parameter    ap_ST_fsm_state12 = 13'd2048;
parameter    ap_ST_fsm_state13 = 13'd4096;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] state_address0;
output   state_ce0;
output   state_we0;
output  [7:0] state_d0;
input  [7:0] state_q0;
output  [3:0] state_address1;
output   state_ce1;
input  [7:0] state_q1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[3:0] state_address0;
reg state_ce0;
reg state_we0;
reg[3:0] state_address1;
reg state_ce1;

(* fsm_encoding = "none" *) reg   [12:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [9:0] cipher_address0;
reg    cipher_ce0;
wire   [7:0] cipher_q0;
reg   [9:0] cipher_address1;
reg    cipher_ce1;
wire   [7:0] cipher_q1;
reg   [9:0] cipher_address2;
reg    cipher_ce2;
wire   [7:0] cipher_q2;
reg   [9:0] cipher_address3;
reg    cipher_ce3;
wire   [7:0] cipher_q3;
reg   [7:0] reg_638;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state9;
reg   [7:0] reg_643;
wire    ap_CS_fsm_state3;
reg   [7:0] reg_647;
wire    ap_CS_fsm_state6;
reg   [7:0] reg_652;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state10;
wire   [4:0] i_2_fu_1254_p2;
reg   [4:0] i_2_reg_1508;
wire    ap_CS_fsm_state12;
wire   [63:0] tmp_17_fu_1260_p1;
reg   [63:0] tmp_17_reg_1513;
wire   [0:0] tmp_16_fu_1248_p2;
reg   [3:0] tmp_state_address0;
reg    tmp_state_ce0;
reg    tmp_state_we0;
reg   [7:0] tmp_state_d0;
wire   [7:0] tmp_state_q0;
reg   [3:0] tmp_state_address1;
reg    tmp_state_ce1;
reg    tmp_state_we1;
reg   [7:0] tmp_state_d1;
reg   [4:0] i_reg_627;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state13;
wire   [63:0] addr_fu_656_p3;
wire   [63:0] addr1_fu_665_p3;
wire   [63:0] addr2_fu_674_p3;
wire   [63:0] addr3_fu_683_p3;
wire   [63:0] addr4_fu_730_p3;
wire   [63:0] addr5_fu_739_p3;
wire   [63:0] addr6_fu_748_p3;
wire   [63:0] addr7_fu_757_p3;
wire   [63:0] addr8_fu_804_p3;
wire   [63:0] addr9_fu_813_p3;
wire   [63:0] addr10_fu_822_p3;
wire   [63:0] addr11_fu_831_p3;
wire   [63:0] addr12_fu_878_p3;
wire   [63:0] addr13_fu_887_p3;
wire   [63:0] addr14_fu_896_p3;
wire   [63:0] addr15_fu_905_p3;
wire   [63:0] addr16_fu_952_p3;
wire   [63:0] addr17_fu_961_p3;
wire   [63:0] addr18_fu_970_p3;
wire   [63:0] addr19_fu_979_p3;
wire   [63:0] addr20_fu_1026_p3;
wire   [63:0] addr21_fu_1035_p3;
wire   [63:0] addr22_fu_1044_p3;
wire   [63:0] addr23_fu_1053_p3;
wire   [63:0] addr24_fu_1100_p3;
wire   [63:0] addr25_fu_1109_p3;
wire   [63:0] addr26_fu_1118_p3;
wire   [63:0] addr27_fu_1127_p3;
wire   [63:0] addr28_fu_1174_p3;
wire   [63:0] addr29_fu_1183_p3;
wire   [63:0] addr30_fu_1192_p3;
wire   [63:0] addr31_fu_1201_p3;
wire   [7:0] tmp_9_fu_704_p2;
wire   [7:0] tmp_3_fu_723_p2;
wire   [7:0] tmp_1_fu_778_p2;
wire   [7:0] tmp_2_fu_797_p2;
wire   [7:0] tmp_8_fu_852_p2;
wire   [7:0] tmp_s_fu_871_p2;
wire   [7:0] tmp_4_fu_926_p2;
wire   [7:0] tmp_5_fu_945_p2;
wire   [7:0] tmp_6_fu_1000_p2;
wire   [7:0] tmp_7_fu_1019_p2;
wire   [7:0] tmp_10_fu_1074_p2;
wire   [7:0] tmp_11_fu_1093_p2;
wire   [7:0] tmp_12_fu_1148_p2;
wire   [7:0] tmp_13_fu_1167_p2;
wire   [7:0] tmp_14_fu_1222_p2;
wire   [7:0] tmp_15_fu_1241_p2;
wire   [7:0] tmp2_fu_698_p2;
wire   [7:0] tmp1_fu_692_p2;
wire   [7:0] tmp4_fu_717_p2;
wire   [7:0] tmp3_fu_711_p2;
wire   [7:0] tmp6_fu_772_p2;
wire   [7:0] tmp5_fu_766_p2;
wire   [7:0] tmp8_fu_791_p2;
wire   [7:0] tmp7_fu_785_p2;
wire   [7:0] tmp_fu_846_p2;
wire   [7:0] tmp9_fu_840_p2;
wire   [7:0] tmp11_fu_865_p2;
wire   [7:0] tmp10_fu_859_p2;
wire   [7:0] tmp13_fu_920_p2;
wire   [7:0] tmp12_fu_914_p2;
wire   [7:0] tmp15_fu_939_p2;
wire   [7:0] tmp14_fu_933_p2;
wire   [7:0] tmp17_fu_994_p2;
wire   [7:0] tmp16_fu_988_p2;
wire   [7:0] tmp19_fu_1013_p2;
wire   [7:0] tmp18_fu_1007_p2;
wire   [7:0] tmp21_fu_1068_p2;
wire   [7:0] tmp20_fu_1062_p2;
wire   [7:0] tmp23_fu_1087_p2;
wire   [7:0] tmp22_fu_1081_p2;
wire   [7:0] tmp25_fu_1142_p2;
wire   [7:0] tmp24_fu_1136_p2;
wire   [7:0] tmp27_fu_1161_p2;
wire   [7:0] tmp26_fu_1155_p2;
wire   [7:0] tmp29_fu_1216_p2;
wire   [7:0] tmp28_fu_1210_p2;
wire   [7:0] tmp31_fu_1235_p2;
wire   [7:0] tmp30_fu_1229_p2;
reg   [12:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 13'd1;
end

MixColumns_cipher #(
    .DataWidth( 8 ),
    .AddressRange( 768 ),
    .AddressWidth( 10 ))
cipher_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(cipher_address0),
    .ce0(cipher_ce0),
    .q0(cipher_q0),
    .address1(cipher_address1),
    .ce1(cipher_ce1),
    .q1(cipher_q1),
    .address2(cipher_address2),
    .ce2(cipher_ce2),
    .q2(cipher_q2),
    .address3(cipher_address3),
    .ce3(cipher_ce3),
    .q3(cipher_q3)
);

ShiftRows_tmp_state #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
tmp_state_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(tmp_state_address0),
    .ce0(tmp_state_ce0),
    .we0(tmp_state_we0),
    .d0(tmp_state_d0),
    .q0(tmp_state_q0),
    .address1(tmp_state_address1),
    .ce1(tmp_state_ce1),
    .we1(tmp_state_we1),
    .d1(tmp_state_d1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        i_reg_627 <= i_2_reg_1508;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        i_reg_627 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state5))) begin
        reg_638 <= state_q1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        reg_638 <= state_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        reg_647 <= state_q0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        reg_647 <= state_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        i_2_reg_1508 <= i_2_fu_1254_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state5))) begin
        reg_643 <= state_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state4))) begin
        reg_652 <= state_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_16_fu_1248_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state12))) begin
        tmp_17_reg_1513[4 : 0] <= tmp_17_fu_1260_p1[4 : 0];
    end
end

always @ (*) begin
    if ((((tmp_16_fu_1248_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state12)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_16_fu_1248_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state12))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        cipher_address0 = addr28_fu_1174_p3;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        cipher_address0 = addr24_fu_1100_p3;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        cipher_address0 = addr20_fu_1026_p3;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        cipher_address0 = addr16_fu_952_p3;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        cipher_address0 = addr12_fu_878_p3;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        cipher_address0 = addr8_fu_804_p3;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        cipher_address0 = addr4_fu_730_p3;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        cipher_address0 = addr_fu_656_p3;
    end else begin
        cipher_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        cipher_address1 = addr29_fu_1183_p3;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        cipher_address1 = addr25_fu_1109_p3;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        cipher_address1 = addr21_fu_1035_p3;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        cipher_address1 = addr17_fu_961_p3;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        cipher_address1 = addr13_fu_887_p3;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        cipher_address1 = addr9_fu_813_p3;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        cipher_address1 = addr5_fu_739_p3;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        cipher_address1 = addr1_fu_665_p3;
    end else begin
        cipher_address1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        cipher_address2 = addr30_fu_1192_p3;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        cipher_address2 = addr26_fu_1118_p3;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        cipher_address2 = addr22_fu_1044_p3;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        cipher_address2 = addr18_fu_970_p3;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        cipher_address2 = addr14_fu_896_p3;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        cipher_address2 = addr10_fu_822_p3;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        cipher_address2 = addr6_fu_748_p3;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        cipher_address2 = addr2_fu_674_p3;
    end else begin
        cipher_address2 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        cipher_address3 = addr31_fu_1201_p3;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        cipher_address3 = addr27_fu_1127_p3;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        cipher_address3 = addr23_fu_1053_p3;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        cipher_address3 = addr19_fu_979_p3;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        cipher_address3 = addr15_fu_905_p3;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        cipher_address3 = addr11_fu_831_p3;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        cipher_address3 = addr7_fu_757_p3;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        cipher_address3 = addr3_fu_683_p3;
    end else begin
        cipher_address3 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state4))) begin
        cipher_ce0 = 1'b1;
    end else begin
        cipher_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state4))) begin
        cipher_ce1 = 1'b1;
    end else begin
        cipher_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state4))) begin
        cipher_ce2 = 1'b1;
    end else begin
        cipher_ce2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state4))) begin
        cipher_ce3 = 1'b1;
    end else begin
        cipher_ce3 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        state_address0 = tmp_17_reg_1513;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        state_address0 = 64'd14;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        state_address0 = 64'd12;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        state_address0 = 64'd10;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        state_address0 = 64'd8;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        state_address0 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        state_address0 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        state_address0 = 64'd1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        state_address0 = 64'd0;
    end else begin
        state_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        state_address1 = 64'd15;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        state_address1 = 64'd13;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        state_address1 = 64'd11;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        state_address1 = 64'd9;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        state_address1 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        state_address1 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        state_address1 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        state_address1 = 64'd2;
    end else begin
        state_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state4) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        state_ce0 = 1'b1;
    end else begin
        state_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state4))) begin
        state_ce1 = 1'b1;
    end else begin
        state_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        state_we0 = 1'b1;
    end else begin
        state_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        tmp_state_address0 = tmp_17_fu_1260_p1;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        tmp_state_address0 = 64'd14;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        tmp_state_address0 = 64'd12;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        tmp_state_address0 = 64'd10;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        tmp_state_address0 = 64'd8;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        tmp_state_address0 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        tmp_state_address0 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        tmp_state_address0 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        tmp_state_address0 = 64'd0;
    end else begin
        tmp_state_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        tmp_state_address1 = 64'd15;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        tmp_state_address1 = 64'd13;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        tmp_state_address1 = 64'd11;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        tmp_state_address1 = 64'd9;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        tmp_state_address1 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        tmp_state_address1 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        tmp_state_address1 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        tmp_state_address1 = 64'd1;
    end else begin
        tmp_state_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state4))) begin
        tmp_state_ce0 = 1'b1;
    end else begin
        tmp_state_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state4))) begin
        tmp_state_ce1 = 1'b1;
    end else begin
        tmp_state_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        tmp_state_d0 = tmp_14_fu_1222_p2;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        tmp_state_d0 = tmp_12_fu_1148_p2;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        tmp_state_d0 = tmp_10_fu_1074_p2;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        tmp_state_d0 = tmp_6_fu_1000_p2;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        tmp_state_d0 = tmp_4_fu_926_p2;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        tmp_state_d0 = tmp_8_fu_852_p2;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        tmp_state_d0 = tmp_1_fu_778_p2;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        tmp_state_d0 = tmp_9_fu_704_p2;
    end else begin
        tmp_state_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        tmp_state_d1 = tmp_15_fu_1241_p2;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        tmp_state_d1 = tmp_13_fu_1167_p2;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        tmp_state_d1 = tmp_11_fu_1093_p2;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        tmp_state_d1 = tmp_7_fu_1019_p2;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        tmp_state_d1 = tmp_5_fu_945_p2;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        tmp_state_d1 = tmp_s_fu_871_p2;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        tmp_state_d1 = tmp_2_fu_797_p2;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        tmp_state_d1 = tmp_3_fu_723_p2;
    end else begin
        tmp_state_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state4))) begin
        tmp_state_we0 = 1'b1;
    end else begin
        tmp_state_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state4))) begin
        tmp_state_we1 = 1'b1;
    end else begin
        tmp_state_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            if (((tmp_16_fu_1248_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state12))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign addr10_fu_822_p3 = {{56'd1}, {state_q1}};

assign addr11_fu_831_p3 = {{56'd2}, {state_q0}};

assign addr12_fu_878_p3 = {{56'd1}, {reg_643}};

assign addr13_fu_887_p3 = {{56'd2}, {state_q1}};

assign addr14_fu_896_p3 = {{56'd2}, {reg_652}};

assign addr15_fu_905_p3 = {{56'd1}, {state_q1}};

assign addr16_fu_952_p3 = {{56'd1}, {reg_647}};

assign addr17_fu_961_p3 = {{56'd2}, {state_q1}};

assign addr18_fu_970_p3 = {{56'd1}, {state_q1}};

assign addr19_fu_979_p3 = {{56'd2}, {state_q0}};

assign addr1_fu_665_p3 = {{56'd2}, {state_q0}};

assign addr20_fu_1026_p3 = {{56'd1}, {reg_643}};

assign addr21_fu_1035_p3 = {{56'd2}, {state_q1}};

assign addr22_fu_1044_p3 = {{56'd2}, {reg_647}};

assign addr23_fu_1053_p3 = {{56'd1}, {state_q1}};

assign addr24_fu_1100_p3 = {{56'd1}, {reg_652}};

assign addr25_fu_1109_p3 = {{56'd2}, {state_q1}};

assign addr26_fu_1118_p3 = {{56'd1}, {state_q1}};

assign addr27_fu_1127_p3 = {{56'd2}, {state_q0}};

assign addr28_fu_1174_p3 = {{56'd1}, {reg_643}};

assign addr29_fu_1183_p3 = {{56'd2}, {state_q1}};

assign addr2_fu_674_p3 = {{56'd1}, {state_q0}};

assign addr30_fu_1192_p3 = {{56'd2}, {reg_652}};

assign addr31_fu_1201_p3 = {{56'd1}, {state_q1}};

assign addr3_fu_683_p3 = {{56'd2}, {state_q1}};

assign addr4_fu_730_p3 = {{56'd1}, {reg_647}};

assign addr5_fu_739_p3 = {{56'd2}, {state_q1}};

assign addr6_fu_748_p3 = {{56'd2}, {reg_638}};

assign addr7_fu_757_p3 = {{56'd1}, {state_q1}};

assign addr8_fu_804_p3 = {{56'd1}, {reg_652}};

assign addr9_fu_813_p3 = {{56'd2}, {state_q1}};

assign addr_fu_656_p3 = {{56'd1}, {reg_638}};

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign i_2_fu_1254_p2 = (i_reg_627 + 5'd1);

assign state_d0 = tmp_state_q0;

assign tmp10_fu_859_p2 = (state_q1 ^ reg_652);

assign tmp11_fu_865_p2 = (cipher_q3 ^ cipher_q2);

assign tmp12_fu_914_p2 = (reg_652 ^ reg_638);

assign tmp13_fu_920_p2 = (cipher_q1 ^ cipher_q0);

assign tmp14_fu_933_p2 = (reg_643 ^ reg_638);

assign tmp15_fu_939_p2 = (cipher_q3 ^ cipher_q2);

assign tmp16_fu_988_p2 = (cipher_q1 ^ cipher_q0);

assign tmp17_fu_994_p2 = (state_q1 ^ reg_643);

assign tmp18_fu_1007_p2 = (state_q1 ^ reg_647);

assign tmp19_fu_1013_p2 = (cipher_q3 ^ cipher_q2);

assign tmp1_fu_692_p2 = (cipher_q1 ^ cipher_q0);

assign tmp20_fu_1062_p2 = (reg_647 ^ reg_638);

assign tmp21_fu_1068_p2 = (cipher_q1 ^ cipher_q0);

assign tmp22_fu_1081_p2 = (reg_643 ^ reg_638);

assign tmp23_fu_1087_p2 = (cipher_q3 ^ cipher_q2);

assign tmp24_fu_1136_p2 = (cipher_q1 ^ cipher_q0);

assign tmp25_fu_1142_p2 = (state_q1 ^ reg_643);

assign tmp26_fu_1155_p2 = (state_q1 ^ reg_652);

assign tmp27_fu_1161_p2 = (cipher_q3 ^ cipher_q2);

assign tmp28_fu_1210_p2 = (reg_652 ^ reg_638);

assign tmp29_fu_1216_p2 = (cipher_q1 ^ cipher_q0);

assign tmp2_fu_698_p2 = (state_q1 ^ reg_647);

assign tmp30_fu_1229_p2 = (reg_643 ^ reg_638);

assign tmp31_fu_1235_p2 = (cipher_q3 ^ cipher_q2);

assign tmp3_fu_711_p2 = (state_q1 ^ reg_638);

assign tmp4_fu_717_p2 = (cipher_q3 ^ cipher_q2);

assign tmp5_fu_766_p2 = (reg_643 ^ reg_638);

assign tmp6_fu_772_p2 = (cipher_q1 ^ cipher_q0);

assign tmp7_fu_785_p2 = (reg_647 ^ reg_643);

assign tmp8_fu_791_p2 = (cipher_q3 ^ cipher_q2);

assign tmp9_fu_840_p2 = (cipher_q1 ^ cipher_q0);

assign tmp_10_fu_1074_p2 = (tmp21_fu_1068_p2 ^ tmp20_fu_1062_p2);

assign tmp_11_fu_1093_p2 = (tmp23_fu_1087_p2 ^ tmp22_fu_1081_p2);

assign tmp_12_fu_1148_p2 = (tmp25_fu_1142_p2 ^ tmp24_fu_1136_p2);

assign tmp_13_fu_1167_p2 = (tmp27_fu_1161_p2 ^ tmp26_fu_1155_p2);

assign tmp_14_fu_1222_p2 = (tmp29_fu_1216_p2 ^ tmp28_fu_1210_p2);

assign tmp_15_fu_1241_p2 = (tmp31_fu_1235_p2 ^ tmp30_fu_1229_p2);

assign tmp_16_fu_1248_p2 = ((i_reg_627 == 5'd16) ? 1'b1 : 1'b0);

assign tmp_17_fu_1260_p1 = i_reg_627;

assign tmp_1_fu_778_p2 = (tmp6_fu_772_p2 ^ tmp5_fu_766_p2);

assign tmp_2_fu_797_p2 = (tmp8_fu_791_p2 ^ tmp7_fu_785_p2);

assign tmp_3_fu_723_p2 = (tmp4_fu_717_p2 ^ tmp3_fu_711_p2);

assign tmp_4_fu_926_p2 = (tmp13_fu_920_p2 ^ tmp12_fu_914_p2);

assign tmp_5_fu_945_p2 = (tmp15_fu_939_p2 ^ tmp14_fu_933_p2);

assign tmp_6_fu_1000_p2 = (tmp17_fu_994_p2 ^ tmp16_fu_988_p2);

assign tmp_7_fu_1019_p2 = (tmp19_fu_1013_p2 ^ tmp18_fu_1007_p2);

assign tmp_8_fu_852_p2 = (tmp_fu_846_p2 ^ tmp9_fu_840_p2);

assign tmp_9_fu_704_p2 = (tmp2_fu_698_p2 ^ tmp1_fu_692_p2);

assign tmp_fu_846_p2 = (state_q1 ^ reg_643);

assign tmp_s_fu_871_p2 = (tmp11_fu_865_p2 ^ tmp10_fu_859_p2);

always @ (posedge ap_clk) begin
    tmp_17_reg_1513[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
end

endmodule //MixColumns
