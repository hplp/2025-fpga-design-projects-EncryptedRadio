// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "MixColumns.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic MixColumns::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic MixColumns::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<13> MixColumns::ap_ST_fsm_state1 = "1";
const sc_lv<13> MixColumns::ap_ST_fsm_state2 = "10";
const sc_lv<13> MixColumns::ap_ST_fsm_state3 = "100";
const sc_lv<13> MixColumns::ap_ST_fsm_state4 = "1000";
const sc_lv<13> MixColumns::ap_ST_fsm_state5 = "10000";
const sc_lv<13> MixColumns::ap_ST_fsm_state6 = "100000";
const sc_lv<13> MixColumns::ap_ST_fsm_state7 = "1000000";
const sc_lv<13> MixColumns::ap_ST_fsm_state8 = "10000000";
const sc_lv<13> MixColumns::ap_ST_fsm_state9 = "100000000";
const sc_lv<13> MixColumns::ap_ST_fsm_state10 = "1000000000";
const sc_lv<13> MixColumns::ap_ST_fsm_state11 = "10000000000";
const sc_lv<13> MixColumns::ap_ST_fsm_state12 = "100000000000";
const sc_lv<13> MixColumns::ap_ST_fsm_state13 = "1000000000000";
const sc_lv<32> MixColumns::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> MixColumns::ap_const_lv32_1 = "1";
const sc_lv<32> MixColumns::ap_const_lv32_4 = "100";
const sc_lv<32> MixColumns::ap_const_lv32_6 = "110";
const sc_lv<32> MixColumns::ap_const_lv32_8 = "1000";
const sc_lv<32> MixColumns::ap_const_lv32_2 = "10";
const sc_lv<32> MixColumns::ap_const_lv32_5 = "101";
const sc_lv<32> MixColumns::ap_const_lv32_3 = "11";
const sc_lv<32> MixColumns::ap_const_lv32_7 = "111";
const sc_lv<32> MixColumns::ap_const_lv32_9 = "1001";
const sc_lv<32> MixColumns::ap_const_lv32_B = "1011";
const sc_lv<1> MixColumns::ap_const_lv1_0 = "0";
const sc_lv<5> MixColumns::ap_const_lv5_0 = "00000";
const sc_lv<32> MixColumns::ap_const_lv32_A = "1010";
const sc_lv<32> MixColumns::ap_const_lv32_C = "1100";
const sc_lv<64> MixColumns::ap_const_lv64_0 = "0000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<64> MixColumns::ap_const_lv64_1 = "1";
const sc_lv<64> MixColumns::ap_const_lv64_2 = "10";
const sc_lv<64> MixColumns::ap_const_lv64_3 = "11";
const sc_lv<64> MixColumns::ap_const_lv64_4 = "100";
const sc_lv<64> MixColumns::ap_const_lv64_5 = "101";
const sc_lv<64> MixColumns::ap_const_lv64_6 = "110";
const sc_lv<64> MixColumns::ap_const_lv64_7 = "111";
const sc_lv<64> MixColumns::ap_const_lv64_8 = "1000";
const sc_lv<64> MixColumns::ap_const_lv64_9 = "1001";
const sc_lv<64> MixColumns::ap_const_lv64_A = "1010";
const sc_lv<64> MixColumns::ap_const_lv64_B = "1011";
const sc_lv<64> MixColumns::ap_const_lv64_C = "1100";
const sc_lv<64> MixColumns::ap_const_lv64_D = "1101";
const sc_lv<64> MixColumns::ap_const_lv64_E = "1110";
const sc_lv<64> MixColumns::ap_const_lv64_F = "1111";
const sc_lv<56> MixColumns::ap_const_lv56_1 = "1";
const sc_lv<56> MixColumns::ap_const_lv56_2 = "10";
const sc_lv<5> MixColumns::ap_const_lv5_10 = "10000";
const sc_lv<5> MixColumns::ap_const_lv5_1 = "1";
const sc_lv<1> MixColumns::ap_const_lv1_1 = "1";
const bool MixColumns::ap_const_boolean_1 = true;

MixColumns::MixColumns(sc_module_name name) : sc_module(name), mVcdFile(0) {
    cipher_U = new MixColumns_cipher("cipher_U");
    cipher_U->clk(ap_clk);
    cipher_U->reset(ap_rst);
    cipher_U->address0(cipher_address0);
    cipher_U->ce0(cipher_ce0);
    cipher_U->q0(cipher_q0);
    cipher_U->address1(cipher_address1);
    cipher_U->ce1(cipher_ce1);
    cipher_U->q1(cipher_q1);
    cipher_U->address2(cipher_address2);
    cipher_U->ce2(cipher_ce2);
    cipher_U->q2(cipher_q2);
    cipher_U->address3(cipher_address3);
    cipher_U->ce3(cipher_ce3);
    cipher_U->q3(cipher_q3);
    tmp_state_U = new ShiftRows_tmp_state("tmp_state_U");
    tmp_state_U->clk(ap_clk);
    tmp_state_U->reset(ap_rst);
    tmp_state_U->address0(tmp_state_address0);
    tmp_state_U->ce0(tmp_state_ce0);
    tmp_state_U->we0(tmp_state_we0);
    tmp_state_U->d0(tmp_state_d0);
    tmp_state_U->q0(tmp_state_q0);
    tmp_state_U->address1(tmp_state_address1);
    tmp_state_U->ce1(tmp_state_ce1);
    tmp_state_U->we1(tmp_state_we1);
    tmp_state_U->d1(tmp_state_d1);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_addr10_fu_822_p3);
    sensitive << ( state_q1 );

    SC_METHOD(thread_addr11_fu_831_p3);
    sensitive << ( state_q0 );

    SC_METHOD(thread_addr12_fu_878_p3);
    sensitive << ( reg_643 );

    SC_METHOD(thread_addr13_fu_887_p3);
    sensitive << ( state_q1 );

    SC_METHOD(thread_addr14_fu_896_p3);
    sensitive << ( reg_652 );

    SC_METHOD(thread_addr15_fu_905_p3);
    sensitive << ( state_q1 );

    SC_METHOD(thread_addr16_fu_952_p3);
    sensitive << ( reg_647 );

    SC_METHOD(thread_addr17_fu_961_p3);
    sensitive << ( state_q1 );

    SC_METHOD(thread_addr18_fu_970_p3);
    sensitive << ( state_q1 );

    SC_METHOD(thread_addr19_fu_979_p3);
    sensitive << ( state_q0 );

    SC_METHOD(thread_addr1_fu_665_p3);
    sensitive << ( state_q0 );

    SC_METHOD(thread_addr20_fu_1026_p3);
    sensitive << ( reg_643 );

    SC_METHOD(thread_addr21_fu_1035_p3);
    sensitive << ( state_q1 );

    SC_METHOD(thread_addr22_fu_1044_p3);
    sensitive << ( reg_647 );

    SC_METHOD(thread_addr23_fu_1053_p3);
    sensitive << ( state_q1 );

    SC_METHOD(thread_addr24_fu_1100_p3);
    sensitive << ( reg_652 );

    SC_METHOD(thread_addr25_fu_1109_p3);
    sensitive << ( state_q1 );

    SC_METHOD(thread_addr26_fu_1118_p3);
    sensitive << ( state_q1 );

    SC_METHOD(thread_addr27_fu_1127_p3);
    sensitive << ( state_q0 );

    SC_METHOD(thread_addr28_fu_1174_p3);
    sensitive << ( reg_643 );

    SC_METHOD(thread_addr29_fu_1183_p3);
    sensitive << ( state_q1 );

    SC_METHOD(thread_addr2_fu_674_p3);
    sensitive << ( state_q0 );

    SC_METHOD(thread_addr30_fu_1192_p3);
    sensitive << ( reg_652 );

    SC_METHOD(thread_addr31_fu_1201_p3);
    sensitive << ( state_q1 );

    SC_METHOD(thread_addr3_fu_683_p3);
    sensitive << ( state_q1 );

    SC_METHOD(thread_addr4_fu_730_p3);
    sensitive << ( reg_647 );

    SC_METHOD(thread_addr5_fu_739_p3);
    sensitive << ( state_q1 );

    SC_METHOD(thread_addr6_fu_748_p3);
    sensitive << ( reg_638 );

    SC_METHOD(thread_addr7_fu_757_p3);
    sensitive << ( state_q1 );

    SC_METHOD(thread_addr8_fu_804_p3);
    sensitive << ( reg_652 );

    SC_METHOD(thread_addr9_fu_813_p3);
    sensitive << ( state_q1 );

    SC_METHOD(thread_addr_fu_656_p3);
    sensitive << ( reg_638 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state10);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state11);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state12);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state13);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state9);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( tmp_16_fu_1248_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( tmp_16_fu_1248_p2 );

    SC_METHOD(thread_cipher_address0);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( addr_fu_656_p3 );
    sensitive << ( addr4_fu_730_p3 );
    sensitive << ( addr8_fu_804_p3 );
    sensitive << ( addr12_fu_878_p3 );
    sensitive << ( addr16_fu_952_p3 );
    sensitive << ( addr20_fu_1026_p3 );
    sensitive << ( addr24_fu_1100_p3 );
    sensitive << ( addr28_fu_1174_p3 );

    SC_METHOD(thread_cipher_address1);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( addr1_fu_665_p3 );
    sensitive << ( addr5_fu_739_p3 );
    sensitive << ( addr9_fu_813_p3 );
    sensitive << ( addr13_fu_887_p3 );
    sensitive << ( addr17_fu_961_p3 );
    sensitive << ( addr21_fu_1035_p3 );
    sensitive << ( addr25_fu_1109_p3 );
    sensitive << ( addr29_fu_1183_p3 );

    SC_METHOD(thread_cipher_address2);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( addr2_fu_674_p3 );
    sensitive << ( addr6_fu_748_p3 );
    sensitive << ( addr10_fu_822_p3 );
    sensitive << ( addr14_fu_896_p3 );
    sensitive << ( addr18_fu_970_p3 );
    sensitive << ( addr22_fu_1044_p3 );
    sensitive << ( addr26_fu_1118_p3 );
    sensitive << ( addr30_fu_1192_p3 );

    SC_METHOD(thread_cipher_address3);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( addr3_fu_683_p3 );
    sensitive << ( addr7_fu_757_p3 );
    sensitive << ( addr11_fu_831_p3 );
    sensitive << ( addr15_fu_905_p3 );
    sensitive << ( addr19_fu_979_p3 );
    sensitive << ( addr23_fu_1053_p3 );
    sensitive << ( addr27_fu_1127_p3 );
    sensitive << ( addr31_fu_1201_p3 );

    SC_METHOD(thread_cipher_ce0);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state10 );

    SC_METHOD(thread_cipher_ce1);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state10 );

    SC_METHOD(thread_cipher_ce2);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state10 );

    SC_METHOD(thread_cipher_ce3);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state10 );

    SC_METHOD(thread_i_2_fu_1254_p2);
    sensitive << ( i_reg_627 );

    SC_METHOD(thread_state_address0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( tmp_17_reg_1513 );
    sensitive << ( ap_CS_fsm_state13 );

    SC_METHOD(thread_state_address1);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_state_ce0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state13 );

    SC_METHOD(thread_state_ce1);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_state_d0);
    sensitive << ( tmp_state_q0 );
    sensitive << ( ap_CS_fsm_state13 );

    SC_METHOD(thread_state_we0);
    sensitive << ( ap_CS_fsm_state13 );

    SC_METHOD(thread_tmp10_fu_859_p2);
    sensitive << ( state_q1 );
    sensitive << ( reg_652 );

    SC_METHOD(thread_tmp11_fu_865_p2);
    sensitive << ( cipher_q2 );
    sensitive << ( cipher_q3 );

    SC_METHOD(thread_tmp12_fu_914_p2);
    sensitive << ( reg_638 );
    sensitive << ( reg_652 );

    SC_METHOD(thread_tmp13_fu_920_p2);
    sensitive << ( cipher_q0 );
    sensitive << ( cipher_q1 );

    SC_METHOD(thread_tmp14_fu_933_p2);
    sensitive << ( reg_638 );
    sensitive << ( reg_643 );

    SC_METHOD(thread_tmp15_fu_939_p2);
    sensitive << ( cipher_q2 );
    sensitive << ( cipher_q3 );

    SC_METHOD(thread_tmp16_fu_988_p2);
    sensitive << ( cipher_q0 );
    sensitive << ( cipher_q1 );

    SC_METHOD(thread_tmp17_fu_994_p2);
    sensitive << ( state_q1 );
    sensitive << ( reg_643 );

    SC_METHOD(thread_tmp18_fu_1007_p2);
    sensitive << ( state_q1 );
    sensitive << ( reg_647 );

    SC_METHOD(thread_tmp19_fu_1013_p2);
    sensitive << ( cipher_q2 );
    sensitive << ( cipher_q3 );

    SC_METHOD(thread_tmp1_fu_692_p2);
    sensitive << ( cipher_q0 );
    sensitive << ( cipher_q1 );

    SC_METHOD(thread_tmp20_fu_1062_p2);
    sensitive << ( reg_638 );
    sensitive << ( reg_647 );

    SC_METHOD(thread_tmp21_fu_1068_p2);
    sensitive << ( cipher_q0 );
    sensitive << ( cipher_q1 );

    SC_METHOD(thread_tmp22_fu_1081_p2);
    sensitive << ( reg_638 );
    sensitive << ( reg_643 );

    SC_METHOD(thread_tmp23_fu_1087_p2);
    sensitive << ( cipher_q2 );
    sensitive << ( cipher_q3 );

    SC_METHOD(thread_tmp24_fu_1136_p2);
    sensitive << ( cipher_q0 );
    sensitive << ( cipher_q1 );

    SC_METHOD(thread_tmp25_fu_1142_p2);
    sensitive << ( state_q1 );
    sensitive << ( reg_643 );

    SC_METHOD(thread_tmp26_fu_1155_p2);
    sensitive << ( state_q1 );
    sensitive << ( reg_652 );

    SC_METHOD(thread_tmp27_fu_1161_p2);
    sensitive << ( cipher_q2 );
    sensitive << ( cipher_q3 );

    SC_METHOD(thread_tmp28_fu_1210_p2);
    sensitive << ( reg_638 );
    sensitive << ( reg_652 );

    SC_METHOD(thread_tmp29_fu_1216_p2);
    sensitive << ( cipher_q0 );
    sensitive << ( cipher_q1 );

    SC_METHOD(thread_tmp2_fu_698_p2);
    sensitive << ( state_q1 );
    sensitive << ( reg_647 );

    SC_METHOD(thread_tmp30_fu_1229_p2);
    sensitive << ( reg_638 );
    sensitive << ( reg_643 );

    SC_METHOD(thread_tmp31_fu_1235_p2);
    sensitive << ( cipher_q2 );
    sensitive << ( cipher_q3 );

    SC_METHOD(thread_tmp3_fu_711_p2);
    sensitive << ( state_q1 );
    sensitive << ( reg_638 );

    SC_METHOD(thread_tmp4_fu_717_p2);
    sensitive << ( cipher_q2 );
    sensitive << ( cipher_q3 );

    SC_METHOD(thread_tmp5_fu_766_p2);
    sensitive << ( reg_638 );
    sensitive << ( reg_643 );

    SC_METHOD(thread_tmp6_fu_772_p2);
    sensitive << ( cipher_q0 );
    sensitive << ( cipher_q1 );

    SC_METHOD(thread_tmp7_fu_785_p2);
    sensitive << ( reg_643 );
    sensitive << ( reg_647 );

    SC_METHOD(thread_tmp8_fu_791_p2);
    sensitive << ( cipher_q2 );
    sensitive << ( cipher_q3 );

    SC_METHOD(thread_tmp9_fu_840_p2);
    sensitive << ( cipher_q0 );
    sensitive << ( cipher_q1 );

    SC_METHOD(thread_tmp_10_fu_1074_p2);
    sensitive << ( tmp21_fu_1068_p2 );
    sensitive << ( tmp20_fu_1062_p2 );

    SC_METHOD(thread_tmp_11_fu_1093_p2);
    sensitive << ( tmp23_fu_1087_p2 );
    sensitive << ( tmp22_fu_1081_p2 );

    SC_METHOD(thread_tmp_12_fu_1148_p2);
    sensitive << ( tmp25_fu_1142_p2 );
    sensitive << ( tmp24_fu_1136_p2 );

    SC_METHOD(thread_tmp_13_fu_1167_p2);
    sensitive << ( tmp27_fu_1161_p2 );
    sensitive << ( tmp26_fu_1155_p2 );

    SC_METHOD(thread_tmp_14_fu_1222_p2);
    sensitive << ( tmp29_fu_1216_p2 );
    sensitive << ( tmp28_fu_1210_p2 );

    SC_METHOD(thread_tmp_15_fu_1241_p2);
    sensitive << ( tmp31_fu_1235_p2 );
    sensitive << ( tmp30_fu_1229_p2 );

    SC_METHOD(thread_tmp_16_fu_1248_p2);
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( i_reg_627 );

    SC_METHOD(thread_tmp_17_fu_1260_p1);
    sensitive << ( i_reg_627 );

    SC_METHOD(thread_tmp_1_fu_778_p2);
    sensitive << ( tmp6_fu_772_p2 );
    sensitive << ( tmp5_fu_766_p2 );

    SC_METHOD(thread_tmp_2_fu_797_p2);
    sensitive << ( tmp8_fu_791_p2 );
    sensitive << ( tmp7_fu_785_p2 );

    SC_METHOD(thread_tmp_3_fu_723_p2);
    sensitive << ( tmp4_fu_717_p2 );
    sensitive << ( tmp3_fu_711_p2 );

    SC_METHOD(thread_tmp_4_fu_926_p2);
    sensitive << ( tmp13_fu_920_p2 );
    sensitive << ( tmp12_fu_914_p2 );

    SC_METHOD(thread_tmp_5_fu_945_p2);
    sensitive << ( tmp15_fu_939_p2 );
    sensitive << ( tmp14_fu_933_p2 );

    SC_METHOD(thread_tmp_6_fu_1000_p2);
    sensitive << ( tmp17_fu_994_p2 );
    sensitive << ( tmp16_fu_988_p2 );

    SC_METHOD(thread_tmp_7_fu_1019_p2);
    sensitive << ( tmp19_fu_1013_p2 );
    sensitive << ( tmp18_fu_1007_p2 );

    SC_METHOD(thread_tmp_8_fu_852_p2);
    sensitive << ( tmp_fu_846_p2 );
    sensitive << ( tmp9_fu_840_p2 );

    SC_METHOD(thread_tmp_9_fu_704_p2);
    sensitive << ( tmp2_fu_698_p2 );
    sensitive << ( tmp1_fu_692_p2 );

    SC_METHOD(thread_tmp_fu_846_p2);
    sensitive << ( state_q1 );
    sensitive << ( reg_643 );

    SC_METHOD(thread_tmp_s_fu_871_p2);
    sensitive << ( tmp11_fu_865_p2 );
    sensitive << ( tmp10_fu_859_p2 );

    SC_METHOD(thread_tmp_state_address0);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( tmp_17_fu_1260_p1 );
    sensitive << ( ap_CS_fsm_state11 );

    SC_METHOD(thread_tmp_state_address1);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state11 );

    SC_METHOD(thread_tmp_state_ce0);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state11 );

    SC_METHOD(thread_tmp_state_ce1);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state11 );

    SC_METHOD(thread_tmp_state_d0);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( tmp_9_fu_704_p2 );
    sensitive << ( tmp_1_fu_778_p2 );
    sensitive << ( tmp_8_fu_852_p2 );
    sensitive << ( tmp_4_fu_926_p2 );
    sensitive << ( tmp_6_fu_1000_p2 );
    sensitive << ( tmp_10_fu_1074_p2 );
    sensitive << ( tmp_12_fu_1148_p2 );
    sensitive << ( tmp_14_fu_1222_p2 );

    SC_METHOD(thread_tmp_state_d1);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( tmp_3_fu_723_p2 );
    sensitive << ( tmp_2_fu_797_p2 );
    sensitive << ( tmp_s_fu_871_p2 );
    sensitive << ( tmp_5_fu_945_p2 );
    sensitive << ( tmp_7_fu_1019_p2 );
    sensitive << ( tmp_11_fu_1093_p2 );
    sensitive << ( tmp_13_fu_1167_p2 );
    sensitive << ( tmp_15_fu_1241_p2 );

    SC_METHOD(thread_tmp_state_we0);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state11 );

    SC_METHOD(thread_tmp_state_we1);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state11 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( tmp_16_fu_1248_p2 );

    ap_CS_fsm = "0000000000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "MixColumns_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, state_address0, "(port)state_address0");
    sc_trace(mVcdFile, state_ce0, "(port)state_ce0");
    sc_trace(mVcdFile, state_we0, "(port)state_we0");
    sc_trace(mVcdFile, state_d0, "(port)state_d0");
    sc_trace(mVcdFile, state_q0, "(port)state_q0");
    sc_trace(mVcdFile, state_address1, "(port)state_address1");
    sc_trace(mVcdFile, state_ce1, "(port)state_ce1");
    sc_trace(mVcdFile, state_q1, "(port)state_q1");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, cipher_address0, "cipher_address0");
    sc_trace(mVcdFile, cipher_ce0, "cipher_ce0");
    sc_trace(mVcdFile, cipher_q0, "cipher_q0");
    sc_trace(mVcdFile, cipher_address1, "cipher_address1");
    sc_trace(mVcdFile, cipher_ce1, "cipher_ce1");
    sc_trace(mVcdFile, cipher_q1, "cipher_q1");
    sc_trace(mVcdFile, cipher_address2, "cipher_address2");
    sc_trace(mVcdFile, cipher_ce2, "cipher_ce2");
    sc_trace(mVcdFile, cipher_q2, "cipher_q2");
    sc_trace(mVcdFile, cipher_address3, "cipher_address3");
    sc_trace(mVcdFile, cipher_ce3, "cipher_ce3");
    sc_trace(mVcdFile, cipher_q3, "cipher_q3");
    sc_trace(mVcdFile, reg_638, "reg_638");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, ap_CS_fsm_state9, "ap_CS_fsm_state9");
    sc_trace(mVcdFile, reg_643, "reg_643");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, reg_647, "reg_647");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, reg_652, "reg_652");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, ap_CS_fsm_state10, "ap_CS_fsm_state10");
    sc_trace(mVcdFile, i_2_fu_1254_p2, "i_2_fu_1254_p2");
    sc_trace(mVcdFile, i_2_reg_1508, "i_2_reg_1508");
    sc_trace(mVcdFile, ap_CS_fsm_state12, "ap_CS_fsm_state12");
    sc_trace(mVcdFile, tmp_17_fu_1260_p1, "tmp_17_fu_1260_p1");
    sc_trace(mVcdFile, tmp_17_reg_1513, "tmp_17_reg_1513");
    sc_trace(mVcdFile, tmp_16_fu_1248_p2, "tmp_16_fu_1248_p2");
    sc_trace(mVcdFile, tmp_state_address0, "tmp_state_address0");
    sc_trace(mVcdFile, tmp_state_ce0, "tmp_state_ce0");
    sc_trace(mVcdFile, tmp_state_we0, "tmp_state_we0");
    sc_trace(mVcdFile, tmp_state_d0, "tmp_state_d0");
    sc_trace(mVcdFile, tmp_state_q0, "tmp_state_q0");
    sc_trace(mVcdFile, tmp_state_address1, "tmp_state_address1");
    sc_trace(mVcdFile, tmp_state_ce1, "tmp_state_ce1");
    sc_trace(mVcdFile, tmp_state_we1, "tmp_state_we1");
    sc_trace(mVcdFile, tmp_state_d1, "tmp_state_d1");
    sc_trace(mVcdFile, i_reg_627, "i_reg_627");
    sc_trace(mVcdFile, ap_CS_fsm_state11, "ap_CS_fsm_state11");
    sc_trace(mVcdFile, ap_CS_fsm_state13, "ap_CS_fsm_state13");
    sc_trace(mVcdFile, addr_fu_656_p3, "addr_fu_656_p3");
    sc_trace(mVcdFile, addr1_fu_665_p3, "addr1_fu_665_p3");
    sc_trace(mVcdFile, addr2_fu_674_p3, "addr2_fu_674_p3");
    sc_trace(mVcdFile, addr3_fu_683_p3, "addr3_fu_683_p3");
    sc_trace(mVcdFile, addr4_fu_730_p3, "addr4_fu_730_p3");
    sc_trace(mVcdFile, addr5_fu_739_p3, "addr5_fu_739_p3");
    sc_trace(mVcdFile, addr6_fu_748_p3, "addr6_fu_748_p3");
    sc_trace(mVcdFile, addr7_fu_757_p3, "addr7_fu_757_p3");
    sc_trace(mVcdFile, addr8_fu_804_p3, "addr8_fu_804_p3");
    sc_trace(mVcdFile, addr9_fu_813_p3, "addr9_fu_813_p3");
    sc_trace(mVcdFile, addr10_fu_822_p3, "addr10_fu_822_p3");
    sc_trace(mVcdFile, addr11_fu_831_p3, "addr11_fu_831_p3");
    sc_trace(mVcdFile, addr12_fu_878_p3, "addr12_fu_878_p3");
    sc_trace(mVcdFile, addr13_fu_887_p3, "addr13_fu_887_p3");
    sc_trace(mVcdFile, addr14_fu_896_p3, "addr14_fu_896_p3");
    sc_trace(mVcdFile, addr15_fu_905_p3, "addr15_fu_905_p3");
    sc_trace(mVcdFile, addr16_fu_952_p3, "addr16_fu_952_p3");
    sc_trace(mVcdFile, addr17_fu_961_p3, "addr17_fu_961_p3");
    sc_trace(mVcdFile, addr18_fu_970_p3, "addr18_fu_970_p3");
    sc_trace(mVcdFile, addr19_fu_979_p3, "addr19_fu_979_p3");
    sc_trace(mVcdFile, addr20_fu_1026_p3, "addr20_fu_1026_p3");
    sc_trace(mVcdFile, addr21_fu_1035_p3, "addr21_fu_1035_p3");
    sc_trace(mVcdFile, addr22_fu_1044_p3, "addr22_fu_1044_p3");
    sc_trace(mVcdFile, addr23_fu_1053_p3, "addr23_fu_1053_p3");
    sc_trace(mVcdFile, addr24_fu_1100_p3, "addr24_fu_1100_p3");
    sc_trace(mVcdFile, addr25_fu_1109_p3, "addr25_fu_1109_p3");
    sc_trace(mVcdFile, addr26_fu_1118_p3, "addr26_fu_1118_p3");
    sc_trace(mVcdFile, addr27_fu_1127_p3, "addr27_fu_1127_p3");
    sc_trace(mVcdFile, addr28_fu_1174_p3, "addr28_fu_1174_p3");
    sc_trace(mVcdFile, addr29_fu_1183_p3, "addr29_fu_1183_p3");
    sc_trace(mVcdFile, addr30_fu_1192_p3, "addr30_fu_1192_p3");
    sc_trace(mVcdFile, addr31_fu_1201_p3, "addr31_fu_1201_p3");
    sc_trace(mVcdFile, tmp_9_fu_704_p2, "tmp_9_fu_704_p2");
    sc_trace(mVcdFile, tmp_3_fu_723_p2, "tmp_3_fu_723_p2");
    sc_trace(mVcdFile, tmp_1_fu_778_p2, "tmp_1_fu_778_p2");
    sc_trace(mVcdFile, tmp_2_fu_797_p2, "tmp_2_fu_797_p2");
    sc_trace(mVcdFile, tmp_8_fu_852_p2, "tmp_8_fu_852_p2");
    sc_trace(mVcdFile, tmp_s_fu_871_p2, "tmp_s_fu_871_p2");
    sc_trace(mVcdFile, tmp_4_fu_926_p2, "tmp_4_fu_926_p2");
    sc_trace(mVcdFile, tmp_5_fu_945_p2, "tmp_5_fu_945_p2");
    sc_trace(mVcdFile, tmp_6_fu_1000_p2, "tmp_6_fu_1000_p2");
    sc_trace(mVcdFile, tmp_7_fu_1019_p2, "tmp_7_fu_1019_p2");
    sc_trace(mVcdFile, tmp_10_fu_1074_p2, "tmp_10_fu_1074_p2");
    sc_trace(mVcdFile, tmp_11_fu_1093_p2, "tmp_11_fu_1093_p2");
    sc_trace(mVcdFile, tmp_12_fu_1148_p2, "tmp_12_fu_1148_p2");
    sc_trace(mVcdFile, tmp_13_fu_1167_p2, "tmp_13_fu_1167_p2");
    sc_trace(mVcdFile, tmp_14_fu_1222_p2, "tmp_14_fu_1222_p2");
    sc_trace(mVcdFile, tmp_15_fu_1241_p2, "tmp_15_fu_1241_p2");
    sc_trace(mVcdFile, tmp2_fu_698_p2, "tmp2_fu_698_p2");
    sc_trace(mVcdFile, tmp1_fu_692_p2, "tmp1_fu_692_p2");
    sc_trace(mVcdFile, tmp4_fu_717_p2, "tmp4_fu_717_p2");
    sc_trace(mVcdFile, tmp3_fu_711_p2, "tmp3_fu_711_p2");
    sc_trace(mVcdFile, tmp6_fu_772_p2, "tmp6_fu_772_p2");
    sc_trace(mVcdFile, tmp5_fu_766_p2, "tmp5_fu_766_p2");
    sc_trace(mVcdFile, tmp8_fu_791_p2, "tmp8_fu_791_p2");
    sc_trace(mVcdFile, tmp7_fu_785_p2, "tmp7_fu_785_p2");
    sc_trace(mVcdFile, tmp_fu_846_p2, "tmp_fu_846_p2");
    sc_trace(mVcdFile, tmp9_fu_840_p2, "tmp9_fu_840_p2");
    sc_trace(mVcdFile, tmp11_fu_865_p2, "tmp11_fu_865_p2");
    sc_trace(mVcdFile, tmp10_fu_859_p2, "tmp10_fu_859_p2");
    sc_trace(mVcdFile, tmp13_fu_920_p2, "tmp13_fu_920_p2");
    sc_trace(mVcdFile, tmp12_fu_914_p2, "tmp12_fu_914_p2");
    sc_trace(mVcdFile, tmp15_fu_939_p2, "tmp15_fu_939_p2");
    sc_trace(mVcdFile, tmp14_fu_933_p2, "tmp14_fu_933_p2");
    sc_trace(mVcdFile, tmp17_fu_994_p2, "tmp17_fu_994_p2");
    sc_trace(mVcdFile, tmp16_fu_988_p2, "tmp16_fu_988_p2");
    sc_trace(mVcdFile, tmp19_fu_1013_p2, "tmp19_fu_1013_p2");
    sc_trace(mVcdFile, tmp18_fu_1007_p2, "tmp18_fu_1007_p2");
    sc_trace(mVcdFile, tmp21_fu_1068_p2, "tmp21_fu_1068_p2");
    sc_trace(mVcdFile, tmp20_fu_1062_p2, "tmp20_fu_1062_p2");
    sc_trace(mVcdFile, tmp23_fu_1087_p2, "tmp23_fu_1087_p2");
    sc_trace(mVcdFile, tmp22_fu_1081_p2, "tmp22_fu_1081_p2");
    sc_trace(mVcdFile, tmp25_fu_1142_p2, "tmp25_fu_1142_p2");
    sc_trace(mVcdFile, tmp24_fu_1136_p2, "tmp24_fu_1136_p2");
    sc_trace(mVcdFile, tmp27_fu_1161_p2, "tmp27_fu_1161_p2");
    sc_trace(mVcdFile, tmp26_fu_1155_p2, "tmp26_fu_1155_p2");
    sc_trace(mVcdFile, tmp29_fu_1216_p2, "tmp29_fu_1216_p2");
    sc_trace(mVcdFile, tmp28_fu_1210_p2, "tmp28_fu_1210_p2");
    sc_trace(mVcdFile, tmp31_fu_1235_p2, "tmp31_fu_1235_p2");
    sc_trace(mVcdFile, tmp30_fu_1229_p2, "tmp30_fu_1229_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

MixColumns::~MixColumns() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete cipher_U;
    delete tmp_state_U;
}

void MixColumns::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        i_reg_627 = i_2_reg_1508.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        i_reg_627 = ap_const_lv5_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()))) {
        reg_638 = state_q1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        reg_638 = state_q0.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        reg_647 = state_q0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        reg_647 = state_q1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        i_2_reg_1508 = i_2_fu_1254_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
        reg_643 = state_q0.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()))) {
        reg_652 = state_q0.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) && esl_seteq<1,1,1>(tmp_16_fu_1248_p2.read(), ap_const_lv1_0))) {
        tmp_17_reg_1513 = tmp_17_fu_1260_p1.read();
    }
}

void MixColumns::thread_addr10_fu_822_p3() {
    addr10_fu_822_p3 = esl_concat<56,8>(ap_const_lv56_1, state_q1.read());
}

void MixColumns::thread_addr11_fu_831_p3() {
    addr11_fu_831_p3 = esl_concat<56,8>(ap_const_lv56_2, state_q0.read());
}

void MixColumns::thread_addr12_fu_878_p3() {
    addr12_fu_878_p3 = esl_concat<56,8>(ap_const_lv56_1, reg_643.read());
}

void MixColumns::thread_addr13_fu_887_p3() {
    addr13_fu_887_p3 = esl_concat<56,8>(ap_const_lv56_2, state_q1.read());
}

void MixColumns::thread_addr14_fu_896_p3() {
    addr14_fu_896_p3 = esl_concat<56,8>(ap_const_lv56_2, reg_652.read());
}

void MixColumns::thread_addr15_fu_905_p3() {
    addr15_fu_905_p3 = esl_concat<56,8>(ap_const_lv56_1, state_q1.read());
}

void MixColumns::thread_addr16_fu_952_p3() {
    addr16_fu_952_p3 = esl_concat<56,8>(ap_const_lv56_1, reg_647.read());
}

void MixColumns::thread_addr17_fu_961_p3() {
    addr17_fu_961_p3 = esl_concat<56,8>(ap_const_lv56_2, state_q1.read());
}

void MixColumns::thread_addr18_fu_970_p3() {
    addr18_fu_970_p3 = esl_concat<56,8>(ap_const_lv56_1, state_q1.read());
}

void MixColumns::thread_addr19_fu_979_p3() {
    addr19_fu_979_p3 = esl_concat<56,8>(ap_const_lv56_2, state_q0.read());
}

void MixColumns::thread_addr1_fu_665_p3() {
    addr1_fu_665_p3 = esl_concat<56,8>(ap_const_lv56_2, state_q0.read());
}

void MixColumns::thread_addr20_fu_1026_p3() {
    addr20_fu_1026_p3 = esl_concat<56,8>(ap_const_lv56_1, reg_643.read());
}

void MixColumns::thread_addr21_fu_1035_p3() {
    addr21_fu_1035_p3 = esl_concat<56,8>(ap_const_lv56_2, state_q1.read());
}

void MixColumns::thread_addr22_fu_1044_p3() {
    addr22_fu_1044_p3 = esl_concat<56,8>(ap_const_lv56_2, reg_647.read());
}

void MixColumns::thread_addr23_fu_1053_p3() {
    addr23_fu_1053_p3 = esl_concat<56,8>(ap_const_lv56_1, state_q1.read());
}

void MixColumns::thread_addr24_fu_1100_p3() {
    addr24_fu_1100_p3 = esl_concat<56,8>(ap_const_lv56_1, reg_652.read());
}

void MixColumns::thread_addr25_fu_1109_p3() {
    addr25_fu_1109_p3 = esl_concat<56,8>(ap_const_lv56_2, state_q1.read());
}

void MixColumns::thread_addr26_fu_1118_p3() {
    addr26_fu_1118_p3 = esl_concat<56,8>(ap_const_lv56_1, state_q1.read());
}

void MixColumns::thread_addr27_fu_1127_p3() {
    addr27_fu_1127_p3 = esl_concat<56,8>(ap_const_lv56_2, state_q0.read());
}

void MixColumns::thread_addr28_fu_1174_p3() {
    addr28_fu_1174_p3 = esl_concat<56,8>(ap_const_lv56_1, reg_643.read());
}

void MixColumns::thread_addr29_fu_1183_p3() {
    addr29_fu_1183_p3 = esl_concat<56,8>(ap_const_lv56_2, state_q1.read());
}

void MixColumns::thread_addr2_fu_674_p3() {
    addr2_fu_674_p3 = esl_concat<56,8>(ap_const_lv56_1, state_q0.read());
}

void MixColumns::thread_addr30_fu_1192_p3() {
    addr30_fu_1192_p3 = esl_concat<56,8>(ap_const_lv56_2, reg_652.read());
}

void MixColumns::thread_addr31_fu_1201_p3() {
    addr31_fu_1201_p3 = esl_concat<56,8>(ap_const_lv56_1, state_q1.read());
}

void MixColumns::thread_addr3_fu_683_p3() {
    addr3_fu_683_p3 = esl_concat<56,8>(ap_const_lv56_2, state_q1.read());
}

void MixColumns::thread_addr4_fu_730_p3() {
    addr4_fu_730_p3 = esl_concat<56,8>(ap_const_lv56_1, reg_647.read());
}

void MixColumns::thread_addr5_fu_739_p3() {
    addr5_fu_739_p3 = esl_concat<56,8>(ap_const_lv56_2, state_q1.read());
}

void MixColumns::thread_addr6_fu_748_p3() {
    addr6_fu_748_p3 = esl_concat<56,8>(ap_const_lv56_2, reg_638.read());
}

void MixColumns::thread_addr7_fu_757_p3() {
    addr7_fu_757_p3 = esl_concat<56,8>(ap_const_lv56_1, state_q1.read());
}

void MixColumns::thread_addr8_fu_804_p3() {
    addr8_fu_804_p3 = esl_concat<56,8>(ap_const_lv56_1, reg_652.read());
}

void MixColumns::thread_addr9_fu_813_p3() {
    addr9_fu_813_p3 = esl_concat<56,8>(ap_const_lv56_2, state_q1.read());
}

void MixColumns::thread_addr_fu_656_p3() {
    addr_fu_656_p3 = esl_concat<56,8>(ap_const_lv56_1, reg_638.read());
}

void MixColumns::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void MixColumns::thread_ap_CS_fsm_state10() {
    ap_CS_fsm_state10 = ap_CS_fsm.read()[9];
}

void MixColumns::thread_ap_CS_fsm_state11() {
    ap_CS_fsm_state11 = ap_CS_fsm.read()[10];
}

void MixColumns::thread_ap_CS_fsm_state12() {
    ap_CS_fsm_state12 = ap_CS_fsm.read()[11];
}

void MixColumns::thread_ap_CS_fsm_state13() {
    ap_CS_fsm_state13 = ap_CS_fsm.read()[12];
}

void MixColumns::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void MixColumns::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void MixColumns::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void MixColumns::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void MixColumns::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void MixColumns::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[6];
}

void MixColumns::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read()[7];
}

void MixColumns::thread_ap_CS_fsm_state9() {
    ap_CS_fsm_state9 = ap_CS_fsm.read()[8];
}

void MixColumns::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) && 
          esl_seteq<1,1,1>(tmp_16_fu_1248_p2.read(), ap_const_lv1_1)))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void MixColumns::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void MixColumns::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) && 
         esl_seteq<1,1,1>(tmp_16_fu_1248_p2.read(), ap_const_lv1_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void MixColumns::thread_cipher_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        cipher_address0 =  (sc_lv<10>) (addr28_fu_1174_p3.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        cipher_address0 =  (sc_lv<10>) (addr24_fu_1100_p3.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        cipher_address0 =  (sc_lv<10>) (addr20_fu_1026_p3.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        cipher_address0 =  (sc_lv<10>) (addr16_fu_952_p3.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        cipher_address0 =  (sc_lv<10>) (addr12_fu_878_p3.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        cipher_address0 =  (sc_lv<10>) (addr8_fu_804_p3.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        cipher_address0 =  (sc_lv<10>) (addr4_fu_730_p3.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        cipher_address0 =  (sc_lv<10>) (addr_fu_656_p3.read());
    } else {
        cipher_address0 = "XXXXXXXXXX";
    }
}

void MixColumns::thread_cipher_address1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        cipher_address1 =  (sc_lv<10>) (addr29_fu_1183_p3.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        cipher_address1 =  (sc_lv<10>) (addr25_fu_1109_p3.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        cipher_address1 =  (sc_lv<10>) (addr21_fu_1035_p3.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        cipher_address1 =  (sc_lv<10>) (addr17_fu_961_p3.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        cipher_address1 =  (sc_lv<10>) (addr13_fu_887_p3.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        cipher_address1 =  (sc_lv<10>) (addr9_fu_813_p3.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        cipher_address1 =  (sc_lv<10>) (addr5_fu_739_p3.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        cipher_address1 =  (sc_lv<10>) (addr1_fu_665_p3.read());
    } else {
        cipher_address1 = "XXXXXXXXXX";
    }
}

void MixColumns::thread_cipher_address2() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        cipher_address2 =  (sc_lv<10>) (addr30_fu_1192_p3.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        cipher_address2 =  (sc_lv<10>) (addr26_fu_1118_p3.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        cipher_address2 =  (sc_lv<10>) (addr22_fu_1044_p3.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        cipher_address2 =  (sc_lv<10>) (addr18_fu_970_p3.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        cipher_address2 =  (sc_lv<10>) (addr14_fu_896_p3.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        cipher_address2 =  (sc_lv<10>) (addr10_fu_822_p3.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        cipher_address2 =  (sc_lv<10>) (addr6_fu_748_p3.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        cipher_address2 =  (sc_lv<10>) (addr2_fu_674_p3.read());
    } else {
        cipher_address2 = "XXXXXXXXXX";
    }
}

void MixColumns::thread_cipher_address3() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        cipher_address3 =  (sc_lv<10>) (addr31_fu_1201_p3.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        cipher_address3 =  (sc_lv<10>) (addr27_fu_1127_p3.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        cipher_address3 =  (sc_lv<10>) (addr23_fu_1053_p3.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        cipher_address3 =  (sc_lv<10>) (addr19_fu_979_p3.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        cipher_address3 =  (sc_lv<10>) (addr15_fu_905_p3.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        cipher_address3 =  (sc_lv<10>) (addr11_fu_831_p3.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        cipher_address3 =  (sc_lv<10>) (addr7_fu_757_p3.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        cipher_address3 =  (sc_lv<10>) (addr3_fu_683_p3.read());
    } else {
        cipher_address3 = "XXXXXXXXXX";
    }
}

void MixColumns::thread_cipher_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()))) {
        cipher_ce0 = ap_const_logic_1;
    } else {
        cipher_ce0 = ap_const_logic_0;
    }
}

void MixColumns::thread_cipher_ce1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()))) {
        cipher_ce1 = ap_const_logic_1;
    } else {
        cipher_ce1 = ap_const_logic_0;
    }
}

void MixColumns::thread_cipher_ce2() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()))) {
        cipher_ce2 = ap_const_logic_1;
    } else {
        cipher_ce2 = ap_const_logic_0;
    }
}

void MixColumns::thread_cipher_ce3() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()))) {
        cipher_ce3 = ap_const_logic_1;
    } else {
        cipher_ce3 = ap_const_logic_0;
    }
}

void MixColumns::thread_i_2_fu_1254_p2() {
    i_2_fu_1254_p2 = (!i_reg_627.read().is_01() || !ap_const_lv5_1.is_01())? sc_lv<5>(): (sc_biguint<5>(i_reg_627.read()) + sc_biguint<5>(ap_const_lv5_1));
}

void MixColumns::thread_state_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        state_address0 =  (sc_lv<4>) (tmp_17_reg_1513.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        state_address0 =  (sc_lv<4>) (ap_const_lv64_E);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        state_address0 =  (sc_lv<4>) (ap_const_lv64_C);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        state_address0 =  (sc_lv<4>) (ap_const_lv64_A);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        state_address0 =  (sc_lv<4>) (ap_const_lv64_8);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        state_address0 =  (sc_lv<4>) (ap_const_lv64_6);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        state_address0 =  (sc_lv<4>) (ap_const_lv64_4);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        state_address0 =  (sc_lv<4>) (ap_const_lv64_1);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        state_address0 =  (sc_lv<4>) (ap_const_lv64_0);
    } else {
        state_address0 =  (sc_lv<4>) ("XXXX");
    }
}

void MixColumns::thread_state_address1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        state_address1 =  (sc_lv<4>) (ap_const_lv64_F);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        state_address1 =  (sc_lv<4>) (ap_const_lv64_D);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        state_address1 =  (sc_lv<4>) (ap_const_lv64_B);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        state_address1 =  (sc_lv<4>) (ap_const_lv64_9);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        state_address1 =  (sc_lv<4>) (ap_const_lv64_7);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        state_address1 =  (sc_lv<4>) (ap_const_lv64_5);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        state_address1 =  (sc_lv<4>) (ap_const_lv64_3);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        state_address1 =  (sc_lv<4>) (ap_const_lv64_2);
    } else {
        state_address1 =  (sc_lv<4>) ("XXXX");
    }
}

void MixColumns::thread_state_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1)) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()))) {
        state_ce0 = ap_const_logic_1;
    } else {
        state_ce0 = ap_const_logic_0;
    }
}

void MixColumns::thread_state_ce1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()))) {
        state_ce1 = ap_const_logic_1;
    } else {
        state_ce1 = ap_const_logic_0;
    }
}

void MixColumns::thread_state_d0() {
    state_d0 = tmp_state_q0.read();
}

void MixColumns::thread_state_we0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        state_we0 = ap_const_logic_1;
    } else {
        state_we0 = ap_const_logic_0;
    }
}

void MixColumns::thread_tmp10_fu_859_p2() {
    tmp10_fu_859_p2 = (state_q1.read() ^ reg_652.read());
}

void MixColumns::thread_tmp11_fu_865_p2() {
    tmp11_fu_865_p2 = (cipher_q2.read() ^ cipher_q3.read());
}

void MixColumns::thread_tmp12_fu_914_p2() {
    tmp12_fu_914_p2 = (reg_638.read() ^ reg_652.read());
}

void MixColumns::thread_tmp13_fu_920_p2() {
    tmp13_fu_920_p2 = (cipher_q0.read() ^ cipher_q1.read());
}

void MixColumns::thread_tmp14_fu_933_p2() {
    tmp14_fu_933_p2 = (reg_643.read() ^ reg_638.read());
}

void MixColumns::thread_tmp15_fu_939_p2() {
    tmp15_fu_939_p2 = (cipher_q2.read() ^ cipher_q3.read());
}

void MixColumns::thread_tmp16_fu_988_p2() {
    tmp16_fu_988_p2 = (cipher_q1.read() ^ cipher_q0.read());
}

void MixColumns::thread_tmp17_fu_994_p2() {
    tmp17_fu_994_p2 = (reg_643.read() ^ state_q1.read());
}

void MixColumns::thread_tmp18_fu_1007_p2() {
    tmp18_fu_1007_p2 = (state_q1.read() ^ reg_647.read());
}

void MixColumns::thread_tmp19_fu_1013_p2() {
    tmp19_fu_1013_p2 = (cipher_q2.read() ^ cipher_q3.read());
}

void MixColumns::thread_tmp1_fu_692_p2() {
    tmp1_fu_692_p2 = (cipher_q1.read() ^ cipher_q0.read());
}

void MixColumns::thread_tmp20_fu_1062_p2() {
    tmp20_fu_1062_p2 = (reg_638.read() ^ reg_647.read());
}

void MixColumns::thread_tmp21_fu_1068_p2() {
    tmp21_fu_1068_p2 = (cipher_q0.read() ^ cipher_q1.read());
}

void MixColumns::thread_tmp22_fu_1081_p2() {
    tmp22_fu_1081_p2 = (reg_643.read() ^ reg_638.read());
}

void MixColumns::thread_tmp23_fu_1087_p2() {
    tmp23_fu_1087_p2 = (cipher_q2.read() ^ cipher_q3.read());
}

void MixColumns::thread_tmp24_fu_1136_p2() {
    tmp24_fu_1136_p2 = (cipher_q1.read() ^ cipher_q0.read());
}

void MixColumns::thread_tmp25_fu_1142_p2() {
    tmp25_fu_1142_p2 = (reg_643.read() ^ state_q1.read());
}

void MixColumns::thread_tmp26_fu_1155_p2() {
    tmp26_fu_1155_p2 = (state_q1.read() ^ reg_652.read());
}

void MixColumns::thread_tmp27_fu_1161_p2() {
    tmp27_fu_1161_p2 = (cipher_q2.read() ^ cipher_q3.read());
}

void MixColumns::thread_tmp28_fu_1210_p2() {
    tmp28_fu_1210_p2 = (reg_638.read() ^ reg_652.read());
}

void MixColumns::thread_tmp29_fu_1216_p2() {
    tmp29_fu_1216_p2 = (cipher_q0.read() ^ cipher_q1.read());
}

void MixColumns::thread_tmp2_fu_698_p2() {
    tmp2_fu_698_p2 = (reg_647.read() ^ state_q1.read());
}

void MixColumns::thread_tmp30_fu_1229_p2() {
    tmp30_fu_1229_p2 = (reg_643.read() ^ reg_638.read());
}

void MixColumns::thread_tmp31_fu_1235_p2() {
    tmp31_fu_1235_p2 = (cipher_q2.read() ^ cipher_q3.read());
}

void MixColumns::thread_tmp3_fu_711_p2() {
    tmp3_fu_711_p2 = (state_q1.read() ^ reg_638.read());
}

void MixColumns::thread_tmp4_fu_717_p2() {
    tmp4_fu_717_p2 = (cipher_q2.read() ^ cipher_q3.read());
}

void MixColumns::thread_tmp5_fu_766_p2() {
    tmp5_fu_766_p2 = (reg_643.read() ^ reg_638.read());
}

void MixColumns::thread_tmp6_fu_772_p2() {
    tmp6_fu_772_p2 = (cipher_q0.read() ^ cipher_q1.read());
}

void MixColumns::thread_tmp7_fu_785_p2() {
    tmp7_fu_785_p2 = (reg_647.read() ^ reg_643.read());
}

void MixColumns::thread_tmp8_fu_791_p2() {
    tmp8_fu_791_p2 = (cipher_q2.read() ^ cipher_q3.read());
}

void MixColumns::thread_tmp9_fu_840_p2() {
    tmp9_fu_840_p2 = (cipher_q1.read() ^ cipher_q0.read());
}

void MixColumns::thread_tmp_10_fu_1074_p2() {
    tmp_10_fu_1074_p2 = (tmp21_fu_1068_p2.read() ^ tmp20_fu_1062_p2.read());
}

void MixColumns::thread_tmp_11_fu_1093_p2() {
    tmp_11_fu_1093_p2 = (tmp23_fu_1087_p2.read() ^ tmp22_fu_1081_p2.read());
}

void MixColumns::thread_tmp_12_fu_1148_p2() {
    tmp_12_fu_1148_p2 = (tmp25_fu_1142_p2.read() ^ tmp24_fu_1136_p2.read());
}

void MixColumns::thread_tmp_13_fu_1167_p2() {
    tmp_13_fu_1167_p2 = (tmp27_fu_1161_p2.read() ^ tmp26_fu_1155_p2.read());
}

void MixColumns::thread_tmp_14_fu_1222_p2() {
    tmp_14_fu_1222_p2 = (tmp29_fu_1216_p2.read() ^ tmp28_fu_1210_p2.read());
}

void MixColumns::thread_tmp_15_fu_1241_p2() {
    tmp_15_fu_1241_p2 = (tmp31_fu_1235_p2.read() ^ tmp30_fu_1229_p2.read());
}

void MixColumns::thread_tmp_16_fu_1248_p2() {
    tmp_16_fu_1248_p2 = (!i_reg_627.read().is_01() || !ap_const_lv5_10.is_01())? sc_lv<1>(): sc_lv<1>(i_reg_627.read() == ap_const_lv5_10);
}

void MixColumns::thread_tmp_17_fu_1260_p1() {
    tmp_17_fu_1260_p1 = esl_zext<64,5>(i_reg_627.read());
}

void MixColumns::thread_tmp_1_fu_778_p2() {
    tmp_1_fu_778_p2 = (tmp6_fu_772_p2.read() ^ tmp5_fu_766_p2.read());
}

void MixColumns::thread_tmp_2_fu_797_p2() {
    tmp_2_fu_797_p2 = (tmp8_fu_791_p2.read() ^ tmp7_fu_785_p2.read());
}

void MixColumns::thread_tmp_3_fu_723_p2() {
    tmp_3_fu_723_p2 = (tmp4_fu_717_p2.read() ^ tmp3_fu_711_p2.read());
}

void MixColumns::thread_tmp_4_fu_926_p2() {
    tmp_4_fu_926_p2 = (tmp13_fu_920_p2.read() ^ tmp12_fu_914_p2.read());
}

void MixColumns::thread_tmp_5_fu_945_p2() {
    tmp_5_fu_945_p2 = (tmp15_fu_939_p2.read() ^ tmp14_fu_933_p2.read());
}

void MixColumns::thread_tmp_6_fu_1000_p2() {
    tmp_6_fu_1000_p2 = (tmp17_fu_994_p2.read() ^ tmp16_fu_988_p2.read());
}

void MixColumns::thread_tmp_7_fu_1019_p2() {
    tmp_7_fu_1019_p2 = (tmp19_fu_1013_p2.read() ^ tmp18_fu_1007_p2.read());
}

void MixColumns::thread_tmp_8_fu_852_p2() {
    tmp_8_fu_852_p2 = (tmp_fu_846_p2.read() ^ tmp9_fu_840_p2.read());
}

void MixColumns::thread_tmp_9_fu_704_p2() {
    tmp_9_fu_704_p2 = (tmp2_fu_698_p2.read() ^ tmp1_fu_692_p2.read());
}

void MixColumns::thread_tmp_fu_846_p2() {
    tmp_fu_846_p2 = (reg_643.read() ^ state_q1.read());
}

void MixColumns::thread_tmp_s_fu_871_p2() {
    tmp_s_fu_871_p2 = (tmp11_fu_865_p2.read() ^ tmp10_fu_859_p2.read());
}

void MixColumns::thread_tmp_state_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        tmp_state_address0 =  (sc_lv<4>) (tmp_17_fu_1260_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        tmp_state_address0 =  (sc_lv<4>) (ap_const_lv64_E);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        tmp_state_address0 =  (sc_lv<4>) (ap_const_lv64_C);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        tmp_state_address0 =  (sc_lv<4>) (ap_const_lv64_A);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        tmp_state_address0 =  (sc_lv<4>) (ap_const_lv64_8);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        tmp_state_address0 =  (sc_lv<4>) (ap_const_lv64_6);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        tmp_state_address0 =  (sc_lv<4>) (ap_const_lv64_4);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        tmp_state_address0 =  (sc_lv<4>) (ap_const_lv64_2);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        tmp_state_address0 =  (sc_lv<4>) (ap_const_lv64_0);
    } else {
        tmp_state_address0 =  (sc_lv<4>) ("XXXX");
    }
}

void MixColumns::thread_tmp_state_address1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        tmp_state_address1 =  (sc_lv<4>) (ap_const_lv64_F);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        tmp_state_address1 =  (sc_lv<4>) (ap_const_lv64_D);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        tmp_state_address1 =  (sc_lv<4>) (ap_const_lv64_B);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        tmp_state_address1 =  (sc_lv<4>) (ap_const_lv64_9);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        tmp_state_address1 =  (sc_lv<4>) (ap_const_lv64_7);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        tmp_state_address1 =  (sc_lv<4>) (ap_const_lv64_5);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        tmp_state_address1 =  (sc_lv<4>) (ap_const_lv64_3);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        tmp_state_address1 =  (sc_lv<4>) (ap_const_lv64_1);
    } else {
        tmp_state_address1 =  (sc_lv<4>) ("XXXX");
    }
}

void MixColumns::thread_tmp_state_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()))) {
        tmp_state_ce0 = ap_const_logic_1;
    } else {
        tmp_state_ce0 = ap_const_logic_0;
    }
}

void MixColumns::thread_tmp_state_ce1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()))) {
        tmp_state_ce1 = ap_const_logic_1;
    } else {
        tmp_state_ce1 = ap_const_logic_0;
    }
}

void MixColumns::thread_tmp_state_d0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        tmp_state_d0 = tmp_14_fu_1222_p2.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        tmp_state_d0 = tmp_12_fu_1148_p2.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        tmp_state_d0 = tmp_10_fu_1074_p2.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        tmp_state_d0 = tmp_6_fu_1000_p2.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        tmp_state_d0 = tmp_4_fu_926_p2.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        tmp_state_d0 = tmp_8_fu_852_p2.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        tmp_state_d0 = tmp_1_fu_778_p2.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        tmp_state_d0 = tmp_9_fu_704_p2.read();
    } else {
        tmp_state_d0 =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void MixColumns::thread_tmp_state_d1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        tmp_state_d1 = tmp_15_fu_1241_p2.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        tmp_state_d1 = tmp_13_fu_1167_p2.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        tmp_state_d1 = tmp_11_fu_1093_p2.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        tmp_state_d1 = tmp_7_fu_1019_p2.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        tmp_state_d1 = tmp_5_fu_945_p2.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        tmp_state_d1 = tmp_s_fu_871_p2.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        tmp_state_d1 = tmp_2_fu_797_p2.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        tmp_state_d1 = tmp_3_fu_723_p2.read();
    } else {
        tmp_state_d1 =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void MixColumns::thread_tmp_state_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()))) {
        tmp_state_we0 = ap_const_logic_1;
    } else {
        tmp_state_we0 = ap_const_logic_0;
    }
}

void MixColumns::thread_tmp_state_we1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()))) {
        tmp_state_we1 = ap_const_logic_1;
    } else {
        tmp_state_we1 = ap_const_logic_0;
    }
}

void MixColumns::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_state9;
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_fsm_state10;
            break;
        case 512 : 
            ap_NS_fsm = ap_ST_fsm_state11;
            break;
        case 1024 : 
            ap_NS_fsm = ap_ST_fsm_state12;
            break;
        case 2048 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) && esl_seteq<1,1,1>(tmp_16_fu_1248_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state13;
            }
            break;
        case 4096 : 
            ap_NS_fsm = ap_ST_fsm_state12;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<13>) ("XXXXXXXXXXXXX");
            break;
    }
}

}

