// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "AES_Encrypt.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic AES_Encrypt::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic AES_Encrypt::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<29> AES_Encrypt::ap_ST_fsm_state1 = "1";
const sc_lv<29> AES_Encrypt::ap_ST_fsm_pp0_stage0 = "10";
const sc_lv<29> AES_Encrypt::ap_ST_fsm_state4 = "100";
const sc_lv<29> AES_Encrypt::ap_ST_fsm_state5 = "1000";
const sc_lv<29> AES_Encrypt::ap_ST_fsm_state6 = "10000";
const sc_lv<29> AES_Encrypt::ap_ST_fsm_state7 = "100000";
const sc_lv<29> AES_Encrypt::ap_ST_fsm_state8 = "1000000";
const sc_lv<29> AES_Encrypt::ap_ST_fsm_state9 = "10000000";
const sc_lv<29> AES_Encrypt::ap_ST_fsm_state10 = "100000000";
const sc_lv<29> AES_Encrypt::ap_ST_fsm_state11 = "1000000000";
const sc_lv<29> AES_Encrypt::ap_ST_fsm_state12 = "10000000000";
const sc_lv<29> AES_Encrypt::ap_ST_fsm_state13 = "100000000000";
const sc_lv<29> AES_Encrypt::ap_ST_fsm_state14 = "1000000000000";
const sc_lv<29> AES_Encrypt::ap_ST_fsm_state15 = "10000000000000";
const sc_lv<29> AES_Encrypt::ap_ST_fsm_state16 = "100000000000000";
const sc_lv<29> AES_Encrypt::ap_ST_fsm_state17 = "1000000000000000";
const sc_lv<29> AES_Encrypt::ap_ST_fsm_state18 = "10000000000000000";
const sc_lv<29> AES_Encrypt::ap_ST_fsm_state19 = "100000000000000000";
const sc_lv<29> AES_Encrypt::ap_ST_fsm_state20 = "1000000000000000000";
const sc_lv<29> AES_Encrypt::ap_ST_fsm_state21 = "10000000000000000000";
const sc_lv<29> AES_Encrypt::ap_ST_fsm_state22 = "100000000000000000000";
const sc_lv<29> AES_Encrypt::ap_ST_fsm_state23 = "1000000000000000000000";
const sc_lv<29> AES_Encrypt::ap_ST_fsm_state24 = "10000000000000000000000";
const sc_lv<29> AES_Encrypt::ap_ST_fsm_state25 = "100000000000000000000000";
const sc_lv<29> AES_Encrypt::ap_ST_fsm_state26 = "1000000000000000000000000";
const sc_lv<29> AES_Encrypt::ap_ST_fsm_state27 = "10000000000000000000000000";
const sc_lv<29> AES_Encrypt::ap_ST_fsm_state28 = "100000000000000000000000000";
const sc_lv<29> AES_Encrypt::ap_ST_fsm_state29 = "1000000000000000000000000000";
const sc_lv<29> AES_Encrypt::ap_ST_fsm_state30 = "10000000000000000000000000000";
const sc_lv<32> AES_Encrypt::ap_const_lv32_0 = "00000000000000000000000000000000";
const bool AES_Encrypt::ap_const_boolean_1 = true;
const sc_lv<1> AES_Encrypt::ap_const_lv1_0 = "0";
const sc_lv<1> AES_Encrypt::ap_const_lv1_1 = "1";
const sc_lv<2> AES_Encrypt::ap_const_lv2_0 = "00";
const sc_lv<2> AES_Encrypt::ap_const_lv2_2 = "10";
const sc_lv<2> AES_Encrypt::ap_const_lv2_3 = "11";
const sc_lv<2> AES_Encrypt::ap_const_lv2_1 = "1";
const sc_lv<32> AES_Encrypt::ap_const_lv32_1 = "1";
const bool AES_Encrypt::ap_const_boolean_0 = false;
const sc_lv<32> AES_Encrypt::ap_const_lv32_C = "1100";
const sc_lv<32> AES_Encrypt::ap_const_lv32_D = "1101";
const sc_lv<32> AES_Encrypt::ap_const_lv32_E = "1110";
const sc_lv<32> AES_Encrypt::ap_const_lv32_F = "1111";
const sc_lv<32> AES_Encrypt::ap_const_lv32_10 = "10000";
const sc_lv<32> AES_Encrypt::ap_const_lv32_11 = "10001";
const sc_lv<32> AES_Encrypt::ap_const_lv32_12 = "10010";
const sc_lv<32> AES_Encrypt::ap_const_lv32_13 = "10011";
const sc_lv<32> AES_Encrypt::ap_const_lv32_14 = "10100";
const sc_lv<32> AES_Encrypt::ap_const_lv32_15 = "10101";
const sc_lv<32> AES_Encrypt::ap_const_lv32_16 = "10110";
const sc_lv<32> AES_Encrypt::ap_const_lv32_17 = "10111";
const sc_lv<32> AES_Encrypt::ap_const_lv32_18 = "11000";
const sc_lv<32> AES_Encrypt::ap_const_lv32_19 = "11001";
const sc_lv<32> AES_Encrypt::ap_const_lv32_1A = "11010";
const sc_lv<32> AES_Encrypt::ap_const_lv32_1B = "11011";
const sc_lv<32> AES_Encrypt::ap_const_lv32_1C = "11100";
const sc_lv<32> AES_Encrypt::ap_const_lv32_3 = "11";
const sc_lv<32> AES_Encrypt::ap_const_lv32_4 = "100";
const sc_lv<5> AES_Encrypt::ap_const_lv5_0 = "00000";
const sc_lv<16> AES_Encrypt::ap_const_lv16_0 = "0000000000000000";
const sc_lv<32> AES_Encrypt::ap_const_lv32_B = "1011";
const sc_lv<32> AES_Encrypt::ap_const_lv32_2 = "10";
const sc_lv<32> AES_Encrypt::ap_const_lv32_A = "1010";
const sc_lv<32> AES_Encrypt::ap_const_lv32_8 = "1000";
const sc_lv<32> AES_Encrypt::ap_const_lv32_9 = "1001";
const sc_lv<32> AES_Encrypt::ap_const_lv32_5 = "101";
const sc_lv<32> AES_Encrypt::ap_const_lv32_6 = "110";
const sc_lv<32> AES_Encrypt::ap_const_lv32_7 = "111";
const sc_lv<64> AES_Encrypt::ap_const_lv64_0 = "0000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<64> AES_Encrypt::ap_const_lv64_1 = "1";
const sc_lv<64> AES_Encrypt::ap_const_lv64_2 = "10";
const sc_lv<64> AES_Encrypt::ap_const_lv64_3 = "11";
const sc_lv<64> AES_Encrypt::ap_const_lv64_4 = "100";
const sc_lv<64> AES_Encrypt::ap_const_lv64_5 = "101";
const sc_lv<64> AES_Encrypt::ap_const_lv64_6 = "110";
const sc_lv<64> AES_Encrypt::ap_const_lv64_7 = "111";
const sc_lv<64> AES_Encrypt::ap_const_lv64_8 = "1000";
const sc_lv<64> AES_Encrypt::ap_const_lv64_9 = "1001";
const sc_lv<64> AES_Encrypt::ap_const_lv64_A = "1010";
const sc_lv<64> AES_Encrypt::ap_const_lv64_B = "1011";
const sc_lv<64> AES_Encrypt::ap_const_lv64_C = "1100";
const sc_lv<64> AES_Encrypt::ap_const_lv64_D = "1101";
const sc_lv<64> AES_Encrypt::ap_const_lv64_E = "1110";
const sc_lv<64> AES_Encrypt::ap_const_lv64_F = "1111";
const sc_lv<5> AES_Encrypt::ap_const_lv5_10 = "10000";
const sc_lv<5> AES_Encrypt::ap_const_lv5_1 = "1";
const sc_lv<17> AES_Encrypt::ap_const_lv17_1FFFF = "11111111111111111";
const sc_lv<16> AES_Encrypt::ap_const_lv16_1 = "1";

AES_Encrypt::AES_Encrypt(sc_module_name name) : sc_module(name), mVcdFile(0) {
    state_U = new AES_Encrypt_state("state_U");
    state_U->clk(ap_clk);
    state_U->reset(ap_rst_n_inv);
    state_U->address0(state_address0);
    state_U->ce0(state_ce0);
    state_U->we0(state_we0);
    state_U->d0(state_d0);
    state_U->q0(state_q0);
    state_U->address1(state_address1);
    state_U->ce1(state_ce1);
    state_U->we1(state_we1);
    state_U->d1(state_d1);
    state_U->q1(state_q1);
    grp_AddRoundKey_fu_295 = new AddRoundKey("grp_AddRoundKey_fu_295");
    grp_AddRoundKey_fu_295->ap_clk(ap_clk);
    grp_AddRoundKey_fu_295->ap_rst(ap_rst_n_inv);
    grp_AddRoundKey_fu_295->ap_start(grp_AddRoundKey_fu_295_ap_start);
    grp_AddRoundKey_fu_295->ap_done(grp_AddRoundKey_fu_295_ap_done);
    grp_AddRoundKey_fu_295->ap_idle(grp_AddRoundKey_fu_295_ap_idle);
    grp_AddRoundKey_fu_295->ap_ready(grp_AddRoundKey_fu_295_ap_ready);
    grp_AddRoundKey_fu_295->state_address0(grp_AddRoundKey_fu_295_state_address0);
    grp_AddRoundKey_fu_295->state_ce0(grp_AddRoundKey_fu_295_state_ce0);
    grp_AddRoundKey_fu_295->state_we0(grp_AddRoundKey_fu_295_state_we0);
    grp_AddRoundKey_fu_295->state_d0(grp_AddRoundKey_fu_295_state_d0);
    grp_AddRoundKey_fu_295->state_q0(state_q0);
    grp_AddRoundKey_fu_295->state_address1(grp_AddRoundKey_fu_295_state_address1);
    grp_AddRoundKey_fu_295->state_ce1(grp_AddRoundKey_fu_295_state_ce1);
    grp_AddRoundKey_fu_295->state_we1(grp_AddRoundKey_fu_295_state_we1);
    grp_AddRoundKey_fu_295->state_d1(grp_AddRoundKey_fu_295_state_d1);
    grp_AddRoundKey_fu_295->state_q1(state_q1);
    grp_AddRoundKey_fu_295->roundKey_TDATA(expandedKey_0_data_out);
    grp_AddRoundKey_fu_295->roundKey_TVALID(grp_AddRoundKey_fu_295_roundKey_TVALID);
    grp_AddRoundKey_fu_295->roundKey_TREADY(grp_AddRoundKey_fu_295_roundKey_TREADY);
    grp_MixColumns_fu_315 = new MixColumns("grp_MixColumns_fu_315");
    grp_MixColumns_fu_315->ap_clk(ap_clk);
    grp_MixColumns_fu_315->ap_rst(ap_rst_n_inv);
    grp_MixColumns_fu_315->ap_start(grp_MixColumns_fu_315_ap_start);
    grp_MixColumns_fu_315->ap_done(grp_MixColumns_fu_315_ap_done);
    grp_MixColumns_fu_315->ap_idle(grp_MixColumns_fu_315_ap_idle);
    grp_MixColumns_fu_315->ap_ready(grp_MixColumns_fu_315_ap_ready);
    grp_MixColumns_fu_315->state_address0(grp_MixColumns_fu_315_state_address0);
    grp_MixColumns_fu_315->state_ce0(grp_MixColumns_fu_315_state_ce0);
    grp_MixColumns_fu_315->state_we0(grp_MixColumns_fu_315_state_we0);
    grp_MixColumns_fu_315->state_d0(grp_MixColumns_fu_315_state_d0);
    grp_MixColumns_fu_315->state_q0(state_q0);
    grp_MixColumns_fu_315->state_address1(grp_MixColumns_fu_315_state_address1);
    grp_MixColumns_fu_315->state_ce1(grp_MixColumns_fu_315_state_ce1);
    grp_MixColumns_fu_315->state_q1(state_q1);
    grp_SubBytes_fu_322 = new SubBytes("grp_SubBytes_fu_322");
    grp_SubBytes_fu_322->ap_clk(ap_clk);
    grp_SubBytes_fu_322->ap_rst(ap_rst_n_inv);
    grp_SubBytes_fu_322->ap_start(grp_SubBytes_fu_322_ap_start);
    grp_SubBytes_fu_322->ap_done(grp_SubBytes_fu_322_ap_done);
    grp_SubBytes_fu_322->ap_idle(grp_SubBytes_fu_322_ap_idle);
    grp_SubBytes_fu_322->ap_ready(grp_SubBytes_fu_322_ap_ready);
    grp_SubBytes_fu_322->state_address0(grp_SubBytes_fu_322_state_address0);
    grp_SubBytes_fu_322->state_ce0(grp_SubBytes_fu_322_state_ce0);
    grp_SubBytes_fu_322->state_we0(grp_SubBytes_fu_322_state_we0);
    grp_SubBytes_fu_322->state_d0(grp_SubBytes_fu_322_state_d0);
    grp_SubBytes_fu_322->state_q0(state_q0);
    grp_SubBytes_fu_322->state_address1(grp_SubBytes_fu_322_state_address1);
    grp_SubBytes_fu_322->state_ce1(grp_SubBytes_fu_322_state_ce1);
    grp_SubBytes_fu_322->state_we1(grp_SubBytes_fu_322_state_we1);
    grp_SubBytes_fu_322->state_d1(grp_SubBytes_fu_322_state_d1);
    grp_SubBytes_fu_322->state_q1(state_q1);
    grp_ShiftRows_fu_329 = new ShiftRows("grp_ShiftRows_fu_329");
    grp_ShiftRows_fu_329->ap_clk(ap_clk);
    grp_ShiftRows_fu_329->ap_rst(ap_rst_n_inv);
    grp_ShiftRows_fu_329->ap_start(grp_ShiftRows_fu_329_ap_start);
    grp_ShiftRows_fu_329->ap_done(grp_ShiftRows_fu_329_ap_done);
    grp_ShiftRows_fu_329->ap_idle(grp_ShiftRows_fu_329_ap_idle);
    grp_ShiftRows_fu_329->ap_ready(grp_ShiftRows_fu_329_ap_ready);
    grp_ShiftRows_fu_329->state_address0(grp_ShiftRows_fu_329_state_address0);
    grp_ShiftRows_fu_329->state_ce0(grp_ShiftRows_fu_329_state_ce0);
    grp_ShiftRows_fu_329->state_we0(grp_ShiftRows_fu_329_state_we0);
    grp_ShiftRows_fu_329->state_d0(grp_ShiftRows_fu_329_state_d0);
    grp_ShiftRows_fu_329->state_q0(state_q0);
    grp_ShiftRows_fu_329->state_address1(grp_ShiftRows_fu_329_state_address1);
    grp_ShiftRows_fu_329->state_ce1(grp_ShiftRows_fu_329_state_ce1);
    grp_ShiftRows_fu_329->state_q1(state_q1);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state10);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state11);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state12);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state13);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state14);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state15);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state16);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state17);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state18);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state19);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state20);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state21);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state22);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state23);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state24);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state25);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state26);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state27);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state28);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state29);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state30);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state9);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_pp0_stage0);

    SC_METHOD(thread_ap_block_pp0_stage0_11001);
    sensitive << ( plaintext_0_vld_out );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( tmp_reg_391 );

    SC_METHOD(thread_ap_block_pp0_stage0_subdone);
    sensitive << ( plaintext_0_vld_out );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( tmp_reg_391 );

    SC_METHOD(thread_ap_block_state11_on_subcall_done);
    sensitive << ( tmp_19_reg_413 );
    sensitive << ( grp_MixColumns_fu_315_ap_done );

    SC_METHOD(thread_ap_block_state2_pp0_stage0_iter0);

    SC_METHOD(thread_ap_block_state3_pp0_stage0_iter1);
    sensitive << ( plaintext_0_vld_out );
    sensitive << ( tmp_reg_391 );

    SC_METHOD(thread_ap_condition_pp0_exit_iter0_state2);
    sensitive << ( tmp_fu_339_p2 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ciphertext_1_ack_in );
    sensitive << ( ap_CS_fsm_state30 );

    SC_METHOD(thread_ap_enable_pp0);
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_idle_pp0);
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_ap_phi_mux_i_phi_fu_276_p4);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( tmp_reg_391 );
    sensitive << ( i_reg_272 );
    sensitive << ( i_3_reg_395 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ciphertext_1_ack_in );
    sensitive << ( ap_CS_fsm_state30 );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_ciphertext_1_ack_in);
    sensitive << ( ciphertext_1_state );

    SC_METHOD(thread_ciphertext_1_ack_out);
    sensitive << ( ciphertext_TREADY );

    SC_METHOD(thread_ciphertext_1_data_out);
    sensitive << ( ciphertext_1_payload_A );
    sensitive << ( ciphertext_1_payload_B );
    sensitive << ( ciphertext_1_sel );

    SC_METHOD(thread_ciphertext_1_load_A);
    sensitive << ( ciphertext_1_sel_wr );
    sensitive << ( ciphertext_1_state_cmp_full );

    SC_METHOD(thread_ciphertext_1_load_B);
    sensitive << ( ciphertext_1_sel_wr );
    sensitive << ( ciphertext_1_state_cmp_full );

    SC_METHOD(thread_ciphertext_1_sel);
    sensitive << ( ciphertext_1_sel_rd );

    SC_METHOD(thread_ciphertext_1_state_cmp_full);
    sensitive << ( ciphertext_1_state );

    SC_METHOD(thread_ciphertext_1_vld_in);
    sensitive << ( ciphertext_1_ack_in );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_CS_fsm_state20 );
    sensitive << ( ap_CS_fsm_state21 );
    sensitive << ( ap_CS_fsm_state22 );
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( ap_CS_fsm_state24 );
    sensitive << ( ap_CS_fsm_state25 );
    sensitive << ( ap_CS_fsm_state26 );
    sensitive << ( ap_CS_fsm_state27 );
    sensitive << ( ap_CS_fsm_state28 );
    sensitive << ( ap_CS_fsm_state29 );

    SC_METHOD(thread_ciphertext_1_vld_out);
    sensitive << ( ciphertext_1_state );

    SC_METHOD(thread_ciphertext_TDATA);
    sensitive << ( ciphertext_1_data_out );

    SC_METHOD(thread_ciphertext_TDATA_blk_n);
    sensitive << ( ciphertext_1_state );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_CS_fsm_state20 );
    sensitive << ( ap_CS_fsm_state21 );
    sensitive << ( ap_CS_fsm_state22 );
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( ap_CS_fsm_state24 );
    sensitive << ( ap_CS_fsm_state25 );
    sensitive << ( ap_CS_fsm_state26 );
    sensitive << ( ap_CS_fsm_state27 );
    sensitive << ( ap_CS_fsm_state28 );
    sensitive << ( ap_CS_fsm_state29 );
    sensitive << ( ap_CS_fsm_state30 );

    SC_METHOD(thread_ciphertext_TVALID);
    sensitive << ( ciphertext_1_state );

    SC_METHOD(thread_exitcond_fu_365_p2);
    sensitive << ( Nr );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( i1_reg_284 );

    SC_METHOD(thread_expandedKey_0_ack_in);
    sensitive << ( expandedKey_0_state );

    SC_METHOD(thread_expandedKey_0_ack_out);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( grp_AddRoundKey_fu_295_roundKey_TREADY );
    sensitive << ( ap_CS_fsm_state13 );

    SC_METHOD(thread_expandedKey_0_data_out);
    sensitive << ( expandedKey_0_payload_A );
    sensitive << ( expandedKey_0_payload_B );
    sensitive << ( expandedKey_0_sel );

    SC_METHOD(thread_expandedKey_0_load_A);
    sensitive << ( expandedKey_0_sel_wr );
    sensitive << ( expandedKey_0_state_cmp_full );

    SC_METHOD(thread_expandedKey_0_load_B);
    sensitive << ( expandedKey_0_sel_wr );
    sensitive << ( expandedKey_0_state_cmp_full );

    SC_METHOD(thread_expandedKey_0_sel);
    sensitive << ( expandedKey_0_sel_rd );

    SC_METHOD(thread_expandedKey_0_state_cmp_full);
    sensitive << ( expandedKey_0_state );

    SC_METHOD(thread_expandedKey_0_vld_in);
    sensitive << ( expandedKey_TVALID );

    SC_METHOD(thread_expandedKey_0_vld_out);
    sensitive << ( expandedKey_0_state );

    SC_METHOD(thread_expandedKey_TREADY);
    sensitive << ( expandedKey_0_state );

    SC_METHOD(thread_grp_AddRoundKey_fu_295_ap_start);
    sensitive << ( ap_reg_grp_AddRoundKey_fu_295_ap_start );

    SC_METHOD(thread_grp_AddRoundKey_fu_295_roundKey_TVALID);
    sensitive << ( expandedKey_0_state );

    SC_METHOD(thread_grp_MixColumns_fu_315_ap_start);
    sensitive << ( ap_reg_grp_MixColumns_fu_315_ap_start );

    SC_METHOD(thread_grp_ShiftRows_fu_329_ap_start);
    sensitive << ( ap_reg_grp_ShiftRows_fu_329_ap_start );

    SC_METHOD(thread_grp_SubBytes_fu_322_ap_start);
    sensitive << ( ap_reg_grp_SubBytes_fu_322_ap_start );

    SC_METHOD(thread_i_3_fu_345_p2);
    sensitive << ( ap_phi_mux_i_phi_fu_276_p4 );

    SC_METHOD(thread_i_4_fu_370_p2);
    sensitive << ( i1_reg_284 );

    SC_METHOD(thread_plaintext_0_ack_in);
    sensitive << ( plaintext_0_state );

    SC_METHOD(thread_plaintext_0_ack_out);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( tmp_reg_391 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_plaintext_0_data_out);
    sensitive << ( plaintext_0_payload_A );
    sensitive << ( plaintext_0_payload_B );
    sensitive << ( plaintext_0_sel );

    SC_METHOD(thread_plaintext_0_load_A);
    sensitive << ( plaintext_0_sel_wr );
    sensitive << ( plaintext_0_state_cmp_full );

    SC_METHOD(thread_plaintext_0_load_B);
    sensitive << ( plaintext_0_sel_wr );
    sensitive << ( plaintext_0_state_cmp_full );

    SC_METHOD(thread_plaintext_0_sel);
    sensitive << ( plaintext_0_sel_rd );

    SC_METHOD(thread_plaintext_0_state_cmp_full);
    sensitive << ( plaintext_0_state );

    SC_METHOD(thread_plaintext_0_vld_in);
    sensitive << ( plaintext_TVALID );

    SC_METHOD(thread_plaintext_0_vld_out);
    sensitive << ( plaintext_0_state );

    SC_METHOD(thread_plaintext_TDATA_blk_n);
    sensitive << ( plaintext_0_state );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( tmp_reg_391 );

    SC_METHOD(thread_plaintext_TREADY);
    sensitive << ( plaintext_0_state );

    SC_METHOD(thread_state_address0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_CS_fsm_state20 );
    sensitive << ( ap_CS_fsm_state21 );
    sensitive << ( ap_CS_fsm_state22 );
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( ap_CS_fsm_state24 );
    sensitive << ( ap_CS_fsm_state25 );
    sensitive << ( ap_CS_fsm_state26 );
    sensitive << ( ap_CS_fsm_state27 );
    sensitive << ( ap_CS_fsm_state28 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( tmp_19_reg_413 );
    sensitive << ( exitcond_fu_365_p2 );
    sensitive << ( grp_AddRoundKey_fu_295_state_address0 );
    sensitive << ( grp_MixColumns_fu_315_state_address0 );
    sensitive << ( grp_SubBytes_fu_322_state_address0 );
    sensitive << ( grp_ShiftRows_fu_329_state_address0 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( tmp_18_fu_351_p1 );

    SC_METHOD(thread_state_address1);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( tmp_19_reg_413 );
    sensitive << ( grp_AddRoundKey_fu_295_state_address1 );
    sensitive << ( grp_MixColumns_fu_315_state_address1 );
    sensitive << ( grp_SubBytes_fu_322_state_address1 );
    sensitive << ( grp_ShiftRows_fu_329_state_address1 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state9 );

    SC_METHOD(thread_state_ce0);
    sensitive << ( ciphertext_1_ack_in );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_CS_fsm_state20 );
    sensitive << ( ap_CS_fsm_state21 );
    sensitive << ( ap_CS_fsm_state22 );
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( ap_CS_fsm_state24 );
    sensitive << ( ap_CS_fsm_state25 );
    sensitive << ( ap_CS_fsm_state26 );
    sensitive << ( ap_CS_fsm_state27 );
    sensitive << ( ap_CS_fsm_state28 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( tmp_19_reg_413 );
    sensitive << ( exitcond_fu_365_p2 );
    sensitive << ( grp_AddRoundKey_fu_295_state_ce0 );
    sensitive << ( grp_MixColumns_fu_315_state_ce0 );
    sensitive << ( grp_SubBytes_fu_322_state_ce0 );
    sensitive << ( grp_ShiftRows_fu_329_state_ce0 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state9 );

    SC_METHOD(thread_state_ce1);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( tmp_19_reg_413 );
    sensitive << ( grp_AddRoundKey_fu_295_state_ce1 );
    sensitive << ( grp_MixColumns_fu_315_state_ce1 );
    sensitive << ( grp_SubBytes_fu_322_state_ce1 );
    sensitive << ( grp_ShiftRows_fu_329_state_ce1 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state9 );

    SC_METHOD(thread_state_d0);
    sensitive << ( plaintext_0_data_out );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( tmp_19_reg_413 );
    sensitive << ( grp_AddRoundKey_fu_295_state_d0 );
    sensitive << ( grp_MixColumns_fu_315_state_d0 );
    sensitive << ( grp_SubBytes_fu_322_state_d0 );
    sensitive << ( grp_ShiftRows_fu_329_state_d0 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state9 );

    SC_METHOD(thread_state_d1);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( grp_AddRoundKey_fu_295_state_d1 );
    sensitive << ( grp_SubBytes_fu_322_state_d1 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_state_we0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( tmp_reg_391 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( tmp_19_reg_413 );
    sensitive << ( grp_AddRoundKey_fu_295_state_we0 );
    sensitive << ( grp_MixColumns_fu_315_state_we0 );
    sensitive << ( grp_SubBytes_fu_322_state_we0 );
    sensitive << ( grp_ShiftRows_fu_329_state_we0 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state9 );

    SC_METHOD(thread_state_we1);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( grp_AddRoundKey_fu_295_state_we1 );
    sensitive << ( grp_SubBytes_fu_322_state_we1 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_tmp_18_fu_351_p1);
    sensitive << ( i_reg_272 );

    SC_METHOD(thread_tmp_19_fu_380_p2);
    sensitive << ( tmp_s_reg_400 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( exitcond_fu_365_p2 );
    sensitive << ( tmp_67_cast_fu_376_p1 );

    SC_METHOD(thread_tmp_67_cast_fu_376_p1);
    sensitive << ( i1_reg_284 );

    SC_METHOD(thread_tmp_cast_fu_356_p1);
    sensitive << ( Nr );

    SC_METHOD(thread_tmp_fu_339_p2);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_phi_mux_i_phi_fu_276_p4 );

    SC_METHOD(thread_tmp_s_fu_359_p2);
    sensitive << ( tmp_cast_fu_356_p1 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ciphertext_1_ack_in );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_CS_fsm_state20 );
    sensitive << ( ap_CS_fsm_state21 );
    sensitive << ( ap_CS_fsm_state22 );
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( ap_CS_fsm_state24 );
    sensitive << ( ap_CS_fsm_state25 );
    sensitive << ( ap_CS_fsm_state26 );
    sensitive << ( ap_CS_fsm_state27 );
    sensitive << ( ap_CS_fsm_state28 );
    sensitive << ( ap_CS_fsm_state29 );
    sensitive << ( ap_CS_fsm_state30 );
    sensitive << ( tmp_fu_339_p2 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( grp_AddRoundKey_fu_295_ap_done );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( tmp_19_reg_413 );
    sensitive << ( exitcond_fu_365_p2 );
    sensitive << ( ap_block_pp0_stage0_subdone );
    sensitive << ( grp_SubBytes_fu_322_ap_done );
    sensitive << ( grp_ShiftRows_fu_329_ap_done );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_block_state11_on_subcall_done );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "00000000000000000000000000001";
    plaintext_0_sel_rd = SC_LOGIC_0;
    plaintext_0_sel_wr = SC_LOGIC_0;
    plaintext_0_state = "00";
    expandedKey_0_sel_rd = SC_LOGIC_0;
    expandedKey_0_sel_wr = SC_LOGIC_0;
    expandedKey_0_state = "00";
    ciphertext_1_sel_rd = SC_LOGIC_0;
    ciphertext_1_sel_wr = SC_LOGIC_0;
    ciphertext_1_state = "00";
    ap_enable_reg_pp0_iter1 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter0 = SC_LOGIC_0;
    ap_reg_grp_AddRoundKey_fu_295_ap_start = SC_LOGIC_0;
    ap_reg_grp_MixColumns_fu_315_ap_start = SC_LOGIC_0;
    ap_reg_grp_SubBytes_fu_322_ap_start = SC_LOGIC_0;
    ap_reg_grp_ShiftRows_fu_329_ap_start = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "AES_Encrypt_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, plaintext_TDATA, "(port)plaintext_TDATA");
    sc_trace(mVcdFile, plaintext_TVALID, "(port)plaintext_TVALID");
    sc_trace(mVcdFile, plaintext_TREADY, "(port)plaintext_TREADY");
    sc_trace(mVcdFile, expandedKey_TDATA, "(port)expandedKey_TDATA");
    sc_trace(mVcdFile, expandedKey_TVALID, "(port)expandedKey_TVALID");
    sc_trace(mVcdFile, expandedKey_TREADY, "(port)expandedKey_TREADY");
    sc_trace(mVcdFile, Nr, "(port)Nr");
    sc_trace(mVcdFile, ciphertext_TDATA, "(port)ciphertext_TDATA");
    sc_trace(mVcdFile, ciphertext_TVALID, "(port)ciphertext_TVALID");
    sc_trace(mVcdFile, ciphertext_TREADY, "(port)ciphertext_TREADY");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, plaintext_0_data_out, "plaintext_0_data_out");
    sc_trace(mVcdFile, plaintext_0_vld_in, "plaintext_0_vld_in");
    sc_trace(mVcdFile, plaintext_0_vld_out, "plaintext_0_vld_out");
    sc_trace(mVcdFile, plaintext_0_ack_in, "plaintext_0_ack_in");
    sc_trace(mVcdFile, plaintext_0_ack_out, "plaintext_0_ack_out");
    sc_trace(mVcdFile, plaintext_0_payload_A, "plaintext_0_payload_A");
    sc_trace(mVcdFile, plaintext_0_payload_B, "plaintext_0_payload_B");
    sc_trace(mVcdFile, plaintext_0_sel_rd, "plaintext_0_sel_rd");
    sc_trace(mVcdFile, plaintext_0_sel_wr, "plaintext_0_sel_wr");
    sc_trace(mVcdFile, plaintext_0_sel, "plaintext_0_sel");
    sc_trace(mVcdFile, plaintext_0_load_A, "plaintext_0_load_A");
    sc_trace(mVcdFile, plaintext_0_load_B, "plaintext_0_load_B");
    sc_trace(mVcdFile, plaintext_0_state, "plaintext_0_state");
    sc_trace(mVcdFile, plaintext_0_state_cmp_full, "plaintext_0_state_cmp_full");
    sc_trace(mVcdFile, expandedKey_0_data_out, "expandedKey_0_data_out");
    sc_trace(mVcdFile, expandedKey_0_vld_in, "expandedKey_0_vld_in");
    sc_trace(mVcdFile, expandedKey_0_vld_out, "expandedKey_0_vld_out");
    sc_trace(mVcdFile, expandedKey_0_ack_in, "expandedKey_0_ack_in");
    sc_trace(mVcdFile, expandedKey_0_ack_out, "expandedKey_0_ack_out");
    sc_trace(mVcdFile, expandedKey_0_payload_A, "expandedKey_0_payload_A");
    sc_trace(mVcdFile, expandedKey_0_payload_B, "expandedKey_0_payload_B");
    sc_trace(mVcdFile, expandedKey_0_sel_rd, "expandedKey_0_sel_rd");
    sc_trace(mVcdFile, expandedKey_0_sel_wr, "expandedKey_0_sel_wr");
    sc_trace(mVcdFile, expandedKey_0_sel, "expandedKey_0_sel");
    sc_trace(mVcdFile, expandedKey_0_load_A, "expandedKey_0_load_A");
    sc_trace(mVcdFile, expandedKey_0_load_B, "expandedKey_0_load_B");
    sc_trace(mVcdFile, expandedKey_0_state, "expandedKey_0_state");
    sc_trace(mVcdFile, expandedKey_0_state_cmp_full, "expandedKey_0_state_cmp_full");
    sc_trace(mVcdFile, ciphertext_1_data_out, "ciphertext_1_data_out");
    sc_trace(mVcdFile, ciphertext_1_vld_in, "ciphertext_1_vld_in");
    sc_trace(mVcdFile, ciphertext_1_vld_out, "ciphertext_1_vld_out");
    sc_trace(mVcdFile, ciphertext_1_ack_in, "ciphertext_1_ack_in");
    sc_trace(mVcdFile, ciphertext_1_ack_out, "ciphertext_1_ack_out");
    sc_trace(mVcdFile, ciphertext_1_payload_A, "ciphertext_1_payload_A");
    sc_trace(mVcdFile, ciphertext_1_payload_B, "ciphertext_1_payload_B");
    sc_trace(mVcdFile, ciphertext_1_sel_rd, "ciphertext_1_sel_rd");
    sc_trace(mVcdFile, ciphertext_1_sel_wr, "ciphertext_1_sel_wr");
    sc_trace(mVcdFile, ciphertext_1_sel, "ciphertext_1_sel");
    sc_trace(mVcdFile, ciphertext_1_load_A, "ciphertext_1_load_A");
    sc_trace(mVcdFile, ciphertext_1_load_B, "ciphertext_1_load_B");
    sc_trace(mVcdFile, ciphertext_1_state, "ciphertext_1_state");
    sc_trace(mVcdFile, ciphertext_1_state_cmp_full, "ciphertext_1_state_cmp_full");
    sc_trace(mVcdFile, plaintext_TDATA_blk_n, "plaintext_TDATA_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage0, "ap_CS_fsm_pp0_stage0");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter1, "ap_enable_reg_pp0_iter1");
    sc_trace(mVcdFile, ap_block_pp0_stage0, "ap_block_pp0_stage0");
    sc_trace(mVcdFile, tmp_reg_391, "tmp_reg_391");
    sc_trace(mVcdFile, ciphertext_TDATA_blk_n, "ciphertext_TDATA_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_state14, "ap_CS_fsm_state14");
    sc_trace(mVcdFile, ap_CS_fsm_state15, "ap_CS_fsm_state15");
    sc_trace(mVcdFile, ap_CS_fsm_state16, "ap_CS_fsm_state16");
    sc_trace(mVcdFile, ap_CS_fsm_state17, "ap_CS_fsm_state17");
    sc_trace(mVcdFile, ap_CS_fsm_state18, "ap_CS_fsm_state18");
    sc_trace(mVcdFile, ap_CS_fsm_state19, "ap_CS_fsm_state19");
    sc_trace(mVcdFile, ap_CS_fsm_state20, "ap_CS_fsm_state20");
    sc_trace(mVcdFile, ap_CS_fsm_state21, "ap_CS_fsm_state21");
    sc_trace(mVcdFile, ap_CS_fsm_state22, "ap_CS_fsm_state22");
    sc_trace(mVcdFile, ap_CS_fsm_state23, "ap_CS_fsm_state23");
    sc_trace(mVcdFile, ap_CS_fsm_state24, "ap_CS_fsm_state24");
    sc_trace(mVcdFile, ap_CS_fsm_state25, "ap_CS_fsm_state25");
    sc_trace(mVcdFile, ap_CS_fsm_state26, "ap_CS_fsm_state26");
    sc_trace(mVcdFile, ap_CS_fsm_state27, "ap_CS_fsm_state27");
    sc_trace(mVcdFile, ap_CS_fsm_state28, "ap_CS_fsm_state28");
    sc_trace(mVcdFile, ap_CS_fsm_state29, "ap_CS_fsm_state29");
    sc_trace(mVcdFile, ap_CS_fsm_state30, "ap_CS_fsm_state30");
    sc_trace(mVcdFile, i_reg_272, "i_reg_272");
    sc_trace(mVcdFile, state_q0, "state_q0");
    sc_trace(mVcdFile, tmp_fu_339_p2, "tmp_fu_339_p2");
    sc_trace(mVcdFile, ap_block_state2_pp0_stage0_iter0, "ap_block_state2_pp0_stage0_iter0");
    sc_trace(mVcdFile, ap_block_state3_pp0_stage0_iter1, "ap_block_state3_pp0_stage0_iter1");
    sc_trace(mVcdFile, ap_block_pp0_stage0_11001, "ap_block_pp0_stage0_11001");
    sc_trace(mVcdFile, i_3_fu_345_p2, "i_3_fu_345_p2");
    sc_trace(mVcdFile, i_3_reg_395, "i_3_reg_395");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter0, "ap_enable_reg_pp0_iter0");
    sc_trace(mVcdFile, tmp_s_fu_359_p2, "tmp_s_fu_359_p2");
    sc_trace(mVcdFile, tmp_s_reg_400, "tmp_s_reg_400");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_295_ap_done, "grp_AddRoundKey_fu_295_ap_done");
    sc_trace(mVcdFile, i_4_fu_370_p2, "i_4_fu_370_p2");
    sc_trace(mVcdFile, i_4_reg_408, "i_4_reg_408");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, tmp_19_fu_380_p2, "tmp_19_fu_380_p2");
    sc_trace(mVcdFile, tmp_19_reg_413, "tmp_19_reg_413");
    sc_trace(mVcdFile, exitcond_fu_365_p2, "exitcond_fu_365_p2");
    sc_trace(mVcdFile, ap_block_pp0_stage0_subdone, "ap_block_pp0_stage0_subdone");
    sc_trace(mVcdFile, ap_condition_pp0_exit_iter0_state2, "ap_condition_pp0_exit_iter0_state2");
    sc_trace(mVcdFile, state_address0, "state_address0");
    sc_trace(mVcdFile, state_ce0, "state_ce0");
    sc_trace(mVcdFile, state_we0, "state_we0");
    sc_trace(mVcdFile, state_d0, "state_d0");
    sc_trace(mVcdFile, state_address1, "state_address1");
    sc_trace(mVcdFile, state_ce1, "state_ce1");
    sc_trace(mVcdFile, state_we1, "state_we1");
    sc_trace(mVcdFile, state_d1, "state_d1");
    sc_trace(mVcdFile, state_q1, "state_q1");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_295_ap_start, "grp_AddRoundKey_fu_295_ap_start");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_295_ap_idle, "grp_AddRoundKey_fu_295_ap_idle");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_295_ap_ready, "grp_AddRoundKey_fu_295_ap_ready");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_295_state_address0, "grp_AddRoundKey_fu_295_state_address0");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_295_state_ce0, "grp_AddRoundKey_fu_295_state_ce0");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_295_state_we0, "grp_AddRoundKey_fu_295_state_we0");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_295_state_d0, "grp_AddRoundKey_fu_295_state_d0");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_295_state_address1, "grp_AddRoundKey_fu_295_state_address1");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_295_state_ce1, "grp_AddRoundKey_fu_295_state_ce1");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_295_state_we1, "grp_AddRoundKey_fu_295_state_we1");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_295_state_d1, "grp_AddRoundKey_fu_295_state_d1");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_295_roundKey_TVALID, "grp_AddRoundKey_fu_295_roundKey_TVALID");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_295_roundKey_TREADY, "grp_AddRoundKey_fu_295_roundKey_TREADY");
    sc_trace(mVcdFile, grp_MixColumns_fu_315_ap_start, "grp_MixColumns_fu_315_ap_start");
    sc_trace(mVcdFile, grp_MixColumns_fu_315_ap_done, "grp_MixColumns_fu_315_ap_done");
    sc_trace(mVcdFile, grp_MixColumns_fu_315_ap_idle, "grp_MixColumns_fu_315_ap_idle");
    sc_trace(mVcdFile, grp_MixColumns_fu_315_ap_ready, "grp_MixColumns_fu_315_ap_ready");
    sc_trace(mVcdFile, grp_MixColumns_fu_315_state_address0, "grp_MixColumns_fu_315_state_address0");
    sc_trace(mVcdFile, grp_MixColumns_fu_315_state_ce0, "grp_MixColumns_fu_315_state_ce0");
    sc_trace(mVcdFile, grp_MixColumns_fu_315_state_we0, "grp_MixColumns_fu_315_state_we0");
    sc_trace(mVcdFile, grp_MixColumns_fu_315_state_d0, "grp_MixColumns_fu_315_state_d0");
    sc_trace(mVcdFile, grp_MixColumns_fu_315_state_address1, "grp_MixColumns_fu_315_state_address1");
    sc_trace(mVcdFile, grp_MixColumns_fu_315_state_ce1, "grp_MixColumns_fu_315_state_ce1");
    sc_trace(mVcdFile, grp_SubBytes_fu_322_ap_start, "grp_SubBytes_fu_322_ap_start");
    sc_trace(mVcdFile, grp_SubBytes_fu_322_ap_done, "grp_SubBytes_fu_322_ap_done");
    sc_trace(mVcdFile, grp_SubBytes_fu_322_ap_idle, "grp_SubBytes_fu_322_ap_idle");
    sc_trace(mVcdFile, grp_SubBytes_fu_322_ap_ready, "grp_SubBytes_fu_322_ap_ready");
    sc_trace(mVcdFile, grp_SubBytes_fu_322_state_address0, "grp_SubBytes_fu_322_state_address0");
    sc_trace(mVcdFile, grp_SubBytes_fu_322_state_ce0, "grp_SubBytes_fu_322_state_ce0");
    sc_trace(mVcdFile, grp_SubBytes_fu_322_state_we0, "grp_SubBytes_fu_322_state_we0");
    sc_trace(mVcdFile, grp_SubBytes_fu_322_state_d0, "grp_SubBytes_fu_322_state_d0");
    sc_trace(mVcdFile, grp_SubBytes_fu_322_state_address1, "grp_SubBytes_fu_322_state_address1");
    sc_trace(mVcdFile, grp_SubBytes_fu_322_state_ce1, "grp_SubBytes_fu_322_state_ce1");
    sc_trace(mVcdFile, grp_SubBytes_fu_322_state_we1, "grp_SubBytes_fu_322_state_we1");
    sc_trace(mVcdFile, grp_SubBytes_fu_322_state_d1, "grp_SubBytes_fu_322_state_d1");
    sc_trace(mVcdFile, grp_ShiftRows_fu_329_ap_start, "grp_ShiftRows_fu_329_ap_start");
    sc_trace(mVcdFile, grp_ShiftRows_fu_329_ap_done, "grp_ShiftRows_fu_329_ap_done");
    sc_trace(mVcdFile, grp_ShiftRows_fu_329_ap_idle, "grp_ShiftRows_fu_329_ap_idle");
    sc_trace(mVcdFile, grp_ShiftRows_fu_329_ap_ready, "grp_ShiftRows_fu_329_ap_ready");
    sc_trace(mVcdFile, grp_ShiftRows_fu_329_state_address0, "grp_ShiftRows_fu_329_state_address0");
    sc_trace(mVcdFile, grp_ShiftRows_fu_329_state_ce0, "grp_ShiftRows_fu_329_state_ce0");
    sc_trace(mVcdFile, grp_ShiftRows_fu_329_state_we0, "grp_ShiftRows_fu_329_state_we0");
    sc_trace(mVcdFile, grp_ShiftRows_fu_329_state_d0, "grp_ShiftRows_fu_329_state_d0");
    sc_trace(mVcdFile, grp_ShiftRows_fu_329_state_address1, "grp_ShiftRows_fu_329_state_address1");
    sc_trace(mVcdFile, grp_ShiftRows_fu_329_state_ce1, "grp_ShiftRows_fu_329_state_ce1");
    sc_trace(mVcdFile, ap_phi_mux_i_phi_fu_276_p4, "ap_phi_mux_i_phi_fu_276_p4");
    sc_trace(mVcdFile, i1_reg_284, "i1_reg_284");
    sc_trace(mVcdFile, ap_CS_fsm_state13, "ap_CS_fsm_state13");
    sc_trace(mVcdFile, ap_reg_grp_AddRoundKey_fu_295_ap_start, "ap_reg_grp_AddRoundKey_fu_295_ap_start");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, ap_CS_fsm_state12, "ap_CS_fsm_state12");
    sc_trace(mVcdFile, ap_reg_grp_MixColumns_fu_315_ap_start, "ap_reg_grp_MixColumns_fu_315_ap_start");
    sc_trace(mVcdFile, ap_CS_fsm_state10, "ap_CS_fsm_state10");
    sc_trace(mVcdFile, ap_CS_fsm_state11, "ap_CS_fsm_state11");
    sc_trace(mVcdFile, ap_reg_grp_SubBytes_fu_322_ap_start, "ap_reg_grp_SubBytes_fu_322_ap_start");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, ap_reg_grp_ShiftRows_fu_329_ap_start, "ap_reg_grp_ShiftRows_fu_329_ap_start");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, ap_CS_fsm_state9, "ap_CS_fsm_state9");
    sc_trace(mVcdFile, tmp_18_fu_351_p1, "tmp_18_fu_351_p1");
    sc_trace(mVcdFile, tmp_cast_fu_356_p1, "tmp_cast_fu_356_p1");
    sc_trace(mVcdFile, tmp_67_cast_fu_376_p1, "tmp_67_cast_fu_376_p1");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_block_state11_on_subcall_done, "ap_block_state11_on_subcall_done");
    sc_trace(mVcdFile, ap_idle_pp0, "ap_idle_pp0");
    sc_trace(mVcdFile, ap_enable_pp0, "ap_enable_pp0");
#endif

    }
    mHdltvinHandle.open("AES_Encrypt.hdltvin.dat");
    mHdltvoutHandle.open("AES_Encrypt.hdltvout.dat");
}

AES_Encrypt::~AES_Encrypt() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete state_U;
    delete grp_AddRoundKey_fu_295;
    delete grp_MixColumns_fu_315;
    delete grp_SubBytes_fu_322;
    delete grp_ShiftRows_fu_329;
}

void AES_Encrypt::thread_ap_clk_no_reset_() {
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter0 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state2.read()))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                    esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_1;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter1 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state2.read()))) {
            ap_enable_reg_pp0_iter1 = (ap_condition_pp0_exit_iter0_state2.read() ^ ap_const_logic_1);
        } else if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter1 = ap_enable_reg_pp0_iter0.read();
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                    esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
            ap_enable_reg_pp0_iter1 = ap_const_logic_0;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_reg_grp_AddRoundKey_fu_295_ap_start = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()))) {
            ap_reg_grp_AddRoundKey_fu_295_ap_start = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_AddRoundKey_fu_295_ap_ready.read())) {
            ap_reg_grp_AddRoundKey_fu_295_ap_start = ap_const_logic_0;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_reg_grp_MixColumns_fu_315_ap_start = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
            ap_reg_grp_MixColumns_fu_315_ap_start = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_MixColumns_fu_315_ap_ready.read())) {
            ap_reg_grp_MixColumns_fu_315_ap_start = ap_const_logic_0;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_reg_grp_ShiftRows_fu_329_ap_start = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
            ap_reg_grp_ShiftRows_fu_329_ap_start = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_ShiftRows_fu_329_ap_ready.read())) {
            ap_reg_grp_ShiftRows_fu_329_ap_start = ap_const_logic_0;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_reg_grp_SubBytes_fu_322_ap_start = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
             esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_365_p2.read()))) {
            ap_reg_grp_SubBytes_fu_322_ap_start = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_SubBytes_fu_322_ap_ready.read())) {
            ap_reg_grp_SubBytes_fu_322_ap_start = ap_const_logic_0;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ciphertext_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ciphertext_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ciphertext_1_vld_out.read()))) {
            ciphertext_1_sel_rd =  (sc_logic) (~ciphertext_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ciphertext_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ciphertext_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ciphertext_1_ack_in.read()))) {
            ciphertext_1_sel_wr =  (sc_logic) (~ciphertext_1_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ciphertext_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, ciphertext_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, ciphertext_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, ciphertext_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, ciphertext_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, ciphertext_1_state.read())))) {
            ciphertext_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ciphertext_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, ciphertext_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, ciphertext_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, ciphertext_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, ciphertext_1_state.read())))) {
            ciphertext_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ciphertext_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, ciphertext_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, ciphertext_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, ciphertext_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, ciphertext_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, ciphertext_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, ciphertext_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, ciphertext_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ciphertext_1_ack_out.read()))))) {
            ciphertext_1_state = ap_const_lv2_3;
        } else {
            ciphertext_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        expandedKey_0_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, expandedKey_0_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, expandedKey_0_vld_out.read()))) {
            expandedKey_0_sel_rd =  (sc_logic) (~expandedKey_0_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        expandedKey_0_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, expandedKey_0_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, expandedKey_0_ack_in.read()))) {
            expandedKey_0_sel_wr =  (sc_logic) (~expandedKey_0_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        expandedKey_0_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, expandedKey_0_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, expandedKey_0_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, expandedKey_0_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, expandedKey_0_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, expandedKey_0_state.read())))) {
            expandedKey_0_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, expandedKey_0_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, expandedKey_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, expandedKey_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, expandedKey_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, expandedKey_0_state.read())))) {
            expandedKey_0_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, expandedKey_0_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, expandedKey_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, expandedKey_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, expandedKey_0_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, expandedKey_0_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, expandedKey_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, expandedKey_0_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, expandedKey_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, expandedKey_0_ack_out.read()))))) {
            expandedKey_0_state = ap_const_lv2_3;
        } else {
            expandedKey_0_state = ap_const_lv2_2;
        }
    }
    if (esl_seteq<1,1,1>(grp_AddRoundKey_fu_295_ap_done.read(), ap_const_logic_1)) {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
            i1_reg_284 = i_4_reg_408.read();
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
            i1_reg_284 = ap_const_lv16_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, tmp_reg_391.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        i_reg_272 = i_3_reg_395.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        i_reg_272 = ap_const_lv5_0;
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        plaintext_0_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, plaintext_0_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, plaintext_0_vld_out.read()))) {
            plaintext_0_sel_rd =  (sc_logic) (~plaintext_0_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        plaintext_0_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, plaintext_0_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, plaintext_0_ack_in.read()))) {
            plaintext_0_sel_wr =  (sc_logic) (~plaintext_0_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        plaintext_0_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, plaintext_0_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, plaintext_0_ack_out.read()) && 
              esl_seteq<1,2,2>(plaintext_0_state.read(), ap_const_lv2_3)) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, plaintext_0_vld_in.read()) && 
              esl_seteq<1,2,2>(plaintext_0_state.read(), ap_const_lv2_2)))) {
            plaintext_0_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, plaintext_0_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, plaintext_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(plaintext_0_state.read(), ap_const_lv2_3)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, plaintext_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(plaintext_0_state.read(), ap_const_lv2_1)))) {
            plaintext_0_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, plaintext_0_vld_in.read()) && 
                     esl_seteq<1,2,2>(plaintext_0_state.read(), ap_const_lv2_2)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, plaintext_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(plaintext_0_state.read(), ap_const_lv2_1)) || 
                    (esl_seteq<1,2,2>(plaintext_0_state.read(), ap_const_lv2_3) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, plaintext_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, plaintext_0_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, plaintext_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, plaintext_0_ack_out.read()))))) {
            plaintext_0_state = ap_const_lv2_3;
        } else {
            plaintext_0_state = ap_const_lv2_2;
        }
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ciphertext_1_load_A.read())) {
        ciphertext_1_payload_A = state_q0.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ciphertext_1_load_B.read())) {
        ciphertext_1_payload_B = state_q0.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, expandedKey_0_load_A.read())) {
        expandedKey_0_payload_A = expandedKey_TDATA.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, expandedKey_0_load_B.read())) {
        expandedKey_0_payload_B = expandedKey_TDATA.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()))) {
        i_3_reg_395 = i_3_fu_345_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        i_4_reg_408 = i_4_fu_370_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, plaintext_0_load_A.read())) {
        plaintext_0_payload_A = plaintext_TDATA.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, plaintext_0_load_B.read())) {
        plaintext_0_payload_B = plaintext_TDATA.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_365_p2.read()))) {
        tmp_19_reg_413 = tmp_19_fu_380_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        tmp_reg_391 = tmp_fu_339_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && esl_seteq<1,1,1>(grp_AddRoundKey_fu_295_ap_done.read(), ap_const_logic_1))) {
        tmp_s_reg_400 = tmp_s_fu_359_p2.read();
    }
}

void AES_Encrypt::thread_ap_CS_fsm_pp0_stage0() {
    ap_CS_fsm_pp0_stage0 = ap_CS_fsm.read()[1];
}

void AES_Encrypt::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void AES_Encrypt::thread_ap_CS_fsm_state10() {
    ap_CS_fsm_state10 = ap_CS_fsm.read()[8];
}

void AES_Encrypt::thread_ap_CS_fsm_state11() {
    ap_CS_fsm_state11 = ap_CS_fsm.read()[9];
}

void AES_Encrypt::thread_ap_CS_fsm_state12() {
    ap_CS_fsm_state12 = ap_CS_fsm.read()[10];
}

void AES_Encrypt::thread_ap_CS_fsm_state13() {
    ap_CS_fsm_state13 = ap_CS_fsm.read()[11];
}

void AES_Encrypt::thread_ap_CS_fsm_state14() {
    ap_CS_fsm_state14 = ap_CS_fsm.read()[12];
}

void AES_Encrypt::thread_ap_CS_fsm_state15() {
    ap_CS_fsm_state15 = ap_CS_fsm.read()[13];
}

void AES_Encrypt::thread_ap_CS_fsm_state16() {
    ap_CS_fsm_state16 = ap_CS_fsm.read()[14];
}

void AES_Encrypt::thread_ap_CS_fsm_state17() {
    ap_CS_fsm_state17 = ap_CS_fsm.read()[15];
}

void AES_Encrypt::thread_ap_CS_fsm_state18() {
    ap_CS_fsm_state18 = ap_CS_fsm.read()[16];
}

void AES_Encrypt::thread_ap_CS_fsm_state19() {
    ap_CS_fsm_state19 = ap_CS_fsm.read()[17];
}

void AES_Encrypt::thread_ap_CS_fsm_state20() {
    ap_CS_fsm_state20 = ap_CS_fsm.read()[18];
}

void AES_Encrypt::thread_ap_CS_fsm_state21() {
    ap_CS_fsm_state21 = ap_CS_fsm.read()[19];
}

void AES_Encrypt::thread_ap_CS_fsm_state22() {
    ap_CS_fsm_state22 = ap_CS_fsm.read()[20];
}

void AES_Encrypt::thread_ap_CS_fsm_state23() {
    ap_CS_fsm_state23 = ap_CS_fsm.read()[21];
}

void AES_Encrypt::thread_ap_CS_fsm_state24() {
    ap_CS_fsm_state24 = ap_CS_fsm.read()[22];
}

void AES_Encrypt::thread_ap_CS_fsm_state25() {
    ap_CS_fsm_state25 = ap_CS_fsm.read()[23];
}

void AES_Encrypt::thread_ap_CS_fsm_state26() {
    ap_CS_fsm_state26 = ap_CS_fsm.read()[24];
}

void AES_Encrypt::thread_ap_CS_fsm_state27() {
    ap_CS_fsm_state27 = ap_CS_fsm.read()[25];
}

void AES_Encrypt::thread_ap_CS_fsm_state28() {
    ap_CS_fsm_state28 = ap_CS_fsm.read()[26];
}

void AES_Encrypt::thread_ap_CS_fsm_state29() {
    ap_CS_fsm_state29 = ap_CS_fsm.read()[27];
}

void AES_Encrypt::thread_ap_CS_fsm_state30() {
    ap_CS_fsm_state30 = ap_CS_fsm.read()[28];
}

void AES_Encrypt::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[2];
}

void AES_Encrypt::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[3];
}

void AES_Encrypt::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[4];
}

void AES_Encrypt::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[5];
}

void AES_Encrypt::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read()[6];
}

void AES_Encrypt::thread_ap_CS_fsm_state9() {
    ap_CS_fsm_state9 = ap_CS_fsm.read()[7];
}

void AES_Encrypt::thread_ap_block_pp0_stage0() {
    ap_block_pp0_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void AES_Encrypt::thread_ap_block_pp0_stage0_11001() {
    ap_block_pp0_stage0_11001 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, tmp_reg_391.read()) && esl_seteq<1,1,1>(ap_const_logic_0, plaintext_0_vld_out.read()));
}

void AES_Encrypt::thread_ap_block_pp0_stage0_subdone() {
    ap_block_pp0_stage0_subdone = (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, tmp_reg_391.read()) && esl_seteq<1,1,1>(ap_const_logic_0, plaintext_0_vld_out.read()));
}

void AES_Encrypt::thread_ap_block_state11_on_subcall_done() {
    ap_block_state11_on_subcall_done = (esl_seteq<1,1,1>(ap_const_lv1_0, tmp_19_reg_413.read()) && esl_seteq<1,1,1>(ap_const_logic_0, grp_MixColumns_fu_315_ap_done.read()));
}

void AES_Encrypt::thread_ap_block_state2_pp0_stage0_iter0() {
    ap_block_state2_pp0_stage0_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void AES_Encrypt::thread_ap_block_state3_pp0_stage0_iter1() {
    ap_block_state3_pp0_stage0_iter1 = (esl_seteq<1,1,1>(ap_const_lv1_0, tmp_reg_391.read()) && esl_seteq<1,1,1>(ap_const_logic_0, plaintext_0_vld_out.read()));
}

void AES_Encrypt::thread_ap_condition_pp0_exit_iter0_state2() {
    if (esl_seteq<1,1,1>(ap_const_lv1_1, tmp_fu_339_p2.read())) {
        ap_condition_pp0_exit_iter0_state2 = ap_const_logic_1;
    } else {
        ap_condition_pp0_exit_iter0_state2 = ap_const_logic_0;
    }
}

void AES_Encrypt::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state30.read()) && 
         esl_seteq<1,1,1>(ciphertext_1_ack_in.read(), ap_const_logic_1))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void AES_Encrypt::thread_ap_enable_pp0() {
    ap_enable_pp0 = (ap_idle_pp0.read() ^ ap_const_logic_1);
}

void AES_Encrypt::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void AES_Encrypt::thread_ap_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()))) {
        ap_idle_pp0 = ap_const_logic_1;
    } else {
        ap_idle_pp0 = ap_const_logic_0;
    }
}

void AES_Encrypt::thread_ap_phi_mux_i_phi_fu_276_p4() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, tmp_reg_391.read()))) {
        ap_phi_mux_i_phi_fu_276_p4 = i_3_reg_395.read();
    } else {
        ap_phi_mux_i_phi_fu_276_p4 = i_reg_272.read();
    }
}

void AES_Encrypt::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state30.read()) && 
         esl_seteq<1,1,1>(ciphertext_1_ack_in.read(), ap_const_logic_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void AES_Encrypt::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void AES_Encrypt::thread_ciphertext_1_ack_in() {
    ciphertext_1_ack_in = ciphertext_1_state.read()[1];
}

void AES_Encrypt::thread_ciphertext_1_ack_out() {
    ciphertext_1_ack_out = ciphertext_TREADY.read();
}

void AES_Encrypt::thread_ciphertext_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ciphertext_1_sel.read())) {
        ciphertext_1_data_out = ciphertext_1_payload_B.read();
    } else {
        ciphertext_1_data_out = ciphertext_1_payload_A.read();
    }
}

void AES_Encrypt::thread_ciphertext_1_load_A() {
    ciphertext_1_load_A = (ciphertext_1_state_cmp_full.read() & ~ciphertext_1_sel_wr.read());
}

void AES_Encrypt::thread_ciphertext_1_load_B() {
    ciphertext_1_load_B = (ciphertext_1_sel_wr.read() & ciphertext_1_state_cmp_full.read());
}

void AES_Encrypt::thread_ciphertext_1_sel() {
    ciphertext_1_sel = ciphertext_1_sel_rd.read();
}

void AES_Encrypt::thread_ciphertext_1_state_cmp_full() {
    ciphertext_1_state_cmp_full =  (sc_logic) ((!ciphertext_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(ciphertext_1_state.read() != ap_const_lv2_1))[0];
}

void AES_Encrypt::thread_ciphertext_1_vld_in() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) && 
          esl_seteq<1,1,1>(ciphertext_1_ack_in.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) && 
          esl_seteq<1,1,1>(ciphertext_1_ack_in.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) && 
          esl_seteq<1,1,1>(ciphertext_1_ack_in.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()) && 
          esl_seteq<1,1,1>(ciphertext_1_ack_in.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()) && 
          esl_seteq<1,1,1>(ciphertext_1_ack_in.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()) && 
          esl_seteq<1,1,1>(ciphertext_1_ack_in.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read()) && 
          esl_seteq<1,1,1>(ciphertext_1_ack_in.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read()) && 
          esl_seteq<1,1,1>(ciphertext_1_ack_in.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read()) && 
          esl_seteq<1,1,1>(ciphertext_1_ack_in.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read()) && 
          esl_seteq<1,1,1>(ciphertext_1_ack_in.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state24.read()) && 
          esl_seteq<1,1,1>(ciphertext_1_ack_in.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read()) && 
          esl_seteq<1,1,1>(ciphertext_1_ack_in.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state26.read()) && 
          esl_seteq<1,1,1>(ciphertext_1_ack_in.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read()) && 
          esl_seteq<1,1,1>(ciphertext_1_ack_in.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state28.read()) && 
          esl_seteq<1,1,1>(ciphertext_1_ack_in.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state29.read()) && 
          esl_seteq<1,1,1>(ciphertext_1_ack_in.read(), ap_const_logic_1)))) {
        ciphertext_1_vld_in = ap_const_logic_1;
    } else {
        ciphertext_1_vld_in = ap_const_logic_0;
    }
}

void AES_Encrypt::thread_ciphertext_1_vld_out() {
    ciphertext_1_vld_out = ciphertext_1_state.read()[0];
}

void AES_Encrypt::thread_ciphertext_TDATA() {
    ciphertext_TDATA = ciphertext_1_data_out.read();
}

void AES_Encrypt::thread_ciphertext_TDATA_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state24.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state26.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state28.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state29.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state30.read()))) {
        ciphertext_TDATA_blk_n = ciphertext_1_state.read()[1];
    } else {
        ciphertext_TDATA_blk_n = ap_const_logic_1;
    }
}

void AES_Encrypt::thread_ciphertext_TVALID() {
    ciphertext_TVALID = ciphertext_1_state.read()[0];
}

void AES_Encrypt::thread_exitcond_fu_365_p2() {
    exitcond_fu_365_p2 = (!i1_reg_284.read().is_01() || !Nr.read().is_01())? sc_lv<1>(): sc_lv<1>(i1_reg_284.read() == Nr.read());
}

void AES_Encrypt::thread_expandedKey_0_ack_in() {
    expandedKey_0_ack_in = expandedKey_0_state.read()[1];
}

void AES_Encrypt::thread_expandedKey_0_ack_out() {
    expandedKey_0_ack_out = grp_AddRoundKey_fu_295_roundKey_TREADY.read();
}

void AES_Encrypt::thread_expandedKey_0_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, expandedKey_0_sel.read())) {
        expandedKey_0_data_out = expandedKey_0_payload_B.read();
    } else {
        expandedKey_0_data_out = expandedKey_0_payload_A.read();
    }
}

void AES_Encrypt::thread_expandedKey_0_load_A() {
    expandedKey_0_load_A = (expandedKey_0_state_cmp_full.read() & ~expandedKey_0_sel_wr.read());
}

void AES_Encrypt::thread_expandedKey_0_load_B() {
    expandedKey_0_load_B = (expandedKey_0_sel_wr.read() & expandedKey_0_state_cmp_full.read());
}

void AES_Encrypt::thread_expandedKey_0_sel() {
    expandedKey_0_sel = expandedKey_0_sel_rd.read();
}

void AES_Encrypt::thread_expandedKey_0_state_cmp_full() {
    expandedKey_0_state_cmp_full =  (sc_logic) ((!expandedKey_0_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(expandedKey_0_state.read() != ap_const_lv2_1))[0];
}

void AES_Encrypt::thread_expandedKey_0_vld_in() {
    expandedKey_0_vld_in = expandedKey_TVALID.read();
}

void AES_Encrypt::thread_expandedKey_0_vld_out() {
    expandedKey_0_vld_out = expandedKey_0_state.read()[0];
}

void AES_Encrypt::thread_expandedKey_TREADY() {
    expandedKey_TREADY = expandedKey_0_state.read()[1];
}

void AES_Encrypt::thread_grp_AddRoundKey_fu_295_ap_start() {
    grp_AddRoundKey_fu_295_ap_start = ap_reg_grp_AddRoundKey_fu_295_ap_start.read();
}

void AES_Encrypt::thread_grp_AddRoundKey_fu_295_roundKey_TVALID() {
    grp_AddRoundKey_fu_295_roundKey_TVALID = expandedKey_0_state.read()[0];
}

void AES_Encrypt::thread_grp_MixColumns_fu_315_ap_start() {
    grp_MixColumns_fu_315_ap_start = ap_reg_grp_MixColumns_fu_315_ap_start.read();
}

void AES_Encrypt::thread_grp_ShiftRows_fu_329_ap_start() {
    grp_ShiftRows_fu_329_ap_start = ap_reg_grp_ShiftRows_fu_329_ap_start.read();
}

void AES_Encrypt::thread_grp_SubBytes_fu_322_ap_start() {
    grp_SubBytes_fu_322_ap_start = ap_reg_grp_SubBytes_fu_322_ap_start.read();
}

void AES_Encrypt::thread_i_3_fu_345_p2() {
    i_3_fu_345_p2 = (!ap_phi_mux_i_phi_fu_276_p4.read().is_01() || !ap_const_lv5_1.is_01())? sc_lv<5>(): (sc_biguint<5>(ap_phi_mux_i_phi_fu_276_p4.read()) + sc_biguint<5>(ap_const_lv5_1));
}

void AES_Encrypt::thread_i_4_fu_370_p2() {
    i_4_fu_370_p2 = (!i1_reg_284.read().is_01() || !ap_const_lv16_1.is_01())? sc_lv<16>(): (sc_biguint<16>(i1_reg_284.read()) + sc_biguint<16>(ap_const_lv16_1));
}

void AES_Encrypt::thread_plaintext_0_ack_in() {
    plaintext_0_ack_in = plaintext_0_state.read()[1];
}

void AES_Encrypt::thread_plaintext_0_ack_out() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, tmp_reg_391.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        plaintext_0_ack_out = ap_const_logic_1;
    } else {
        plaintext_0_ack_out = ap_const_logic_0;
    }
}

void AES_Encrypt::thread_plaintext_0_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, plaintext_0_sel.read())) {
        plaintext_0_data_out = plaintext_0_payload_B.read();
    } else {
        plaintext_0_data_out = plaintext_0_payload_A.read();
    }
}

void AES_Encrypt::thread_plaintext_0_load_A() {
    plaintext_0_load_A = (plaintext_0_state_cmp_full.read() & ~plaintext_0_sel_wr.read());
}

void AES_Encrypt::thread_plaintext_0_load_B() {
    plaintext_0_load_B = (plaintext_0_sel_wr.read() & plaintext_0_state_cmp_full.read());
}

void AES_Encrypt::thread_plaintext_0_sel() {
    plaintext_0_sel = plaintext_0_sel_rd.read();
}

void AES_Encrypt::thread_plaintext_0_state_cmp_full() {
    plaintext_0_state_cmp_full =  (sc_logic) ((!plaintext_0_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(plaintext_0_state.read() != ap_const_lv2_1))[0];
}

void AES_Encrypt::thread_plaintext_0_vld_in() {
    plaintext_0_vld_in = plaintext_TVALID.read();
}

void AES_Encrypt::thread_plaintext_0_vld_out() {
    plaintext_0_vld_out = plaintext_0_state.read()[0];
}

void AES_Encrypt::thread_plaintext_TDATA_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, tmp_reg_391.read()))) {
        plaintext_TDATA_blk_n = plaintext_0_state.read()[0];
    } else {
        plaintext_TDATA_blk_n = ap_const_logic_1;
    }
}

void AES_Encrypt::thread_plaintext_TREADY() {
    plaintext_TREADY = plaintext_0_state.read()[1];
}

void AES_Encrypt::thread_state_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state28.read())) {
        state_address0 =  (sc_lv<4>) (ap_const_lv64_F);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read())) {
        state_address0 =  (sc_lv<4>) (ap_const_lv64_E);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state26.read())) {
        state_address0 =  (sc_lv<4>) (ap_const_lv64_D);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read())) {
        state_address0 =  (sc_lv<4>) (ap_const_lv64_C);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state24.read())) {
        state_address0 =  (sc_lv<4>) (ap_const_lv64_B);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read())) {
        state_address0 =  (sc_lv<4>) (ap_const_lv64_A);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read())) {
        state_address0 =  (sc_lv<4>) (ap_const_lv64_9);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read())) {
        state_address0 =  (sc_lv<4>) (ap_const_lv64_8);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read())) {
        state_address0 =  (sc_lv<4>) (ap_const_lv64_7);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read())) {
        state_address0 =  (sc_lv<4>) (ap_const_lv64_6);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read())) {
        state_address0 =  (sc_lv<4>) (ap_const_lv64_5);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read())) {
        state_address0 =  (sc_lv<4>) (ap_const_lv64_4);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read())) {
        state_address0 =  (sc_lv<4>) (ap_const_lv64_3);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read())) {
        state_address0 =  (sc_lv<4>) (ap_const_lv64_2);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
        state_address0 =  (sc_lv<4>) (ap_const_lv64_1);
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_1, exitcond_fu_365_p2.read()))) {
        state_address0 =  (sc_lv<4>) (ap_const_lv64_0);
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
                esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
        state_address0 =  (sc_lv<4>) (tmp_18_fu_351_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        state_address0 = grp_ShiftRows_fu_329_state_address0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        state_address0 = grp_SubBytes_fu_322_state_address0.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, tmp_19_reg_413.read()))) {
        state_address0 = grp_MixColumns_fu_315_state_address0.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()))) {
        state_address0 = grp_AddRoundKey_fu_295_state_address0.read();
    } else {
        state_address0 =  (sc_lv<4>) ("XXXX");
    }
}

void AES_Encrypt::thread_state_address1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        state_address1 = grp_ShiftRows_fu_329_state_address1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        state_address1 = grp_SubBytes_fu_322_state_address1.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, tmp_19_reg_413.read()))) {
        state_address1 = grp_MixColumns_fu_315_state_address1.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()))) {
        state_address1 = grp_AddRoundKey_fu_295_state_address1.read();
    } else {
        state_address1 =  (sc_lv<4>) ("XXXX");
    }
}

void AES_Encrypt::thread_state_ce0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) && 
          esl_seteq<1,1,1>(ciphertext_1_ack_in.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) && 
          esl_seteq<1,1,1>(ciphertext_1_ack_in.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) && 
          esl_seteq<1,1,1>(ciphertext_1_ack_in.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()) && 
          esl_seteq<1,1,1>(ciphertext_1_ack_in.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()) && 
          esl_seteq<1,1,1>(ciphertext_1_ack_in.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()) && 
          esl_seteq<1,1,1>(ciphertext_1_ack_in.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read()) && 
          esl_seteq<1,1,1>(ciphertext_1_ack_in.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read()) && 
          esl_seteq<1,1,1>(ciphertext_1_ack_in.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read()) && 
          esl_seteq<1,1,1>(ciphertext_1_ack_in.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read()) && 
          esl_seteq<1,1,1>(ciphertext_1_ack_in.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state24.read()) && 
          esl_seteq<1,1,1>(ciphertext_1_ack_in.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read()) && 
          esl_seteq<1,1,1>(ciphertext_1_ack_in.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state26.read()) && 
          esl_seteq<1,1,1>(ciphertext_1_ack_in.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read()) && 
          esl_seteq<1,1,1>(ciphertext_1_ack_in.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state28.read()) && 
          esl_seteq<1,1,1>(ciphertext_1_ack_in.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, exitcond_fu_365_p2.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)))) {
        state_ce0 = ap_const_logic_1;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        state_ce0 = grp_ShiftRows_fu_329_state_ce0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        state_ce0 = grp_SubBytes_fu_322_state_ce0.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, tmp_19_reg_413.read()))) {
        state_ce0 = grp_MixColumns_fu_315_state_ce0.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()))) {
        state_ce0 = grp_AddRoundKey_fu_295_state_ce0.read();
    } else {
        state_ce0 = ap_const_logic_0;
    }
}

void AES_Encrypt::thread_state_ce1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        state_ce1 = grp_ShiftRows_fu_329_state_ce1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        state_ce1 = grp_SubBytes_fu_322_state_ce1.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, tmp_19_reg_413.read()))) {
        state_ce1 = grp_MixColumns_fu_315_state_ce1.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()))) {
        state_ce1 = grp_AddRoundKey_fu_295_state_ce1.read();
    } else {
        state_ce1 = ap_const_logic_0;
    }
}

void AES_Encrypt::thread_state_d0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
        state_d0 = plaintext_0_data_out.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        state_d0 = grp_ShiftRows_fu_329_state_d0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        state_d0 = grp_SubBytes_fu_322_state_d0.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, tmp_19_reg_413.read()))) {
        state_d0 = grp_MixColumns_fu_315_state_d0.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()))) {
        state_d0 = grp_AddRoundKey_fu_295_state_d0.read();
    } else {
        state_d0 =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void AES_Encrypt::thread_state_d1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        state_d1 = grp_SubBytes_fu_322_state_d1.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()))) {
        state_d1 = grp_AddRoundKey_fu_295_state_d1.read();
    } else {
        state_d1 =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void AES_Encrypt::thread_state_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, tmp_reg_391.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        state_we0 = ap_const_logic_1;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        state_we0 = grp_ShiftRows_fu_329_state_we0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        state_we0 = grp_SubBytes_fu_322_state_we0.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, tmp_19_reg_413.read()))) {
        state_we0 = grp_MixColumns_fu_315_state_we0.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()))) {
        state_we0 = grp_AddRoundKey_fu_295_state_we0.read();
    } else {
        state_we0 = ap_const_logic_0;
    }
}

void AES_Encrypt::thread_state_we1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        state_we1 = grp_SubBytes_fu_322_state_we1.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()))) {
        state_we1 = grp_AddRoundKey_fu_295_state_we1.read();
    } else {
        state_we1 = ap_const_logic_0;
    }
}

void AES_Encrypt::thread_tmp_18_fu_351_p1() {
    tmp_18_fu_351_p1 = esl_zext<64,5>(i_reg_272.read());
}

void AES_Encrypt::thread_tmp_19_fu_380_p2() {
    tmp_19_fu_380_p2 = (!tmp_67_cast_fu_376_p1.read().is_01() || !tmp_s_reg_400.read().is_01())? sc_lv<1>(): sc_lv<1>(tmp_67_cast_fu_376_p1.read() == tmp_s_reg_400.read());
}

void AES_Encrypt::thread_tmp_67_cast_fu_376_p1() {
    tmp_67_cast_fu_376_p1 = esl_zext<17,16>(i1_reg_284.read());
}

void AES_Encrypt::thread_tmp_cast_fu_356_p1() {
    tmp_cast_fu_356_p1 = esl_zext<17,16>(Nr.read());
}

void AES_Encrypt::thread_tmp_fu_339_p2() {
    tmp_fu_339_p2 = (!ap_phi_mux_i_phi_fu_276_p4.read().is_01() || !ap_const_lv5_10.is_01())? sc_lv<1>(): sc_lv<1>(ap_phi_mux_i_phi_fu_276_p4.read() == ap_const_lv5_10);
}

void AES_Encrypt::thread_tmp_s_fu_359_p2() {
    tmp_s_fu_359_p2 = (!tmp_cast_fu_356_p1.read().is_01() || !ap_const_lv17_1FFFF.is_01())? sc_lv<17>(): (sc_biguint<17>(tmp_cast_fu_356_p1.read()) + sc_bigint<17>(ap_const_lv17_1FFFF));
}

void AES_Encrypt::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if (!(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_lv1_1, tmp_fu_339_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_lv1_1, tmp_fu_339_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state4;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 8 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && esl_seteq<1,1,1>(grp_AddRoundKey_fu_295_ap_done.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state6;
            } else {
                ap_NS_fsm = ap_ST_fsm_state5;
            }
            break;
        case 16 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, exitcond_fu_365_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state14;
            } else {
                ap_NS_fsm = ap_ST_fsm_state7;
            }
            break;
        case 32 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && esl_seteq<1,1,1>(grp_SubBytes_fu_322_ap_done.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state8;
            } else {
                ap_NS_fsm = ap_ST_fsm_state7;
            }
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state9;
            break;
        case 128 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) && esl_seteq<1,1,1>(grp_ShiftRows_fu_329_ap_done.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_lv1_1, tmp_19_reg_413.read()))) {
                ap_NS_fsm = ap_ST_fsm_state11;
            } else if ((esl_seteq<1,1,1>(ap_const_lv1_0, tmp_19_reg_413.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) && esl_seteq<1,1,1>(grp_ShiftRows_fu_329_ap_done.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state10;
            } else {
                ap_NS_fsm = ap_ST_fsm_state9;
            }
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_fsm_state11;
            break;
        case 512 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) && esl_seteq<1,1,1>(ap_block_state11_on_subcall_done.read(), ap_const_boolean_0))) {
                ap_NS_fsm = ap_ST_fsm_state12;
            } else {
                ap_NS_fsm = ap_ST_fsm_state11;
            }
            break;
        case 1024 : 
            ap_NS_fsm = ap_ST_fsm_state13;
            break;
        case 2048 : 
            if ((esl_seteq<1,1,1>(grp_AddRoundKey_fu_295_ap_done.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()))) {
                ap_NS_fsm = ap_ST_fsm_state6;
            } else {
                ap_NS_fsm = ap_ST_fsm_state13;
            }
            break;
        case 4096 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) && esl_seteq<1,1,1>(ciphertext_1_ack_in.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state15;
            } else {
                ap_NS_fsm = ap_ST_fsm_state14;
            }
            break;
        case 8192 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) && esl_seteq<1,1,1>(ciphertext_1_ack_in.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state16;
            } else {
                ap_NS_fsm = ap_ST_fsm_state15;
            }
            break;
        case 16384 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) && esl_seteq<1,1,1>(ciphertext_1_ack_in.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state17;
            } else {
                ap_NS_fsm = ap_ST_fsm_state16;
            }
            break;
        case 32768 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()) && esl_seteq<1,1,1>(ciphertext_1_ack_in.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state18;
            } else {
                ap_NS_fsm = ap_ST_fsm_state17;
            }
            break;
        case 65536 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()) && esl_seteq<1,1,1>(ciphertext_1_ack_in.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state19;
            } else {
                ap_NS_fsm = ap_ST_fsm_state18;
            }
            break;
        case 131072 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()) && esl_seteq<1,1,1>(ciphertext_1_ack_in.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state20;
            } else {
                ap_NS_fsm = ap_ST_fsm_state19;
            }
            break;
        case 262144 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read()) && esl_seteq<1,1,1>(ciphertext_1_ack_in.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state21;
            } else {
                ap_NS_fsm = ap_ST_fsm_state20;
            }
            break;
        case 524288 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read()) && esl_seteq<1,1,1>(ciphertext_1_ack_in.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state22;
            } else {
                ap_NS_fsm = ap_ST_fsm_state21;
            }
            break;
        case 1048576 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read()) && esl_seteq<1,1,1>(ciphertext_1_ack_in.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state23;
            } else {
                ap_NS_fsm = ap_ST_fsm_state22;
            }
            break;
        case 2097152 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read()) && esl_seteq<1,1,1>(ciphertext_1_ack_in.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state24;
            } else {
                ap_NS_fsm = ap_ST_fsm_state23;
            }
            break;
        case 4194304 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state24.read()) && esl_seteq<1,1,1>(ciphertext_1_ack_in.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state25;
            } else {
                ap_NS_fsm = ap_ST_fsm_state24;
            }
            break;
        case 8388608 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read()) && esl_seteq<1,1,1>(ciphertext_1_ack_in.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state26;
            } else {
                ap_NS_fsm = ap_ST_fsm_state25;
            }
            break;
        case 16777216 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state26.read()) && esl_seteq<1,1,1>(ciphertext_1_ack_in.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state27;
            } else {
                ap_NS_fsm = ap_ST_fsm_state26;
            }
            break;
        case 33554432 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read()) && esl_seteq<1,1,1>(ciphertext_1_ack_in.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state28;
            } else {
                ap_NS_fsm = ap_ST_fsm_state27;
            }
            break;
        case 67108864 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state28.read()) && esl_seteq<1,1,1>(ciphertext_1_ack_in.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state29;
            } else {
                ap_NS_fsm = ap_ST_fsm_state28;
            }
            break;
        case 134217728 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state29.read()) && esl_seteq<1,1,1>(ciphertext_1_ack_in.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state30;
            } else {
                ap_NS_fsm = ap_ST_fsm_state29;
            }
            break;
        case 268435456 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state30.read()) && esl_seteq<1,1,1>(ciphertext_1_ack_in.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state30;
            }
            break;
        default : 
            ap_NS_fsm =  (sc_lv<29>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
            break;
    }
}

void AES_Encrypt::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"plaintext_TDATA\" :  \"" << plaintext_TDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"plaintext_TVALID\" :  \"" << plaintext_TVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"plaintext_TREADY\" :  \"" << plaintext_TREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"expandedKey_TDATA\" :  \"" << expandedKey_TDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"expandedKey_TVALID\" :  \"" << expandedKey_TVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"expandedKey_TREADY\" :  \"" << expandedKey_TREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"Nr\" :  \"" << Nr.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ciphertext_TDATA\" :  \"" << ciphertext_TDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ciphertext_TVALID\" :  \"" << ciphertext_TVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ciphertext_TREADY\" :  \"" << ciphertext_TREADY.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

