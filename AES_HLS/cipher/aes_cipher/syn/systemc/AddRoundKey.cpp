// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "AddRoundKey.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic AddRoundKey::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic AddRoundKey::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<16> AddRoundKey::ap_ST_fsm_state1 = "1";
const sc_lv<16> AddRoundKey::ap_ST_fsm_state2 = "10";
const sc_lv<16> AddRoundKey::ap_ST_fsm_state3 = "100";
const sc_lv<16> AddRoundKey::ap_ST_fsm_state4 = "1000";
const sc_lv<16> AddRoundKey::ap_ST_fsm_state5 = "10000";
const sc_lv<16> AddRoundKey::ap_ST_fsm_state6 = "100000";
const sc_lv<16> AddRoundKey::ap_ST_fsm_state7 = "1000000";
const sc_lv<16> AddRoundKey::ap_ST_fsm_state8 = "10000000";
const sc_lv<16> AddRoundKey::ap_ST_fsm_state9 = "100000000";
const sc_lv<16> AddRoundKey::ap_ST_fsm_state10 = "1000000000";
const sc_lv<16> AddRoundKey::ap_ST_fsm_state11 = "10000000000";
const sc_lv<16> AddRoundKey::ap_ST_fsm_state12 = "100000000000";
const sc_lv<16> AddRoundKey::ap_ST_fsm_state13 = "1000000000000";
const sc_lv<16> AddRoundKey::ap_ST_fsm_state14 = "10000000000000";
const sc_lv<16> AddRoundKey::ap_ST_fsm_state15 = "100000000000000";
const sc_lv<16> AddRoundKey::ap_ST_fsm_state16 = "1000000000000000";
const sc_lv<32> AddRoundKey::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> AddRoundKey::ap_const_lv32_1 = "1";
const sc_lv<32> AddRoundKey::ap_const_lv32_2 = "10";
const sc_lv<32> AddRoundKey::ap_const_lv32_3 = "11";
const sc_lv<32> AddRoundKey::ap_const_lv32_4 = "100";
const sc_lv<32> AddRoundKey::ap_const_lv32_5 = "101";
const sc_lv<32> AddRoundKey::ap_const_lv32_6 = "110";
const sc_lv<32> AddRoundKey::ap_const_lv32_7 = "111";
const sc_lv<32> AddRoundKey::ap_const_lv32_8 = "1000";
const sc_lv<32> AddRoundKey::ap_const_lv32_9 = "1001";
const sc_lv<32> AddRoundKey::ap_const_lv32_A = "1010";
const sc_lv<32> AddRoundKey::ap_const_lv32_B = "1011";
const sc_lv<32> AddRoundKey::ap_const_lv32_C = "1100";
const sc_lv<32> AddRoundKey::ap_const_lv32_D = "1101";
const sc_lv<32> AddRoundKey::ap_const_lv32_E = "1110";
const sc_lv<32> AddRoundKey::ap_const_lv32_F = "1111";
const sc_lv<64> AddRoundKey::ap_const_lv64_0 = "0000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<64> AddRoundKey::ap_const_lv64_1 = "1";
const sc_lv<64> AddRoundKey::ap_const_lv64_2 = "10";
const sc_lv<64> AddRoundKey::ap_const_lv64_3 = "11";
const sc_lv<64> AddRoundKey::ap_const_lv64_4 = "100";
const sc_lv<64> AddRoundKey::ap_const_lv64_5 = "101";
const sc_lv<64> AddRoundKey::ap_const_lv64_6 = "110";
const sc_lv<64> AddRoundKey::ap_const_lv64_7 = "111";
const sc_lv<64> AddRoundKey::ap_const_lv64_8 = "1000";
const sc_lv<64> AddRoundKey::ap_const_lv64_9 = "1001";
const sc_lv<64> AddRoundKey::ap_const_lv64_A = "1010";
const sc_lv<64> AddRoundKey::ap_const_lv64_B = "1011";
const sc_lv<64> AddRoundKey::ap_const_lv64_C = "1100";
const sc_lv<64> AddRoundKey::ap_const_lv64_D = "1101";
const sc_lv<64> AddRoundKey::ap_const_lv64_E = "1110";
const sc_lv<64> AddRoundKey::ap_const_lv64_F = "1111";
const bool AddRoundKey::ap_const_boolean_1 = true;

AddRoundKey::AddRoundKey(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state10);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state11);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state12);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state13);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state14);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state15);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state16);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state9);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_state1);
    sensitive << ( ap_start );
    sensitive << ( roundKey_TVALID );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( roundKey_TVALID );
    sensitive << ( ap_CS_fsm_state16 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( roundKey_TVALID );
    sensitive << ( ap_CS_fsm_state16 );

    SC_METHOD(thread_grp_fu_220_p2);
    sensitive << ( roundKey_TDATA );
    sensitive << ( reg_205 );

    SC_METHOD(thread_grp_fu_226_p2);
    sensitive << ( roundKey_TDATA );
    sensitive << ( reg_210 );

    SC_METHOD(thread_grp_fu_232_p2);
    sensitive << ( roundKey_TDATA );
    sensitive << ( reg_215 );

    SC_METHOD(thread_roundKey_TDATA_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( roundKey_TVALID );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state16 );

    SC_METHOD(thread_roundKey_TREADY);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( roundKey_TVALID );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state16 );

    SC_METHOD(thread_state_addr_48_reg_304);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( roundKey_TVALID );

    SC_METHOD(thread_state_addr_49_reg_319);
    sensitive << ( roundKey_TVALID );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_state_addr_50_reg_324);
    sensitive << ( roundKey_TVALID );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_state_addr_51_reg_334);
    sensitive << ( roundKey_TVALID );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_state_addr_52_reg_339);
    sensitive << ( roundKey_TVALID );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_state_addr_53_reg_344);
    sensitive << ( roundKey_TVALID );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_state_addr_54_reg_349);
    sensitive << ( roundKey_TVALID );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_state_addr_55_reg_359);
    sensitive << ( roundKey_TVALID );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_state_addr_56_reg_364);
    sensitive << ( roundKey_TVALID );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_state_addr_57_reg_374);
    sensitive << ( roundKey_TVALID );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_state_addr_58_reg_379);
    sensitive << ( roundKey_TVALID );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_state_addr_59_reg_394);
    sensitive << ( roundKey_TVALID );
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_state_addr_60_reg_399);
    sensitive << ( roundKey_TVALID );
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_state_addr_61_reg_409);
    sensitive << ( roundKey_TVALID );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_state_addr_62_reg_414);
    sensitive << ( roundKey_TVALID );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_state_addr_reg_299);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( roundKey_TVALID );

    SC_METHOD(thread_state_address0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( state_addr_reg_299 );
    sensitive << ( state_addr_49_reg_319 );
    sensitive << ( state_addr_51_reg_334 );
    sensitive << ( state_addr_53_reg_344 );
    sensitive << ( state_addr_55_reg_359 );
    sensitive << ( state_addr_57_reg_374 );
    sensitive << ( state_addr_59_reg_394 );
    sensitive << ( state_addr_61_reg_409 );

    SC_METHOD(thread_state_address1);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( state_addr_48_reg_304 );
    sensitive << ( state_addr_50_reg_324 );
    sensitive << ( state_addr_52_reg_339 );
    sensitive << ( state_addr_54_reg_349 );
    sensitive << ( state_addr_56_reg_364 );
    sensitive << ( state_addr_58_reg_379 );
    sensitive << ( state_addr_60_reg_399 );
    sensitive << ( state_addr_62_reg_414 );

    SC_METHOD(thread_state_ce0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( roundKey_TVALID );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state16 );

    SC_METHOD(thread_state_ce1);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( roundKey_TVALID );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state16 );

    SC_METHOD(thread_state_d0);
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( reg_238 );
    sensitive << ( reg_244 );
    sensitive << ( reg_250 );
    sensitive << ( tmp_s_reg_309 );
    sensitive << ( tmp_65_2_reg_329 );
    sensitive << ( tmp_65_4_reg_354 );
    sensitive << ( tmp_65_6_reg_384 );
    sensitive << ( tmp_65_8_reg_419 );

    SC_METHOD(thread_state_d1);
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( reg_238 );
    sensitive << ( reg_244 );
    sensitive << ( reg_250 );
    sensitive << ( tmp_65_1_reg_314 );
    sensitive << ( tmp_65_9_reg_429 );
    sensitive << ( tmp_65_10_reg_434 );
    sensitive << ( tmp_65_12_reg_439 );
    sensitive << ( tmp_65_14_fu_288_p2 );

    SC_METHOD(thread_state_we0);
    sensitive << ( roundKey_TVALID );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state16 );

    SC_METHOD(thread_state_we1);
    sensitive << ( roundKey_TVALID );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state16 );

    SC_METHOD(thread_tmp_65_10_fu_278_p2);
    sensitive << ( roundKey_TDATA );
    sensitive << ( state_load_11_reg_389 );

    SC_METHOD(thread_tmp_65_12_fu_283_p2);
    sensitive << ( roundKey_TDATA );
    sensitive << ( state_load_13_reg_404 );

    SC_METHOD(thread_tmp_65_14_fu_288_p2);
    sensitive << ( roundKey_TDATA );
    sensitive << ( state_load_15_reg_424 );

    SC_METHOD(thread_tmp_65_1_fu_261_p2);
    sensitive << ( state_q1 );
    sensitive << ( roundKey_TDATA );

    SC_METHOD(thread_tmp_65_2_fu_267_p2);
    sensitive << ( state_q0 );
    sensitive << ( roundKey_TDATA );

    SC_METHOD(thread_tmp_65_9_fu_273_p2);
    sensitive << ( roundKey_TDATA );
    sensitive << ( state_load_9_reg_369 );

    SC_METHOD(thread_tmp_s_fu_256_p2);
    sensitive << ( state_q0 );
    sensitive << ( roundKey_read_reg_294 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( roundKey_TVALID );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state16 );

    ap_CS_fsm = "0000000000000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "AddRoundKey_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, state_address0, "(port)state_address0");
    sc_trace(mVcdFile, state_ce0, "(port)state_ce0");
    sc_trace(mVcdFile, state_we0, "(port)state_we0");
    sc_trace(mVcdFile, state_d0, "(port)state_d0");
    sc_trace(mVcdFile, state_q0, "(port)state_q0");
    sc_trace(mVcdFile, state_address1, "(port)state_address1");
    sc_trace(mVcdFile, state_ce1, "(port)state_ce1");
    sc_trace(mVcdFile, state_we1, "(port)state_we1");
    sc_trace(mVcdFile, state_d1, "(port)state_d1");
    sc_trace(mVcdFile, state_q1, "(port)state_q1");
    sc_trace(mVcdFile, roundKey_TDATA, "(port)roundKey_TDATA");
    sc_trace(mVcdFile, roundKey_TVALID, "(port)roundKey_TVALID");
    sc_trace(mVcdFile, roundKey_TREADY, "(port)roundKey_TREADY");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, roundKey_TDATA_blk_n, "roundKey_TDATA_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, ap_CS_fsm_state9, "ap_CS_fsm_state9");
    sc_trace(mVcdFile, ap_CS_fsm_state10, "ap_CS_fsm_state10");
    sc_trace(mVcdFile, ap_CS_fsm_state11, "ap_CS_fsm_state11");
    sc_trace(mVcdFile, ap_CS_fsm_state12, "ap_CS_fsm_state12");
    sc_trace(mVcdFile, ap_CS_fsm_state13, "ap_CS_fsm_state13");
    sc_trace(mVcdFile, ap_CS_fsm_state14, "ap_CS_fsm_state14");
    sc_trace(mVcdFile, ap_CS_fsm_state15, "ap_CS_fsm_state15");
    sc_trace(mVcdFile, ap_CS_fsm_state16, "ap_CS_fsm_state16");
    sc_trace(mVcdFile, reg_205, "reg_205");
    sc_trace(mVcdFile, reg_210, "reg_210");
    sc_trace(mVcdFile, reg_215, "reg_215");
    sc_trace(mVcdFile, grp_fu_220_p2, "grp_fu_220_p2");
    sc_trace(mVcdFile, reg_238, "reg_238");
    sc_trace(mVcdFile, grp_fu_226_p2, "grp_fu_226_p2");
    sc_trace(mVcdFile, reg_244, "reg_244");
    sc_trace(mVcdFile, grp_fu_232_p2, "grp_fu_232_p2");
    sc_trace(mVcdFile, reg_250, "reg_250");
    sc_trace(mVcdFile, roundKey_read_reg_294, "roundKey_read_reg_294");
    sc_trace(mVcdFile, ap_block_state1, "ap_block_state1");
    sc_trace(mVcdFile, state_addr_reg_299, "state_addr_reg_299");
    sc_trace(mVcdFile, state_addr_48_reg_304, "state_addr_48_reg_304");
    sc_trace(mVcdFile, tmp_s_fu_256_p2, "tmp_s_fu_256_p2");
    sc_trace(mVcdFile, tmp_s_reg_309, "tmp_s_reg_309");
    sc_trace(mVcdFile, tmp_65_1_fu_261_p2, "tmp_65_1_fu_261_p2");
    sc_trace(mVcdFile, tmp_65_1_reg_314, "tmp_65_1_reg_314");
    sc_trace(mVcdFile, state_addr_49_reg_319, "state_addr_49_reg_319");
    sc_trace(mVcdFile, state_addr_50_reg_324, "state_addr_50_reg_324");
    sc_trace(mVcdFile, tmp_65_2_fu_267_p2, "tmp_65_2_fu_267_p2");
    sc_trace(mVcdFile, tmp_65_2_reg_329, "tmp_65_2_reg_329");
    sc_trace(mVcdFile, state_addr_51_reg_334, "state_addr_51_reg_334");
    sc_trace(mVcdFile, state_addr_52_reg_339, "state_addr_52_reg_339");
    sc_trace(mVcdFile, state_addr_53_reg_344, "state_addr_53_reg_344");
    sc_trace(mVcdFile, state_addr_54_reg_349, "state_addr_54_reg_349");
    sc_trace(mVcdFile, tmp_65_4_reg_354, "tmp_65_4_reg_354");
    sc_trace(mVcdFile, state_addr_55_reg_359, "state_addr_55_reg_359");
    sc_trace(mVcdFile, state_addr_56_reg_364, "state_addr_56_reg_364");
    sc_trace(mVcdFile, state_load_9_reg_369, "state_load_9_reg_369");
    sc_trace(mVcdFile, state_addr_57_reg_374, "state_addr_57_reg_374");
    sc_trace(mVcdFile, state_addr_58_reg_379, "state_addr_58_reg_379");
    sc_trace(mVcdFile, tmp_65_6_reg_384, "tmp_65_6_reg_384");
    sc_trace(mVcdFile, state_load_11_reg_389, "state_load_11_reg_389");
    sc_trace(mVcdFile, state_addr_59_reg_394, "state_addr_59_reg_394");
    sc_trace(mVcdFile, state_addr_60_reg_399, "state_addr_60_reg_399");
    sc_trace(mVcdFile, state_load_13_reg_404, "state_load_13_reg_404");
    sc_trace(mVcdFile, state_addr_61_reg_409, "state_addr_61_reg_409");
    sc_trace(mVcdFile, state_addr_62_reg_414, "state_addr_62_reg_414");
    sc_trace(mVcdFile, tmp_65_8_reg_419, "tmp_65_8_reg_419");
    sc_trace(mVcdFile, state_load_15_reg_424, "state_load_15_reg_424");
    sc_trace(mVcdFile, tmp_65_9_fu_273_p2, "tmp_65_9_fu_273_p2");
    sc_trace(mVcdFile, tmp_65_9_reg_429, "tmp_65_9_reg_429");
    sc_trace(mVcdFile, tmp_65_10_fu_278_p2, "tmp_65_10_fu_278_p2");
    sc_trace(mVcdFile, tmp_65_10_reg_434, "tmp_65_10_reg_434");
    sc_trace(mVcdFile, tmp_65_12_fu_283_p2, "tmp_65_12_fu_283_p2");
    sc_trace(mVcdFile, tmp_65_12_reg_439, "tmp_65_12_reg_439");
    sc_trace(mVcdFile, tmp_65_14_fu_288_p2, "tmp_65_14_fu_288_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

AddRoundKey::~AddRoundKey() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void AddRoundKey::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
          esl_seteq<1,1,1>(roundKey_TVALID.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
          esl_seteq<1,1,1>(roundKey_TVALID.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && 
          esl_seteq<1,1,1>(roundKey_TVALID.read(), ap_const_logic_1)))) {
        reg_205 = state_q0.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
                esl_seteq<1,1,1>(roundKey_TVALID.read(), ap_const_logic_1))) {
        reg_205 = state_q1.read();
    }
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
          esl_seteq<1,1,1>(roundKey_TVALID.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) && 
          esl_seteq<1,1,1>(roundKey_TVALID.read(), ap_const_logic_1)))) {
        reg_210 = state_q0.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
                esl_seteq<1,1,1>(roundKey_TVALID.read(), ap_const_logic_1))) {
        reg_210 = state_q1.read();
    }
    if (esl_seteq<1,1,1>(roundKey_TVALID.read(), ap_const_logic_1)) {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
            reg_215 = state_q0.read();
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
            reg_215 = state_q1.read();
        }
    }
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
  esl_seteq<1,1,1>(roundKey_TVALID.read(), ap_const_logic_1)) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) && 
  esl_seteq<1,1,1>(roundKey_TVALID.read(), ap_const_logic_1)))) {
        reg_238 = grp_fu_220_p2.read();
    }
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
  esl_seteq<1,1,1>(roundKey_TVALID.read(), ap_const_logic_1)) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) && 
  esl_seteq<1,1,1>(roundKey_TVALID.read(), ap_const_logic_1)))) {
        reg_244 = grp_fu_226_p2.read();
    }
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && 
  esl_seteq<1,1,1>(roundKey_TVALID.read(), ap_const_logic_1)) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) && 
  esl_seteq<1,1,1>(roundKey_TVALID.read(), ap_const_logic_1)))) {
        reg_250 = grp_fu_232_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_const_logic_0, roundKey_TVALID.read())))) {
        roundKey_read_reg_294 = roundKey_TDATA.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && esl_seteq<1,1,1>(roundKey_TVALID.read(), ap_const_logic_1))) {
        state_load_11_reg_389 = state_q1.read();
        tmp_65_6_reg_384 = grp_fu_220_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && esl_seteq<1,1,1>(roundKey_TVALID.read(), ap_const_logic_1))) {
        state_load_13_reg_404 = state_q1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) && esl_seteq<1,1,1>(roundKey_TVALID.read(), ap_const_logic_1))) {
        state_load_15_reg_424 = state_q1.read();
        tmp_65_8_reg_419 = grp_fu_226_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && esl_seteq<1,1,1>(roundKey_TVALID.read(), ap_const_logic_1))) {
        state_load_9_reg_369 = state_q1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) && esl_seteq<1,1,1>(roundKey_TVALID.read(), ap_const_logic_1))) {
        tmp_65_10_reg_434 = tmp_65_10_fu_278_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) && esl_seteq<1,1,1>(roundKey_TVALID.read(), ap_const_logic_1))) {
        tmp_65_12_reg_439 = tmp_65_12_fu_283_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(roundKey_TVALID.read(), ap_const_logic_1))) {
        tmp_65_1_reg_314 = tmp_65_1_fu_261_p2.read();
        tmp_s_reg_309 = tmp_s_fu_256_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(roundKey_TVALID.read(), ap_const_logic_1))) {
        tmp_65_2_reg_329 = tmp_65_2_fu_267_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && esl_seteq<1,1,1>(roundKey_TVALID.read(), ap_const_logic_1))) {
        tmp_65_4_reg_354 = grp_fu_220_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) && esl_seteq<1,1,1>(roundKey_TVALID.read(), ap_const_logic_1))) {
        tmp_65_9_reg_429 = tmp_65_9_fu_273_p2.read();
    }
}

void AddRoundKey::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void AddRoundKey::thread_ap_CS_fsm_state10() {
    ap_CS_fsm_state10 = ap_CS_fsm.read()[9];
}

void AddRoundKey::thread_ap_CS_fsm_state11() {
    ap_CS_fsm_state11 = ap_CS_fsm.read()[10];
}

void AddRoundKey::thread_ap_CS_fsm_state12() {
    ap_CS_fsm_state12 = ap_CS_fsm.read()[11];
}

void AddRoundKey::thread_ap_CS_fsm_state13() {
    ap_CS_fsm_state13 = ap_CS_fsm.read()[12];
}

void AddRoundKey::thread_ap_CS_fsm_state14() {
    ap_CS_fsm_state14 = ap_CS_fsm.read()[13];
}

void AddRoundKey::thread_ap_CS_fsm_state15() {
    ap_CS_fsm_state15 = ap_CS_fsm.read()[14];
}

void AddRoundKey::thread_ap_CS_fsm_state16() {
    ap_CS_fsm_state16 = ap_CS_fsm.read()[15];
}

void AddRoundKey::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void AddRoundKey::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void AddRoundKey::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void AddRoundKey::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void AddRoundKey::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void AddRoundKey::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[6];
}

void AddRoundKey::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read()[7];
}

void AddRoundKey::thread_ap_CS_fsm_state9() {
    ap_CS_fsm_state9 = ap_CS_fsm.read()[8];
}

void AddRoundKey::thread_ap_block_state1() {
    ap_block_state1 = (esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_const_logic_0, roundKey_TVALID.read()));
}

void AddRoundKey::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) && 
          esl_seteq<1,1,1>(roundKey_TVALID.read(), ap_const_logic_1)))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void AddRoundKey::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void AddRoundKey::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) && 
         esl_seteq<1,1,1>(roundKey_TVALID.read(), ap_const_logic_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void AddRoundKey::thread_grp_fu_220_p2() {
    grp_fu_220_p2 = (reg_205.read() ^ roundKey_TDATA.read());
}

void AddRoundKey::thread_grp_fu_226_p2() {
    grp_fu_226_p2 = (reg_210.read() ^ roundKey_TDATA.read());
}

void AddRoundKey::thread_grp_fu_232_p2() {
    grp_fu_232_p2 = (reg_215.read() ^ roundKey_TDATA.read());
}

void AddRoundKey::thread_roundKey_TDATA_blk_n() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1)) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()))) {
        roundKey_TDATA_blk_n = roundKey_TVALID.read();
    } else {
        roundKey_TDATA_blk_n = ap_const_logic_1;
    }
}

void AddRoundKey::thread_roundKey_TREADY() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
          esl_seteq<1,1,1>(roundKey_TVALID.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
          esl_seteq<1,1,1>(roundKey_TVALID.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
          esl_seteq<1,1,1>(roundKey_TVALID.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && 
          esl_seteq<1,1,1>(roundKey_TVALID.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
          esl_seteq<1,1,1>(roundKey_TVALID.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) && 
          esl_seteq<1,1,1>(roundKey_TVALID.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && 
          esl_seteq<1,1,1>(roundKey_TVALID.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) && 
          esl_seteq<1,1,1>(roundKey_TVALID.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) && 
          esl_seteq<1,1,1>(roundKey_TVALID.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) && 
          esl_seteq<1,1,1>(roundKey_TVALID.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_const_logic_0, roundKey_TVALID.read()))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
          esl_seteq<1,1,1>(roundKey_TVALID.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) && 
          esl_seteq<1,1,1>(roundKey_TVALID.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) && 
          esl_seteq<1,1,1>(roundKey_TVALID.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) && 
          esl_seteq<1,1,1>(roundKey_TVALID.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) && 
          esl_seteq<1,1,1>(roundKey_TVALID.read(), ap_const_logic_1)))) {
        roundKey_TREADY = ap_const_logic_1;
    } else {
        roundKey_TREADY = ap_const_logic_0;
    }
}

void AddRoundKey::thread_state_addr_48_reg_304() {
    state_addr_48_reg_304 =  (sc_lv<4>) (ap_const_lv64_1);
}

void AddRoundKey::thread_state_addr_49_reg_319() {
    state_addr_49_reg_319 =  (sc_lv<4>) (ap_const_lv64_2);
}

void AddRoundKey::thread_state_addr_50_reg_324() {
    state_addr_50_reg_324 =  (sc_lv<4>) (ap_const_lv64_3);
}

void AddRoundKey::thread_state_addr_51_reg_334() {
    state_addr_51_reg_334 =  (sc_lv<4>) (ap_const_lv64_4);
}

void AddRoundKey::thread_state_addr_52_reg_339() {
    state_addr_52_reg_339 =  (sc_lv<4>) (ap_const_lv64_5);
}

void AddRoundKey::thread_state_addr_53_reg_344() {
    state_addr_53_reg_344 =  (sc_lv<4>) (ap_const_lv64_6);
}

void AddRoundKey::thread_state_addr_54_reg_349() {
    state_addr_54_reg_349 =  (sc_lv<4>) (ap_const_lv64_7);
}

void AddRoundKey::thread_state_addr_55_reg_359() {
    state_addr_55_reg_359 =  (sc_lv<4>) (ap_const_lv64_8);
}

void AddRoundKey::thread_state_addr_56_reg_364() {
    state_addr_56_reg_364 =  (sc_lv<4>) (ap_const_lv64_9);
}

void AddRoundKey::thread_state_addr_57_reg_374() {
    state_addr_57_reg_374 =  (sc_lv<4>) (ap_const_lv64_A);
}

void AddRoundKey::thread_state_addr_58_reg_379() {
    state_addr_58_reg_379 =  (sc_lv<4>) (ap_const_lv64_B);
}

void AddRoundKey::thread_state_addr_59_reg_394() {
    state_addr_59_reg_394 =  (sc_lv<4>) (ap_const_lv64_C);
}

void AddRoundKey::thread_state_addr_60_reg_399() {
    state_addr_60_reg_399 =  (sc_lv<4>) (ap_const_lv64_D);
}

void AddRoundKey::thread_state_addr_61_reg_409() {
    state_addr_61_reg_409 =  (sc_lv<4>) (ap_const_lv64_E);
}

void AddRoundKey::thread_state_addr_62_reg_414() {
    state_addr_62_reg_414 =  (sc_lv<4>) (ap_const_lv64_F);
}

void AddRoundKey::thread_state_addr_reg_299() {
    state_addr_reg_299 =  (sc_lv<4>) (ap_const_lv64_0);
}

void AddRoundKey::thread_state_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read())) {
        state_address0 = state_addr_61_reg_409.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read())) {
        state_address0 = state_addr_59_reg_394.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
        state_address0 = state_addr_57_reg_374.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        state_address0 = state_addr_55_reg_359.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        state_address0 = state_addr_53_reg_344.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        state_address0 = state_addr_51_reg_334.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        state_address0 = state_addr_49_reg_319.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        state_address0 = state_addr_reg_299.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        state_address0 =  (sc_lv<4>) (ap_const_lv64_E);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        state_address0 =  (sc_lv<4>) (ap_const_lv64_C);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        state_address0 =  (sc_lv<4>) (ap_const_lv64_A);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        state_address0 =  (sc_lv<4>) (ap_const_lv64_8);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        state_address0 =  (sc_lv<4>) (ap_const_lv64_6);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        state_address0 =  (sc_lv<4>) (ap_const_lv64_4);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        state_address0 =  (sc_lv<4>) (ap_const_lv64_2);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        state_address0 =  (sc_lv<4>) (ap_const_lv64_0);
    } else {
        state_address0 = "XXXX";
    }
}

void AddRoundKey::thread_state_address1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read())) {
        state_address1 = state_addr_62_reg_414.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read())) {
        state_address1 = state_addr_60_reg_399.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
        state_address1 = state_addr_58_reg_379.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        state_address1 = state_addr_56_reg_364.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        state_address1 = state_addr_54_reg_349.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        state_address1 = state_addr_52_reg_339.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        state_address1 = state_addr_50_reg_324.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        state_address1 = state_addr_48_reg_304.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        state_address1 =  (sc_lv<4>) (ap_const_lv64_F);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        state_address1 =  (sc_lv<4>) (ap_const_lv64_D);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        state_address1 =  (sc_lv<4>) (ap_const_lv64_B);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        state_address1 =  (sc_lv<4>) (ap_const_lv64_9);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        state_address1 =  (sc_lv<4>) (ap_const_lv64_7);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        state_address1 =  (sc_lv<4>) (ap_const_lv64_5);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        state_address1 =  (sc_lv<4>) (ap_const_lv64_3);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        state_address1 =  (sc_lv<4>) (ap_const_lv64_1);
    } else {
        state_address1 = "XXXX";
    }
}

void AddRoundKey::thread_state_ce0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
          esl_seteq<1,1,1>(roundKey_TVALID.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
          esl_seteq<1,1,1>(roundKey_TVALID.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
          esl_seteq<1,1,1>(roundKey_TVALID.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && 
          esl_seteq<1,1,1>(roundKey_TVALID.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
          esl_seteq<1,1,1>(roundKey_TVALID.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) && 
          esl_seteq<1,1,1>(roundKey_TVALID.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && 
          esl_seteq<1,1,1>(roundKey_TVALID.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) && 
          esl_seteq<1,1,1>(roundKey_TVALID.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) && 
          esl_seteq<1,1,1>(roundKey_TVALID.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) && 
          esl_seteq<1,1,1>(roundKey_TVALID.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_const_logic_0, roundKey_TVALID.read()))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
          esl_seteq<1,1,1>(roundKey_TVALID.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) && 
          esl_seteq<1,1,1>(roundKey_TVALID.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) && 
          esl_seteq<1,1,1>(roundKey_TVALID.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) && 
          esl_seteq<1,1,1>(roundKey_TVALID.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) && 
          esl_seteq<1,1,1>(roundKey_TVALID.read(), ap_const_logic_1)))) {
        state_ce0 = ap_const_logic_1;
    } else {
        state_ce0 = ap_const_logic_0;
    }
}

void AddRoundKey::thread_state_ce1() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
          esl_seteq<1,1,1>(roundKey_TVALID.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
          esl_seteq<1,1,1>(roundKey_TVALID.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
          esl_seteq<1,1,1>(roundKey_TVALID.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && 
          esl_seteq<1,1,1>(roundKey_TVALID.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
          esl_seteq<1,1,1>(roundKey_TVALID.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) && 
          esl_seteq<1,1,1>(roundKey_TVALID.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && 
          esl_seteq<1,1,1>(roundKey_TVALID.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) && 
          esl_seteq<1,1,1>(roundKey_TVALID.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) && 
          esl_seteq<1,1,1>(roundKey_TVALID.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) && 
          esl_seteq<1,1,1>(roundKey_TVALID.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_const_logic_0, roundKey_TVALID.read()))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
          esl_seteq<1,1,1>(roundKey_TVALID.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) && 
          esl_seteq<1,1,1>(roundKey_TVALID.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) && 
          esl_seteq<1,1,1>(roundKey_TVALID.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) && 
          esl_seteq<1,1,1>(roundKey_TVALID.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) && 
          esl_seteq<1,1,1>(roundKey_TVALID.read(), ap_const_logic_1)))) {
        state_ce1 = ap_const_logic_1;
    } else {
        state_ce1 = ap_const_logic_0;
    }
}

void AddRoundKey::thread_state_d0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read())) {
        state_d0 = reg_244.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read())) {
        state_d0 = reg_250.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
        state_d0 = reg_238.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        state_d0 = tmp_65_8_reg_419.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        state_d0 = tmp_65_6_reg_384.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        state_d0 = tmp_65_4_reg_354.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        state_d0 = tmp_65_2_reg_329.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        state_d0 = tmp_s_reg_309.read();
    } else {
        state_d0 =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void AddRoundKey::thread_state_d1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read())) {
        state_d1 = tmp_65_14_fu_288_p2.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read())) {
        state_d1 = tmp_65_12_reg_439.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
        state_d1 = tmp_65_10_reg_434.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        state_d1 = tmp_65_9_reg_429.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        state_d1 = reg_250.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        state_d1 = reg_244.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        state_d1 = reg_238.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        state_d1 = tmp_65_1_reg_314.read();
    } else {
        state_d1 =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void AddRoundKey::thread_state_we0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) && 
          esl_seteq<1,1,1>(roundKey_TVALID.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) && 
          esl_seteq<1,1,1>(roundKey_TVALID.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) && 
          esl_seteq<1,1,1>(roundKey_TVALID.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) && 
          esl_seteq<1,1,1>(roundKey_TVALID.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) && 
          esl_seteq<1,1,1>(roundKey_TVALID.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) && 
          esl_seteq<1,1,1>(roundKey_TVALID.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) && 
          esl_seteq<1,1,1>(roundKey_TVALID.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) && 
          esl_seteq<1,1,1>(roundKey_TVALID.read(), ap_const_logic_1)))) {
        state_we0 = ap_const_logic_1;
    } else {
        state_we0 = ap_const_logic_0;
    }
}

void AddRoundKey::thread_state_we1() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) && 
          esl_seteq<1,1,1>(roundKey_TVALID.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) && 
          esl_seteq<1,1,1>(roundKey_TVALID.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) && 
          esl_seteq<1,1,1>(roundKey_TVALID.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) && 
          esl_seteq<1,1,1>(roundKey_TVALID.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) && 
          esl_seteq<1,1,1>(roundKey_TVALID.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) && 
          esl_seteq<1,1,1>(roundKey_TVALID.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) && 
          esl_seteq<1,1,1>(roundKey_TVALID.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) && 
          esl_seteq<1,1,1>(roundKey_TVALID.read(), ap_const_logic_1)))) {
        state_we1 = ap_const_logic_1;
    } else {
        state_we1 = ap_const_logic_0;
    }
}

void AddRoundKey::thread_tmp_65_10_fu_278_p2() {
    tmp_65_10_fu_278_p2 = (state_load_11_reg_389.read() ^ roundKey_TDATA.read());
}

void AddRoundKey::thread_tmp_65_12_fu_283_p2() {
    tmp_65_12_fu_283_p2 = (state_load_13_reg_404.read() ^ roundKey_TDATA.read());
}

void AddRoundKey::thread_tmp_65_14_fu_288_p2() {
    tmp_65_14_fu_288_p2 = (state_load_15_reg_424.read() ^ roundKey_TDATA.read());
}

void AddRoundKey::thread_tmp_65_1_fu_261_p2() {
    tmp_65_1_fu_261_p2 = (state_q1.read() ^ roundKey_TDATA.read());
}

void AddRoundKey::thread_tmp_65_2_fu_267_p2() {
    tmp_65_2_fu_267_p2 = (state_q0.read() ^ roundKey_TDATA.read());
}

void AddRoundKey::thread_tmp_65_9_fu_273_p2() {
    tmp_65_9_fu_273_p2 = (state_load_9_reg_369.read() ^ roundKey_TDATA.read());
}

void AddRoundKey::thread_tmp_s_fu_256_p2() {
    tmp_s_fu_256_p2 = (state_q0.read() ^ roundKey_read_reg_294.read());
}

void AddRoundKey::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_const_logic_0, roundKey_TVALID.read())))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(roundKey_TVALID.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state2;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(roundKey_TVALID.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state4;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 8 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && esl_seteq<1,1,1>(roundKey_TVALID.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state5;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 16 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && esl_seteq<1,1,1>(roundKey_TVALID.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state6;
            } else {
                ap_NS_fsm = ap_ST_fsm_state5;
            }
            break;
        case 32 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && esl_seteq<1,1,1>(roundKey_TVALID.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state7;
            } else {
                ap_NS_fsm = ap_ST_fsm_state6;
            }
            break;
        case 64 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && esl_seteq<1,1,1>(roundKey_TVALID.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state8;
            } else {
                ap_NS_fsm = ap_ST_fsm_state7;
            }
            break;
        case 128 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && esl_seteq<1,1,1>(roundKey_TVALID.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state9;
            } else {
                ap_NS_fsm = ap_ST_fsm_state8;
            }
            break;
        case 256 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) && esl_seteq<1,1,1>(roundKey_TVALID.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state10;
            } else {
                ap_NS_fsm = ap_ST_fsm_state9;
            }
            break;
        case 512 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) && esl_seteq<1,1,1>(roundKey_TVALID.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state11;
            } else {
                ap_NS_fsm = ap_ST_fsm_state10;
            }
            break;
        case 1024 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) && esl_seteq<1,1,1>(roundKey_TVALID.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state12;
            } else {
                ap_NS_fsm = ap_ST_fsm_state11;
            }
            break;
        case 2048 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) && esl_seteq<1,1,1>(roundKey_TVALID.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state13;
            } else {
                ap_NS_fsm = ap_ST_fsm_state12;
            }
            break;
        case 4096 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) && esl_seteq<1,1,1>(roundKey_TVALID.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state14;
            } else {
                ap_NS_fsm = ap_ST_fsm_state13;
            }
            break;
        case 8192 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) && esl_seteq<1,1,1>(roundKey_TVALID.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state15;
            } else {
                ap_NS_fsm = ap_ST_fsm_state14;
            }
            break;
        case 16384 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) && esl_seteq<1,1,1>(roundKey_TVALID.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state16;
            } else {
                ap_NS_fsm = ap_ST_fsm_state15;
            }
            break;
        case 32768 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) && esl_seteq<1,1,1>(roundKey_TVALID.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state16;
            }
            break;
        default : 
            ap_NS_fsm =  (sc_lv<16>) ("XXXXXXXXXXXXXXXX");
            break;
    }
}

}

