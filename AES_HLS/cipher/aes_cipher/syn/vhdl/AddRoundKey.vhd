-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity AddRoundKey is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    state_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    state_ce0 : OUT STD_LOGIC;
    state_we0 : OUT STD_LOGIC;
    state_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    state_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    state_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    state_ce1 : OUT STD_LOGIC;
    state_we1 : OUT STD_LOGIC;
    state_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    state_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    roundKey_TDATA : IN STD_LOGIC_VECTOR (7 downto 0);
    roundKey_TVALID : IN STD_LOGIC;
    roundKey_TREADY : OUT STD_LOGIC );
end;


architecture behav of AddRoundKey is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (15 downto 0) := "0000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (15 downto 0) := "0000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (15 downto 0) := "0000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (15 downto 0) := "0000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (15 downto 0) := "0000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (15 downto 0) := "0000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (15 downto 0) := "0001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (15 downto 0) := "0010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (15 downto 0) := "0100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (15 downto 0) := "1000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv64_5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv64_6 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000110";
    constant ap_const_lv64_7 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000111";
    constant ap_const_lv64_8 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000";
    constant ap_const_lv64_9 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001001";
    constant ap_const_lv64_A : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001010";
    constant ap_const_lv64_B : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001011";
    constant ap_const_lv64_C : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001100";
    constant ap_const_lv64_D : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001101";
    constant ap_const_lv64_E : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001110";
    constant ap_const_lv64_F : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001111";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal roundKey_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal reg_205 : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_210 : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_215 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_220_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_238 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_226_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_244 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_232_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_250 : STD_LOGIC_VECTOR (7 downto 0);
    signal roundKey_read_reg_294 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal state_addr_reg_299 : STD_LOGIC_VECTOR (3 downto 0);
    signal state_addr_48_reg_304 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_s_fu_256_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_s_reg_309 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_65_1_fu_261_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_65_1_reg_314 : STD_LOGIC_VECTOR (7 downto 0);
    signal state_addr_49_reg_319 : STD_LOGIC_VECTOR (3 downto 0);
    signal state_addr_50_reg_324 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_65_2_fu_267_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_65_2_reg_329 : STD_LOGIC_VECTOR (7 downto 0);
    signal state_addr_51_reg_334 : STD_LOGIC_VECTOR (3 downto 0);
    signal state_addr_52_reg_339 : STD_LOGIC_VECTOR (3 downto 0);
    signal state_addr_53_reg_344 : STD_LOGIC_VECTOR (3 downto 0);
    signal state_addr_54_reg_349 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_65_4_reg_354 : STD_LOGIC_VECTOR (7 downto 0);
    signal state_addr_55_reg_359 : STD_LOGIC_VECTOR (3 downto 0);
    signal state_addr_56_reg_364 : STD_LOGIC_VECTOR (3 downto 0);
    signal state_load_9_reg_369 : STD_LOGIC_VECTOR (7 downto 0);
    signal state_addr_57_reg_374 : STD_LOGIC_VECTOR (3 downto 0);
    signal state_addr_58_reg_379 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_65_6_reg_384 : STD_LOGIC_VECTOR (7 downto 0);
    signal state_load_11_reg_389 : STD_LOGIC_VECTOR (7 downto 0);
    signal state_addr_59_reg_394 : STD_LOGIC_VECTOR (3 downto 0);
    signal state_addr_60_reg_399 : STD_LOGIC_VECTOR (3 downto 0);
    signal state_load_13_reg_404 : STD_LOGIC_VECTOR (7 downto 0);
    signal state_addr_61_reg_409 : STD_LOGIC_VECTOR (3 downto 0);
    signal state_addr_62_reg_414 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_65_8_reg_419 : STD_LOGIC_VECTOR (7 downto 0);
    signal state_load_15_reg_424 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_65_9_fu_273_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_65_9_reg_429 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_65_10_fu_278_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_65_10_reg_434 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_65_12_fu_283_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_65_12_reg_439 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_65_14_fu_288_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (15 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    reg_205_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((roundKey_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7)) or ((roundKey_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((roundKey_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then 
                reg_205 <= state_q0;
            elsif (((roundKey_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                reg_205 <= state_q1;
            end if; 
        end if;
    end process;

    reg_210_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((roundKey_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6)) or ((roundKey_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9)))) then 
                reg_210 <= state_q0;
            elsif (((roundKey_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                reg_210 <= state_q1;
            end if; 
        end if;
    end process;

    reg_215_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((roundKey_TVALID = ap_const_logic_1)) then
                if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                    reg_215 <= state_q0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                    reg_215 <= state_q1;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((roundKey_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((roundKey_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11)))) then
                reg_238 <= grp_fu_220_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((roundKey_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6)) or ((roundKey_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state15)))) then
                reg_244 <= grp_fu_226_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((roundKey_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8)) or ((roundKey_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13)))) then
                reg_250 <= grp_fu_232_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((roundKey_TVALID = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                roundKey_read_reg_294 <= roundKey_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((roundKey_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                state_load_11_reg_389 <= state_q1;
                tmp_65_6_reg_384 <= grp_fu_220_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((roundKey_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                state_load_13_reg_404 <= state_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((roundKey_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                state_load_15_reg_424 <= state_q1;
                tmp_65_8_reg_419 <= grp_fu_226_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((roundKey_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                state_load_9_reg_369 <= state_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((roundKey_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                tmp_65_10_reg_434 <= tmp_65_10_fu_278_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((roundKey_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                tmp_65_12_reg_439 <= tmp_65_12_fu_283_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((roundKey_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                tmp_65_1_reg_314 <= tmp_65_1_fu_261_p2;
                tmp_s_reg_309 <= tmp_s_fu_256_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((roundKey_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                tmp_65_2_reg_329 <= tmp_65_2_fu_267_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((roundKey_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                tmp_65_4_reg_354 <= grp_fu_220_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((roundKey_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                tmp_65_9_reg_429 <= tmp_65_9_fu_273_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, roundKey_TVALID, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((roundKey_TVALID = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((roundKey_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((roundKey_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((roundKey_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                if (((roundKey_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                if (((roundKey_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                if (((roundKey_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state8 => 
                if (((roundKey_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                if (((roundKey_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state10 => 
                if (((roundKey_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state11 => 
                if (((roundKey_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state12 => 
                if (((roundKey_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state13 => 
                if (((roundKey_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state14 => 
                if (((roundKey_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state15 => 
                if (((roundKey_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state16 => 
                if (((roundKey_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_block_state1_assign_proc : process(ap_start, roundKey_TVALID)
    begin
                ap_block_state1 <= ((roundKey_TVALID = ap_const_logic_0) or (ap_start = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, roundKey_TVALID, ap_CS_fsm_state16)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((roundKey_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state16)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(roundKey_TVALID, ap_CS_fsm_state16)
    begin
        if (((roundKey_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_220_p2 <= (roundKey_TDATA xor reg_205);
    grp_fu_226_p2 <= (roundKey_TDATA xor reg_210);
    grp_fu_232_p2 <= (roundKey_TDATA xor reg_215);

    roundKey_TDATA_blk_n_assign_proc : process(ap_start, ap_CS_fsm_state1, roundKey_TVALID, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            roundKey_TDATA_blk_n <= roundKey_TVALID;
        else 
            roundKey_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    roundKey_TREADY_assign_proc : process(ap_start, ap_CS_fsm_state1, roundKey_TVALID, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16)
    begin
        if ((((roundKey_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8)) or ((roundKey_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7)) or ((roundKey_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6)) or ((roundKey_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((roundKey_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((roundKey_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3)) or ((roundKey_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or (not(((roundKey_TVALID = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((roundKey_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state16)) or ((roundKey_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state15)) or ((roundKey_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14)) or ((roundKey_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13)) or ((roundKey_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12)) or ((roundKey_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11)) or ((roundKey_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10)) or ((roundKey_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9)))) then 
            roundKey_TREADY <= ap_const_logic_1;
        else 
            roundKey_TREADY <= ap_const_logic_0;
        end if; 
    end process;

    state_addr_48_reg_304 <= ap_const_lv64_1(4 - 1 downto 0);
    state_addr_49_reg_319 <= ap_const_lv64_2(4 - 1 downto 0);
    state_addr_50_reg_324 <= ap_const_lv64_3(4 - 1 downto 0);
    state_addr_51_reg_334 <= ap_const_lv64_4(4 - 1 downto 0);
    state_addr_52_reg_339 <= ap_const_lv64_5(4 - 1 downto 0);
    state_addr_53_reg_344 <= ap_const_lv64_6(4 - 1 downto 0);
    state_addr_54_reg_349 <= ap_const_lv64_7(4 - 1 downto 0);
    state_addr_55_reg_359 <= ap_const_lv64_8(4 - 1 downto 0);
    state_addr_56_reg_364 <= ap_const_lv64_9(4 - 1 downto 0);
    state_addr_57_reg_374 <= ap_const_lv64_A(4 - 1 downto 0);
    state_addr_58_reg_379 <= ap_const_lv64_B(4 - 1 downto 0);
    state_addr_59_reg_394 <= ap_const_lv64_C(4 - 1 downto 0);
    state_addr_60_reg_399 <= ap_const_lv64_D(4 - 1 downto 0);
    state_addr_61_reg_409 <= ap_const_lv64_E(4 - 1 downto 0);
    state_addr_62_reg_414 <= ap_const_lv64_F(4 - 1 downto 0);
    state_addr_reg_299 <= ap_const_lv64_0(4 - 1 downto 0);

    state_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, state_addr_reg_299, state_addr_49_reg_319, state_addr_51_reg_334, state_addr_53_reg_344, state_addr_55_reg_359, state_addr_57_reg_374, state_addr_59_reg_394, state_addr_61_reg_409)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            state_address0 <= state_addr_61_reg_409;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            state_address0 <= state_addr_59_reg_394;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            state_address0 <= state_addr_57_reg_374;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            state_address0 <= state_addr_55_reg_359;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            state_address0 <= state_addr_53_reg_344;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            state_address0 <= state_addr_51_reg_334;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            state_address0 <= state_addr_49_reg_319;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            state_address0 <= state_addr_reg_299;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            state_address0 <= ap_const_lv64_E(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            state_address0 <= ap_const_lv64_C(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            state_address0 <= ap_const_lv64_A(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            state_address0 <= ap_const_lv64_8(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            state_address0 <= ap_const_lv64_6(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            state_address0 <= ap_const_lv64_4(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            state_address0 <= ap_const_lv64_2(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            state_address0 <= ap_const_lv64_0(4 - 1 downto 0);
        else 
            state_address0 <= "XXXX";
        end if; 
    end process;


    state_address1_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, state_addr_48_reg_304, state_addr_50_reg_324, state_addr_52_reg_339, state_addr_54_reg_349, state_addr_56_reg_364, state_addr_58_reg_379, state_addr_60_reg_399, state_addr_62_reg_414)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            state_address1 <= state_addr_62_reg_414;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            state_address1 <= state_addr_60_reg_399;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            state_address1 <= state_addr_58_reg_379;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            state_address1 <= state_addr_56_reg_364;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            state_address1 <= state_addr_54_reg_349;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            state_address1 <= state_addr_52_reg_339;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            state_address1 <= state_addr_50_reg_324;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            state_address1 <= state_addr_48_reg_304;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            state_address1 <= ap_const_lv64_F(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            state_address1 <= ap_const_lv64_D(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            state_address1 <= ap_const_lv64_B(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            state_address1 <= ap_const_lv64_9(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            state_address1 <= ap_const_lv64_7(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            state_address1 <= ap_const_lv64_5(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            state_address1 <= ap_const_lv64_3(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            state_address1 <= ap_const_lv64_1(4 - 1 downto 0);
        else 
            state_address1 <= "XXXX";
        end if; 
    end process;


    state_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, roundKey_TVALID, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16)
    begin
        if ((((roundKey_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8)) or ((roundKey_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7)) or ((roundKey_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6)) or ((roundKey_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((roundKey_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((roundKey_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3)) or ((roundKey_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or (not(((roundKey_TVALID = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((roundKey_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state16)) or ((roundKey_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state15)) or ((roundKey_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14)) or ((roundKey_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13)) or ((roundKey_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12)) or ((roundKey_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11)) or ((roundKey_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10)) or ((roundKey_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9)))) then 
            state_ce0 <= ap_const_logic_1;
        else 
            state_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    state_ce1_assign_proc : process(ap_start, ap_CS_fsm_state1, roundKey_TVALID, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16)
    begin
        if ((((roundKey_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8)) or ((roundKey_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7)) or ((roundKey_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6)) or ((roundKey_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((roundKey_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((roundKey_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3)) or ((roundKey_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or (not(((roundKey_TVALID = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((roundKey_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state16)) or ((roundKey_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state15)) or ((roundKey_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14)) or ((roundKey_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13)) or ((roundKey_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12)) or ((roundKey_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11)) or ((roundKey_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10)) or ((roundKey_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9)))) then 
            state_ce1 <= ap_const_logic_1;
        else 
            state_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    state_d0_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, reg_238, reg_244, reg_250, tmp_s_reg_309, tmp_65_2_reg_329, tmp_65_4_reg_354, tmp_65_6_reg_384, tmp_65_8_reg_419)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            state_d0 <= reg_244;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            state_d0 <= reg_250;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            state_d0 <= reg_238;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            state_d0 <= tmp_65_8_reg_419;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            state_d0 <= tmp_65_6_reg_384;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            state_d0 <= tmp_65_4_reg_354;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            state_d0 <= tmp_65_2_reg_329;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            state_d0 <= tmp_s_reg_309;
        else 
            state_d0 <= "XXXXXXXX";
        end if; 
    end process;


    state_d1_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, reg_238, reg_244, reg_250, tmp_65_1_reg_314, tmp_65_9_reg_429, tmp_65_10_reg_434, tmp_65_12_reg_439, tmp_65_14_fu_288_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            state_d1 <= tmp_65_14_fu_288_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            state_d1 <= tmp_65_12_reg_439;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            state_d1 <= tmp_65_10_reg_434;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            state_d1 <= tmp_65_9_reg_429;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            state_d1 <= reg_250;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            state_d1 <= reg_244;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            state_d1 <= reg_238;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            state_d1 <= tmp_65_1_reg_314;
        else 
            state_d1 <= "XXXXXXXX";
        end if; 
    end process;


    state_we0_assign_proc : process(roundKey_TVALID, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16)
    begin
        if ((((roundKey_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state16)) or ((roundKey_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state15)) or ((roundKey_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14)) or ((roundKey_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13)) or ((roundKey_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12)) or ((roundKey_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11)) or ((roundKey_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10)) or ((roundKey_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9)))) then 
            state_we0 <= ap_const_logic_1;
        else 
            state_we0 <= ap_const_logic_0;
        end if; 
    end process;


    state_we1_assign_proc : process(roundKey_TVALID, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16)
    begin
        if ((((roundKey_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state16)) or ((roundKey_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state15)) or ((roundKey_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14)) or ((roundKey_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13)) or ((roundKey_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12)) or ((roundKey_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11)) or ((roundKey_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10)) or ((roundKey_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9)))) then 
            state_we1 <= ap_const_logic_1;
        else 
            state_we1 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_65_10_fu_278_p2 <= (state_load_11_reg_389 xor roundKey_TDATA);
    tmp_65_12_fu_283_p2 <= (state_load_13_reg_404 xor roundKey_TDATA);
    tmp_65_14_fu_288_p2 <= (state_load_15_reg_424 xor roundKey_TDATA);
    tmp_65_1_fu_261_p2 <= (state_q1 xor roundKey_TDATA);
    tmp_65_2_fu_267_p2 <= (state_q0 xor roundKey_TDATA);
    tmp_65_9_fu_273_p2 <= (state_load_9_reg_369 xor roundKey_TDATA);
    tmp_s_fu_256_p2 <= (state_q0 xor roundKey_read_reg_294);
end behav;
