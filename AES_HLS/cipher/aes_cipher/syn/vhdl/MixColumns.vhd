-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity MixColumns is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    state_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    state_ce0 : OUT STD_LOGIC;
    state_we0 : OUT STD_LOGIC;
    state_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    state_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    state_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    state_ce1 : OUT STD_LOGIC;
    state_q1 : IN STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of MixColumns is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (12 downto 0) := "0000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (12 downto 0) := "0000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (12 downto 0) := "0000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (12 downto 0) := "0000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (12 downto 0) := "0000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (12 downto 0) := "0000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (12 downto 0) := "0001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (12 downto 0) := "0010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (12 downto 0) := "0100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (12 downto 0) := "1000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv64_5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv64_6 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000110";
    constant ap_const_lv64_7 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000111";
    constant ap_const_lv64_8 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000";
    constant ap_const_lv64_9 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001001";
    constant ap_const_lv64_A : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001010";
    constant ap_const_lv64_B : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001011";
    constant ap_const_lv64_C : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001100";
    constant ap_const_lv64_D : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001101";
    constant ap_const_lv64_E : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001110";
    constant ap_const_lv64_F : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001111";
    constant ap_const_lv56_1 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv56_2 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal cipher_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal cipher_ce0 : STD_LOGIC;
    signal cipher_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal cipher_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal cipher_ce1 : STD_LOGIC;
    signal cipher_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal cipher_address2 : STD_LOGIC_VECTOR (9 downto 0);
    signal cipher_ce2 : STD_LOGIC;
    signal cipher_q2 : STD_LOGIC_VECTOR (7 downto 0);
    signal cipher_address3 : STD_LOGIC_VECTOR (9 downto 0);
    signal cipher_ce3 : STD_LOGIC;
    signal cipher_q3 : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_638 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal reg_643 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal reg_647 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal reg_652 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal i_2_fu_1254_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_2_reg_1508 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal tmp_17_fu_1260_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_17_reg_1513 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_16_fu_1248_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_state_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_state_ce0 : STD_LOGIC;
    signal tmp_state_we0 : STD_LOGIC;
    signal tmp_state_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_state_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_state_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_state_ce1 : STD_LOGIC;
    signal tmp_state_we1 : STD_LOGIC;
    signal tmp_state_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_reg_627 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal addr_fu_656_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal addr1_fu_665_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal addr2_fu_674_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal addr3_fu_683_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal addr4_fu_730_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal addr5_fu_739_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal addr6_fu_748_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal addr7_fu_757_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal addr8_fu_804_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal addr9_fu_813_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal addr10_fu_822_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal addr11_fu_831_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal addr12_fu_878_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal addr13_fu_887_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal addr14_fu_896_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal addr15_fu_905_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal addr16_fu_952_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal addr17_fu_961_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal addr18_fu_970_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal addr19_fu_979_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal addr20_fu_1026_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal addr21_fu_1035_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal addr22_fu_1044_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal addr23_fu_1053_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal addr24_fu_1100_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal addr25_fu_1109_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal addr26_fu_1118_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal addr27_fu_1127_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal addr28_fu_1174_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal addr29_fu_1183_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal addr30_fu_1192_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal addr31_fu_1201_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_9_fu_704_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_3_fu_723_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_1_fu_778_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_2_fu_797_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_8_fu_852_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_s_fu_871_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_4_fu_926_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_fu_945_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_6_fu_1000_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_7_fu_1019_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_10_fu_1074_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_11_fu_1093_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_12_fu_1148_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_13_fu_1167_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_14_fu_1222_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_15_fu_1241_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp2_fu_698_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp1_fu_692_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp4_fu_717_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp3_fu_711_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp6_fu_772_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp5_fu_766_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp8_fu_791_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp7_fu_785_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_fu_846_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp9_fu_840_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp11_fu_865_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp10_fu_859_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp13_fu_920_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp12_fu_914_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp15_fu_939_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp14_fu_933_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp17_fu_994_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp16_fu_988_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp19_fu_1013_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp18_fu_1007_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp21_fu_1068_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp20_fu_1062_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp23_fu_1087_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp22_fu_1081_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp25_fu_1142_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp24_fu_1136_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp27_fu_1161_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp26_fu_1155_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp29_fu_1216_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp28_fu_1210_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp31_fu_1235_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp30_fu_1229_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (12 downto 0);

    component MixColumns_cipher IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address2 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce2 : IN STD_LOGIC;
        q2 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address3 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce3 : IN STD_LOGIC;
        q3 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component ShiftRows_tmp_state IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    cipher_U : component MixColumns_cipher
    generic map (
        DataWidth => 8,
        AddressRange => 768,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => cipher_address0,
        ce0 => cipher_ce0,
        q0 => cipher_q0,
        address1 => cipher_address1,
        ce1 => cipher_ce1,
        q1 => cipher_q1,
        address2 => cipher_address2,
        ce2 => cipher_ce2,
        q2 => cipher_q2,
        address3 => cipher_address3,
        ce3 => cipher_ce3,
        q3 => cipher_q3);

    tmp_state_U : component ShiftRows_tmp_state
    generic map (
        DataWidth => 8,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => tmp_state_address0,
        ce0 => tmp_state_ce0,
        we0 => tmp_state_we0,
        d0 => tmp_state_d0,
        q0 => tmp_state_q0,
        address1 => tmp_state_address1,
        ce1 => tmp_state_ce1,
        we1 => tmp_state_we1,
        d1 => tmp_state_d1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_reg_627_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                i_reg_627 <= i_2_reg_1508;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                i_reg_627 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    reg_638_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                reg_638 <= state_q1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                reg_638 <= state_q0;
            end if; 
        end if;
    end process;

    reg_647_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                reg_647 <= state_q0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                reg_647 <= state_q1;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                i_2_reg_1508 <= i_2_fu_1254_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state5))) then
                reg_643 <= state_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state4))) then
                reg_652 <= state_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_16_fu_1248_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                    tmp_17_reg_1513(4 downto 0) <= tmp_17_fu_1260_p1(4 downto 0);
            end if;
        end if;
    end process;
    tmp_17_reg_1513(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state12, tmp_16_fu_1248_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                if (((tmp_16_fu_1248_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXX";
        end case;
    end process;
    addr10_fu_822_p3 <= (ap_const_lv56_1 & state_q1);
    addr11_fu_831_p3 <= (ap_const_lv56_2 & state_q0);
    addr12_fu_878_p3 <= (ap_const_lv56_1 & reg_643);
    addr13_fu_887_p3 <= (ap_const_lv56_2 & state_q1);
    addr14_fu_896_p3 <= (ap_const_lv56_2 & reg_652);
    addr15_fu_905_p3 <= (ap_const_lv56_1 & state_q1);
    addr16_fu_952_p3 <= (ap_const_lv56_1 & reg_647);
    addr17_fu_961_p3 <= (ap_const_lv56_2 & state_q1);
    addr18_fu_970_p3 <= (ap_const_lv56_1 & state_q1);
    addr19_fu_979_p3 <= (ap_const_lv56_2 & state_q0);
    addr1_fu_665_p3 <= (ap_const_lv56_2 & state_q0);
    addr20_fu_1026_p3 <= (ap_const_lv56_1 & reg_643);
    addr21_fu_1035_p3 <= (ap_const_lv56_2 & state_q1);
    addr22_fu_1044_p3 <= (ap_const_lv56_2 & reg_647);
    addr23_fu_1053_p3 <= (ap_const_lv56_1 & state_q1);
    addr24_fu_1100_p3 <= (ap_const_lv56_1 & reg_652);
    addr25_fu_1109_p3 <= (ap_const_lv56_2 & state_q1);
    addr26_fu_1118_p3 <= (ap_const_lv56_1 & state_q1);
    addr27_fu_1127_p3 <= (ap_const_lv56_2 & state_q0);
    addr28_fu_1174_p3 <= (ap_const_lv56_1 & reg_643);
    addr29_fu_1183_p3 <= (ap_const_lv56_2 & state_q1);
    addr2_fu_674_p3 <= (ap_const_lv56_1 & state_q0);
    addr30_fu_1192_p3 <= (ap_const_lv56_2 & reg_652);
    addr31_fu_1201_p3 <= (ap_const_lv56_1 & state_q1);
    addr3_fu_683_p3 <= (ap_const_lv56_2 & state_q1);
    addr4_fu_730_p3 <= (ap_const_lv56_1 & reg_647);
    addr5_fu_739_p3 <= (ap_const_lv56_2 & state_q1);
    addr6_fu_748_p3 <= (ap_const_lv56_2 & reg_638);
    addr7_fu_757_p3 <= (ap_const_lv56_1 & state_q1);
    addr8_fu_804_p3 <= (ap_const_lv56_1 & reg_652);
    addr9_fu_813_p3 <= (ap_const_lv56_2 & state_q1);
    addr_fu_656_p3 <= (ap_const_lv56_1 & reg_638);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state12, tmp_16_fu_1248_p2)
    begin
        if ((((tmp_16_fu_1248_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state12)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state12, tmp_16_fu_1248_p2)
    begin
        if (((tmp_16_fu_1248_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    cipher_address0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state9, ap_CS_fsm_state3, ap_CS_fsm_state6, ap_CS_fsm_state4, ap_CS_fsm_state8, ap_CS_fsm_state10, addr_fu_656_p3, addr4_fu_730_p3, addr8_fu_804_p3, addr12_fu_878_p3, addr16_fu_952_p3, addr20_fu_1026_p3, addr24_fu_1100_p3, addr28_fu_1174_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            cipher_address0 <= addr28_fu_1174_p3(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            cipher_address0 <= addr24_fu_1100_p3(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            cipher_address0 <= addr20_fu_1026_p3(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            cipher_address0 <= addr16_fu_952_p3(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            cipher_address0 <= addr12_fu_878_p3(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            cipher_address0 <= addr8_fu_804_p3(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            cipher_address0 <= addr4_fu_730_p3(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            cipher_address0 <= addr_fu_656_p3(10 - 1 downto 0);
        else 
            cipher_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    cipher_address1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state9, ap_CS_fsm_state3, ap_CS_fsm_state6, ap_CS_fsm_state4, ap_CS_fsm_state8, ap_CS_fsm_state10, addr1_fu_665_p3, addr5_fu_739_p3, addr9_fu_813_p3, addr13_fu_887_p3, addr17_fu_961_p3, addr21_fu_1035_p3, addr25_fu_1109_p3, addr29_fu_1183_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            cipher_address1 <= addr29_fu_1183_p3(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            cipher_address1 <= addr25_fu_1109_p3(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            cipher_address1 <= addr21_fu_1035_p3(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            cipher_address1 <= addr17_fu_961_p3(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            cipher_address1 <= addr13_fu_887_p3(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            cipher_address1 <= addr9_fu_813_p3(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            cipher_address1 <= addr5_fu_739_p3(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            cipher_address1 <= addr1_fu_665_p3(10 - 1 downto 0);
        else 
            cipher_address1 <= "XXXXXXXXXX";
        end if; 
    end process;


    cipher_address2_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state9, ap_CS_fsm_state3, ap_CS_fsm_state6, ap_CS_fsm_state4, ap_CS_fsm_state8, ap_CS_fsm_state10, addr2_fu_674_p3, addr6_fu_748_p3, addr10_fu_822_p3, addr14_fu_896_p3, addr18_fu_970_p3, addr22_fu_1044_p3, addr26_fu_1118_p3, addr30_fu_1192_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            cipher_address2 <= addr30_fu_1192_p3(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            cipher_address2 <= addr26_fu_1118_p3(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            cipher_address2 <= addr22_fu_1044_p3(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            cipher_address2 <= addr18_fu_970_p3(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            cipher_address2 <= addr14_fu_896_p3(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            cipher_address2 <= addr10_fu_822_p3(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            cipher_address2 <= addr6_fu_748_p3(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            cipher_address2 <= addr2_fu_674_p3(10 - 1 downto 0);
        else 
            cipher_address2 <= "XXXXXXXXXX";
        end if; 
    end process;


    cipher_address3_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state9, ap_CS_fsm_state3, ap_CS_fsm_state6, ap_CS_fsm_state4, ap_CS_fsm_state8, ap_CS_fsm_state10, addr3_fu_683_p3, addr7_fu_757_p3, addr11_fu_831_p3, addr15_fu_905_p3, addr19_fu_979_p3, addr23_fu_1053_p3, addr27_fu_1127_p3, addr31_fu_1201_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            cipher_address3 <= addr31_fu_1201_p3(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            cipher_address3 <= addr27_fu_1127_p3(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            cipher_address3 <= addr23_fu_1053_p3(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            cipher_address3 <= addr19_fu_979_p3(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            cipher_address3 <= addr15_fu_905_p3(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            cipher_address3 <= addr11_fu_831_p3(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            cipher_address3 <= addr7_fu_757_p3(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            cipher_address3 <= addr3_fu_683_p3(10 - 1 downto 0);
        else 
            cipher_address3 <= "XXXXXXXXXX";
        end if; 
    end process;


    cipher_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state9, ap_CS_fsm_state3, ap_CS_fsm_state6, ap_CS_fsm_state4, ap_CS_fsm_state8, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            cipher_ce0 <= ap_const_logic_1;
        else 
            cipher_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    cipher_ce1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state9, ap_CS_fsm_state3, ap_CS_fsm_state6, ap_CS_fsm_state4, ap_CS_fsm_state8, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            cipher_ce1 <= ap_const_logic_1;
        else 
            cipher_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    cipher_ce2_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state9, ap_CS_fsm_state3, ap_CS_fsm_state6, ap_CS_fsm_state4, ap_CS_fsm_state8, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            cipher_ce2 <= ap_const_logic_1;
        else 
            cipher_ce2 <= ap_const_logic_0;
        end if; 
    end process;


    cipher_ce3_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state9, ap_CS_fsm_state3, ap_CS_fsm_state6, ap_CS_fsm_state4, ap_CS_fsm_state8, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            cipher_ce3 <= ap_const_logic_1;
        else 
            cipher_ce3 <= ap_const_logic_0;
        end if; 
    end process;

    i_2_fu_1254_p2 <= std_logic_vector(unsigned(i_reg_627) + unsigned(ap_const_lv5_1));

    state_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state3, ap_CS_fsm_state6, ap_CS_fsm_state4, ap_CS_fsm_state8, tmp_17_reg_1513, ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            state_address0 <= tmp_17_reg_1513(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            state_address0 <= ap_const_lv64_E(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            state_address0 <= ap_const_lv64_C(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            state_address0 <= ap_const_lv64_A(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            state_address0 <= ap_const_lv64_8(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            state_address0 <= ap_const_lv64_6(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            state_address0 <= ap_const_lv64_4(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            state_address0 <= ap_const_lv64_1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            state_address0 <= ap_const_lv64_0(4 - 1 downto 0);
        else 
            state_address0 <= "XXXX";
        end if; 
    end process;


    state_address1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state9, ap_CS_fsm_state3, ap_CS_fsm_state6, ap_CS_fsm_state4, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            state_address1 <= ap_const_lv64_F(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            state_address1 <= ap_const_lv64_D(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            state_address1 <= ap_const_lv64_B(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            state_address1 <= ap_const_lv64_9(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            state_address1 <= ap_const_lv64_7(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            state_address1 <= ap_const_lv64_5(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            state_address1 <= ap_const_lv64_3(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            state_address1 <= ap_const_lv64_2(4 - 1 downto 0);
        else 
            state_address1 <= "XXXX";
        end if; 
    end process;


    state_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state3, ap_CS_fsm_state6, ap_CS_fsm_state4, ap_CS_fsm_state8, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state4) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
            state_ce0 <= ap_const_logic_1;
        else 
            state_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    state_ce1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state9, ap_CS_fsm_state3, ap_CS_fsm_state6, ap_CS_fsm_state4, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            state_ce1 <= ap_const_logic_1;
        else 
            state_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    state_d0 <= tmp_state_q0;

    state_we0_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            state_we0 <= ap_const_logic_1;
        else 
            state_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp10_fu_859_p2 <= (state_q1 xor reg_652);
    tmp11_fu_865_p2 <= (cipher_q3 xor cipher_q2);
    tmp12_fu_914_p2 <= (reg_652 xor reg_638);
    tmp13_fu_920_p2 <= (cipher_q1 xor cipher_q0);
    tmp14_fu_933_p2 <= (reg_643 xor reg_638);
    tmp15_fu_939_p2 <= (cipher_q3 xor cipher_q2);
    tmp16_fu_988_p2 <= (cipher_q1 xor cipher_q0);
    tmp17_fu_994_p2 <= (state_q1 xor reg_643);
    tmp18_fu_1007_p2 <= (state_q1 xor reg_647);
    tmp19_fu_1013_p2 <= (cipher_q3 xor cipher_q2);
    tmp1_fu_692_p2 <= (cipher_q1 xor cipher_q0);
    tmp20_fu_1062_p2 <= (reg_647 xor reg_638);
    tmp21_fu_1068_p2 <= (cipher_q1 xor cipher_q0);
    tmp22_fu_1081_p2 <= (reg_643 xor reg_638);
    tmp23_fu_1087_p2 <= (cipher_q3 xor cipher_q2);
    tmp24_fu_1136_p2 <= (cipher_q1 xor cipher_q0);
    tmp25_fu_1142_p2 <= (state_q1 xor reg_643);
    tmp26_fu_1155_p2 <= (state_q1 xor reg_652);
    tmp27_fu_1161_p2 <= (cipher_q3 xor cipher_q2);
    tmp28_fu_1210_p2 <= (reg_652 xor reg_638);
    tmp29_fu_1216_p2 <= (cipher_q1 xor cipher_q0);
    tmp2_fu_698_p2 <= (state_q1 xor reg_647);
    tmp30_fu_1229_p2 <= (reg_643 xor reg_638);
    tmp31_fu_1235_p2 <= (cipher_q3 xor cipher_q2);
    tmp3_fu_711_p2 <= (state_q1 xor reg_638);
    tmp4_fu_717_p2 <= (cipher_q3 xor cipher_q2);
    tmp5_fu_766_p2 <= (reg_643 xor reg_638);
    tmp6_fu_772_p2 <= (cipher_q1 xor cipher_q0);
    tmp7_fu_785_p2 <= (reg_647 xor reg_643);
    tmp8_fu_791_p2 <= (cipher_q3 xor cipher_q2);
    tmp9_fu_840_p2 <= (cipher_q1 xor cipher_q0);
    tmp_10_fu_1074_p2 <= (tmp21_fu_1068_p2 xor tmp20_fu_1062_p2);
    tmp_11_fu_1093_p2 <= (tmp23_fu_1087_p2 xor tmp22_fu_1081_p2);
    tmp_12_fu_1148_p2 <= (tmp25_fu_1142_p2 xor tmp24_fu_1136_p2);
    tmp_13_fu_1167_p2 <= (tmp27_fu_1161_p2 xor tmp26_fu_1155_p2);
    tmp_14_fu_1222_p2 <= (tmp29_fu_1216_p2 xor tmp28_fu_1210_p2);
    tmp_15_fu_1241_p2 <= (tmp31_fu_1235_p2 xor tmp30_fu_1229_p2);
    tmp_16_fu_1248_p2 <= "1" when (i_reg_627 = ap_const_lv5_10) else "0";
    tmp_17_fu_1260_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_627),64));
    tmp_1_fu_778_p2 <= (tmp6_fu_772_p2 xor tmp5_fu_766_p2);
    tmp_2_fu_797_p2 <= (tmp8_fu_791_p2 xor tmp7_fu_785_p2);
    tmp_3_fu_723_p2 <= (tmp4_fu_717_p2 xor tmp3_fu_711_p2);
    tmp_4_fu_926_p2 <= (tmp13_fu_920_p2 xor tmp12_fu_914_p2);
    tmp_5_fu_945_p2 <= (tmp15_fu_939_p2 xor tmp14_fu_933_p2);
    tmp_6_fu_1000_p2 <= (tmp17_fu_994_p2 xor tmp16_fu_988_p2);
    tmp_7_fu_1019_p2 <= (tmp19_fu_1013_p2 xor tmp18_fu_1007_p2);
    tmp_8_fu_852_p2 <= (tmp_fu_846_p2 xor tmp9_fu_840_p2);
    tmp_9_fu_704_p2 <= (tmp2_fu_698_p2 xor tmp1_fu_692_p2);
    tmp_fu_846_p2 <= (state_q1 xor reg_643);
    tmp_s_fu_871_p2 <= (tmp11_fu_865_p2 xor tmp10_fu_859_p2);

    tmp_state_address0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state9, ap_CS_fsm_state6, ap_CS_fsm_state4, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state12, tmp_17_fu_1260_p1, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            tmp_state_address0 <= tmp_17_fu_1260_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            tmp_state_address0 <= ap_const_lv64_E(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            tmp_state_address0 <= ap_const_lv64_C(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            tmp_state_address0 <= ap_const_lv64_A(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            tmp_state_address0 <= ap_const_lv64_8(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            tmp_state_address0 <= ap_const_lv64_6(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            tmp_state_address0 <= ap_const_lv64_4(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            tmp_state_address0 <= ap_const_lv64_2(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            tmp_state_address0 <= ap_const_lv64_0(4 - 1 downto 0);
        else 
            tmp_state_address0 <= "XXXX";
        end if; 
    end process;


    tmp_state_address1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state9, ap_CS_fsm_state6, ap_CS_fsm_state4, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            tmp_state_address1 <= ap_const_lv64_F(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            tmp_state_address1 <= ap_const_lv64_D(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            tmp_state_address1 <= ap_const_lv64_B(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            tmp_state_address1 <= ap_const_lv64_9(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            tmp_state_address1 <= ap_const_lv64_7(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            tmp_state_address1 <= ap_const_lv64_5(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            tmp_state_address1 <= ap_const_lv64_3(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            tmp_state_address1 <= ap_const_lv64_1(4 - 1 downto 0);
        else 
            tmp_state_address1 <= "XXXX";
        end if; 
    end process;


    tmp_state_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state9, ap_CS_fsm_state6, ap_CS_fsm_state4, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            tmp_state_ce0 <= ap_const_logic_1;
        else 
            tmp_state_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    tmp_state_ce1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state9, ap_CS_fsm_state6, ap_CS_fsm_state4, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            tmp_state_ce1 <= ap_const_logic_1;
        else 
            tmp_state_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    tmp_state_d0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state9, ap_CS_fsm_state6, ap_CS_fsm_state4, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state11, tmp_9_fu_704_p2, tmp_1_fu_778_p2, tmp_8_fu_852_p2, tmp_4_fu_926_p2, tmp_6_fu_1000_p2, tmp_10_fu_1074_p2, tmp_12_fu_1148_p2, tmp_14_fu_1222_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            tmp_state_d0 <= tmp_14_fu_1222_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            tmp_state_d0 <= tmp_12_fu_1148_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            tmp_state_d0 <= tmp_10_fu_1074_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            tmp_state_d0 <= tmp_6_fu_1000_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            tmp_state_d0 <= tmp_4_fu_926_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            tmp_state_d0 <= tmp_8_fu_852_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            tmp_state_d0 <= tmp_1_fu_778_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            tmp_state_d0 <= tmp_9_fu_704_p2;
        else 
            tmp_state_d0 <= "XXXXXXXX";
        end if; 
    end process;


    tmp_state_d1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state9, ap_CS_fsm_state6, ap_CS_fsm_state4, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state11, tmp_3_fu_723_p2, tmp_2_fu_797_p2, tmp_s_fu_871_p2, tmp_5_fu_945_p2, tmp_7_fu_1019_p2, tmp_11_fu_1093_p2, tmp_13_fu_1167_p2, tmp_15_fu_1241_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            tmp_state_d1 <= tmp_15_fu_1241_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            tmp_state_d1 <= tmp_13_fu_1167_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            tmp_state_d1 <= tmp_11_fu_1093_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            tmp_state_d1 <= tmp_7_fu_1019_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            tmp_state_d1 <= tmp_5_fu_945_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            tmp_state_d1 <= tmp_s_fu_871_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            tmp_state_d1 <= tmp_2_fu_797_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            tmp_state_d1 <= tmp_3_fu_723_p2;
        else 
            tmp_state_d1 <= "XXXXXXXX";
        end if; 
    end process;


    tmp_state_we0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state9, ap_CS_fsm_state6, ap_CS_fsm_state4, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            tmp_state_we0 <= ap_const_logic_1;
        else 
            tmp_state_we0 <= ap_const_logic_0;
        end if; 
    end process;


    tmp_state_we1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state9, ap_CS_fsm_state6, ap_CS_fsm_state4, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            tmp_state_we1 <= ap_const_logic_1;
        else 
            tmp_state_we1 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
