// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="AES_Decrypt,hls_ip_2017_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.669000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=12,HLS_SYN_DSP=0,HLS_SYN_FF=578,HLS_SYN_LUT=3439}" *)

module AES_Decrypt (
        ap_clk,
        ap_rst_n,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        ciphertext_TDATA,
        ciphertext_TVALID,
        ciphertext_TREADY,
        expandedKey_TDATA,
        expandedKey_TVALID,
        expandedKey_TREADY,
        Nr,
        plaintext_TDATA,
        plaintext_TVALID,
        plaintext_TREADY
);

parameter    ap_ST_fsm_state1 = 29'd1;
parameter    ap_ST_fsm_pp0_stage0 = 29'd2;
parameter    ap_ST_fsm_state4 = 29'd4;
parameter    ap_ST_fsm_state5 = 29'd8;
parameter    ap_ST_fsm_state6 = 29'd16;
parameter    ap_ST_fsm_state7 = 29'd32;
parameter    ap_ST_fsm_state8 = 29'd64;
parameter    ap_ST_fsm_state9 = 29'd128;
parameter    ap_ST_fsm_state10 = 29'd256;
parameter    ap_ST_fsm_state11 = 29'd512;
parameter    ap_ST_fsm_state12 = 29'd1024;
parameter    ap_ST_fsm_state13 = 29'd2048;
parameter    ap_ST_fsm_state14 = 29'd4096;
parameter    ap_ST_fsm_state15 = 29'd8192;
parameter    ap_ST_fsm_state16 = 29'd16384;
parameter    ap_ST_fsm_state17 = 29'd32768;
parameter    ap_ST_fsm_state18 = 29'd65536;
parameter    ap_ST_fsm_state19 = 29'd131072;
parameter    ap_ST_fsm_state20 = 29'd262144;
parameter    ap_ST_fsm_state21 = 29'd524288;
parameter    ap_ST_fsm_state22 = 29'd1048576;
parameter    ap_ST_fsm_state23 = 29'd2097152;
parameter    ap_ST_fsm_state24 = 29'd4194304;
parameter    ap_ST_fsm_state25 = 29'd8388608;
parameter    ap_ST_fsm_state26 = 29'd16777216;
parameter    ap_ST_fsm_state27 = 29'd33554432;
parameter    ap_ST_fsm_state28 = 29'd67108864;
parameter    ap_ST_fsm_state29 = 29'd134217728;
parameter    ap_ST_fsm_state30 = 29'd268435456;

input   ap_clk;
input   ap_rst_n;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [7:0] ciphertext_TDATA;
input   ciphertext_TVALID;
output   ciphertext_TREADY;
input  [7:0] expandedKey_TDATA;
input   expandedKey_TVALID;
output   expandedKey_TREADY;
input  [15:0] Nr;
output  [7:0] plaintext_TDATA;
output   plaintext_TVALID;
input   plaintext_TREADY;

reg ap_done;
reg ap_idle;
reg ap_ready;

reg    ap_rst_n_inv;
(* fsm_encoding = "none" *) reg   [28:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [7:0] ciphertext_0_data_out;
wire    ciphertext_0_vld_in;
wire    ciphertext_0_vld_out;
wire    ciphertext_0_ack_in;
reg    ciphertext_0_ack_out;
reg   [7:0] ciphertext_0_payload_A;
reg   [7:0] ciphertext_0_payload_B;
reg    ciphertext_0_sel_rd;
reg    ciphertext_0_sel_wr;
wire    ciphertext_0_sel;
wire    ciphertext_0_load_A;
wire    ciphertext_0_load_B;
reg   [1:0] ciphertext_0_state;
wire    ciphertext_0_state_cmp_full;
reg   [7:0] expandedKey_0_data_out;
wire    expandedKey_0_vld_in;
wire    expandedKey_0_vld_out;
wire    expandedKey_0_ack_in;
wire    expandedKey_0_ack_out;
reg   [7:0] expandedKey_0_payload_A;
reg   [7:0] expandedKey_0_payload_B;
reg    expandedKey_0_sel_rd;
reg    expandedKey_0_sel_wr;
wire    expandedKey_0_sel;
wire    expandedKey_0_load_A;
wire    expandedKey_0_load_B;
reg   [1:0] expandedKey_0_state;
wire    expandedKey_0_state_cmp_full;
reg   [7:0] plaintext_1_data_out;
reg    plaintext_1_vld_in;
wire    plaintext_1_vld_out;
wire    plaintext_1_ack_in;
wire    plaintext_1_ack_out;
reg   [7:0] plaintext_1_payload_A;
reg   [7:0] plaintext_1_payload_B;
reg    plaintext_1_sel_rd;
reg    plaintext_1_sel_wr;
wire    plaintext_1_sel;
wire    plaintext_1_load_A;
wire    plaintext_1_load_B;
reg   [1:0] plaintext_1_state;
wire    plaintext_1_state_cmp_full;
reg    ciphertext_TDATA_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] tmp_reg_391;
reg    plaintext_TDATA_blk_n;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state16;
wire    ap_CS_fsm_state17;
wire    ap_CS_fsm_state18;
wire    ap_CS_fsm_state19;
wire    ap_CS_fsm_state20;
wire    ap_CS_fsm_state21;
wire    ap_CS_fsm_state22;
wire    ap_CS_fsm_state23;
wire    ap_CS_fsm_state24;
wire    ap_CS_fsm_state25;
wire    ap_CS_fsm_state26;
wire    ap_CS_fsm_state27;
wire    ap_CS_fsm_state28;
wire    ap_CS_fsm_state29;
wire    ap_CS_fsm_state30;
reg   [4:0] i_reg_272;
wire   [7:0] state_q0;
wire   [0:0] tmp_fu_339_p2;
wire    ap_block_state2_pp0_stage0_iter0;
reg    ap_block_state3_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
wire   [4:0] i_3_fu_345_p2;
reg   [4:0] i_3_reg_395;
reg    ap_enable_reg_pp0_iter0;
wire   [16:0] tmp_s_fu_359_p2;
reg   [16:0] tmp_s_reg_400;
wire    ap_CS_fsm_state5;
wire    grp_AddRoundKey_fu_295_ap_done;
wire   [15:0] i_4_fu_370_p2;
reg   [15:0] i_4_reg_408;
wire    ap_CS_fsm_state6;
wire   [0:0] tmp_19_fu_380_p2;
reg   [0:0] tmp_19_reg_413;
wire   [0:0] exitcond_fu_365_p2;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg   [3:0] state_address0;
reg    state_ce0;
reg    state_we0;
reg   [7:0] state_d0;
reg   [3:0] state_address1;
reg    state_ce1;
reg    state_we1;
reg   [7:0] state_d1;
wire   [7:0] state_q1;
wire    grp_AddRoundKey_fu_295_ap_start;
wire    grp_AddRoundKey_fu_295_ap_idle;
wire    grp_AddRoundKey_fu_295_ap_ready;
wire   [3:0] grp_AddRoundKey_fu_295_state_address0;
wire    grp_AddRoundKey_fu_295_state_ce0;
wire    grp_AddRoundKey_fu_295_state_we0;
wire   [7:0] grp_AddRoundKey_fu_295_state_d0;
wire   [3:0] grp_AddRoundKey_fu_295_state_address1;
wire    grp_AddRoundKey_fu_295_state_ce1;
wire    grp_AddRoundKey_fu_295_state_we1;
wire   [7:0] grp_AddRoundKey_fu_295_state_d1;
wire    grp_AddRoundKey_fu_295_roundKey_TVALID;
wire    grp_AddRoundKey_fu_295_roundKey_TREADY;
wire    grp_InvMixColumns_fu_315_ap_start;
wire    grp_InvMixColumns_fu_315_ap_done;
wire    grp_InvMixColumns_fu_315_ap_idle;
wire    grp_InvMixColumns_fu_315_ap_ready;
wire   [3:0] grp_InvMixColumns_fu_315_state_address0;
wire    grp_InvMixColumns_fu_315_state_ce0;
wire    grp_InvMixColumns_fu_315_state_we0;
wire   [7:0] grp_InvMixColumns_fu_315_state_d0;
wire   [3:0] grp_InvMixColumns_fu_315_state_address1;
wire    grp_InvMixColumns_fu_315_state_ce1;
wire    grp_InvSubBytes_fu_322_ap_start;
wire    grp_InvSubBytes_fu_322_ap_done;
wire    grp_InvSubBytes_fu_322_ap_idle;
wire    grp_InvSubBytes_fu_322_ap_ready;
wire   [3:0] grp_InvSubBytes_fu_322_state_address0;
wire    grp_InvSubBytes_fu_322_state_ce0;
wire    grp_InvSubBytes_fu_322_state_we0;
wire   [7:0] grp_InvSubBytes_fu_322_state_d0;
wire   [3:0] grp_InvSubBytes_fu_322_state_address1;
wire    grp_InvSubBytes_fu_322_state_ce1;
wire    grp_InvSubBytes_fu_322_state_we1;
wire   [7:0] grp_InvSubBytes_fu_322_state_d1;
wire    grp_InvShiftRows_fu_329_ap_start;
wire    grp_InvShiftRows_fu_329_ap_done;
wire    grp_InvShiftRows_fu_329_ap_idle;
wire    grp_InvShiftRows_fu_329_ap_ready;
wire   [3:0] grp_InvShiftRows_fu_329_state_address0;
wire    grp_InvShiftRows_fu_329_state_ce0;
wire    grp_InvShiftRows_fu_329_state_we0;
wire   [7:0] grp_InvShiftRows_fu_329_state_d0;
wire   [3:0] grp_InvShiftRows_fu_329_state_address1;
wire    grp_InvShiftRows_fu_329_state_ce1;
reg   [4:0] ap_phi_mux_i_phi_fu_276_p4;
reg   [15:0] i1_reg_284;
wire    ap_CS_fsm_state13;
reg    ap_block_state13_on_subcall_done;
reg    ap_reg_grp_AddRoundKey_fu_295_ap_start;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state11;
reg    ap_reg_grp_InvMixColumns_fu_315_ap_start;
wire    ap_CS_fsm_state12;
reg    ap_reg_grp_InvSubBytes_fu_322_ap_start;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state9;
reg    ap_reg_grp_InvShiftRows_fu_329_ap_start;
wire    ap_CS_fsm_state7;
wire   [63:0] tmp_18_fu_351_p1;
wire   [16:0] tmp_cast_fu_356_p1;
wire   [16:0] tmp_67_cast_fu_376_p1;
reg   [28:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 29'd1;
#0 ciphertext_0_sel_rd = 1'b0;
#0 ciphertext_0_sel_wr = 1'b0;
#0 ciphertext_0_state = 2'd0;
#0 expandedKey_0_sel_rd = 1'b0;
#0 expandedKey_0_sel_wr = 1'b0;
#0 expandedKey_0_state = 2'd0;
#0 plaintext_1_sel_rd = 1'b0;
#0 plaintext_1_sel_wr = 1'b0;
#0 plaintext_1_state = 2'd0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_reg_grp_AddRoundKey_fu_295_ap_start = 1'b0;
#0 ap_reg_grp_InvMixColumns_fu_315_ap_start = 1'b0;
#0 ap_reg_grp_InvSubBytes_fu_322_ap_start = 1'b0;
#0 ap_reg_grp_InvShiftRows_fu_329_ap_start = 1'b0;
end

AES_Decrypt_state #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
state_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(state_address0),
    .ce0(state_ce0),
    .we0(state_we0),
    .d0(state_d0),
    .q0(state_q0),
    .address1(state_address1),
    .ce1(state_ce1),
    .we1(state_we1),
    .d1(state_d1),
    .q1(state_q1)
);

AddRoundKey grp_AddRoundKey_fu_295(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_AddRoundKey_fu_295_ap_start),
    .ap_done(grp_AddRoundKey_fu_295_ap_done),
    .ap_idle(grp_AddRoundKey_fu_295_ap_idle),
    .ap_ready(grp_AddRoundKey_fu_295_ap_ready),
    .state_address0(grp_AddRoundKey_fu_295_state_address0),
    .state_ce0(grp_AddRoundKey_fu_295_state_ce0),
    .state_we0(grp_AddRoundKey_fu_295_state_we0),
    .state_d0(grp_AddRoundKey_fu_295_state_d0),
    .state_q0(state_q0),
    .state_address1(grp_AddRoundKey_fu_295_state_address1),
    .state_ce1(grp_AddRoundKey_fu_295_state_ce1),
    .state_we1(grp_AddRoundKey_fu_295_state_we1),
    .state_d1(grp_AddRoundKey_fu_295_state_d1),
    .state_q1(state_q1),
    .roundKey_TDATA(expandedKey_0_data_out),
    .roundKey_TVALID(grp_AddRoundKey_fu_295_roundKey_TVALID),
    .roundKey_TREADY(grp_AddRoundKey_fu_295_roundKey_TREADY)
);

InvMixColumns grp_InvMixColumns_fu_315(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_InvMixColumns_fu_315_ap_start),
    .ap_done(grp_InvMixColumns_fu_315_ap_done),
    .ap_idle(grp_InvMixColumns_fu_315_ap_idle),
    .ap_ready(grp_InvMixColumns_fu_315_ap_ready),
    .state_address0(grp_InvMixColumns_fu_315_state_address0),
    .state_ce0(grp_InvMixColumns_fu_315_state_ce0),
    .state_we0(grp_InvMixColumns_fu_315_state_we0),
    .state_d0(grp_InvMixColumns_fu_315_state_d0),
    .state_q0(state_q0),
    .state_address1(grp_InvMixColumns_fu_315_state_address1),
    .state_ce1(grp_InvMixColumns_fu_315_state_ce1),
    .state_q1(state_q1)
);

InvSubBytes grp_InvSubBytes_fu_322(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_InvSubBytes_fu_322_ap_start),
    .ap_done(grp_InvSubBytes_fu_322_ap_done),
    .ap_idle(grp_InvSubBytes_fu_322_ap_idle),
    .ap_ready(grp_InvSubBytes_fu_322_ap_ready),
    .state_address0(grp_InvSubBytes_fu_322_state_address0),
    .state_ce0(grp_InvSubBytes_fu_322_state_ce0),
    .state_we0(grp_InvSubBytes_fu_322_state_we0),
    .state_d0(grp_InvSubBytes_fu_322_state_d0),
    .state_q0(state_q0),
    .state_address1(grp_InvSubBytes_fu_322_state_address1),
    .state_ce1(grp_InvSubBytes_fu_322_state_ce1),
    .state_we1(grp_InvSubBytes_fu_322_state_we1),
    .state_d1(grp_InvSubBytes_fu_322_state_d1),
    .state_q1(state_q1)
);

InvShiftRows grp_InvShiftRows_fu_329(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_InvShiftRows_fu_329_ap_start),
    .ap_done(grp_InvShiftRows_fu_329_ap_done),
    .ap_idle(grp_InvShiftRows_fu_329_ap_idle),
    .ap_ready(grp_InvShiftRows_fu_329_ap_ready),
    .state_address0(grp_InvShiftRows_fu_329_state_address0),
    .state_ce0(grp_InvShiftRows_fu_329_state_ce0),
    .state_we0(grp_InvShiftRows_fu_329_state_we0),
    .state_d0(grp_InvShiftRows_fu_329_state_d0),
    .state_q0(state_q0),
    .state_address1(grp_InvShiftRows_fu_329_state_address1),
    .state_ce1(grp_InvShiftRows_fu_329_state_ce1),
    .state_q1(state_q1)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_grp_AddRoundKey_fu_295_ap_start <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state4))) begin
            ap_reg_grp_AddRoundKey_fu_295_ap_start <= 1'b1;
        end else if ((grp_AddRoundKey_fu_295_ap_ready == 1'b1)) begin
            ap_reg_grp_AddRoundKey_fu_295_ap_start <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_grp_InvMixColumns_fu_315_ap_start <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state12)) begin
            ap_reg_grp_InvMixColumns_fu_315_ap_start <= 1'b1;
        end else if ((grp_InvMixColumns_fu_315_ap_ready == 1'b1)) begin
            ap_reg_grp_InvMixColumns_fu_315_ap_start <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_grp_InvShiftRows_fu_329_ap_start <= 1'b0;
    end else begin
        if (((exitcond_fu_365_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
            ap_reg_grp_InvShiftRows_fu_329_ap_start <= 1'b1;
        end else if ((grp_InvShiftRows_fu_329_ap_ready == 1'b1)) begin
            ap_reg_grp_InvShiftRows_fu_329_ap_start <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_grp_InvSubBytes_fu_322_ap_start <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state8)) begin
            ap_reg_grp_InvSubBytes_fu_322_ap_start <= 1'b1;
        end else if ((grp_InvSubBytes_fu_322_ap_ready == 1'b1)) begin
            ap_reg_grp_InvSubBytes_fu_322_ap_start <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ciphertext_0_sel_rd <= 1'b0;
    end else begin
        if (((ciphertext_0_ack_out == 1'b1) & (ciphertext_0_vld_out == 1'b1))) begin
            ciphertext_0_sel_rd <= ~ciphertext_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ciphertext_0_sel_wr <= 1'b0;
    end else begin
        if (((ciphertext_0_ack_in == 1'b1) & (ciphertext_0_vld_in == 1'b1))) begin
            ciphertext_0_sel_wr <= ~ciphertext_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ciphertext_0_state <= 2'd0;
    end else begin
        if ((((ciphertext_0_state == 2'd2) & (ciphertext_0_vld_in == 1'b0)) | ((ciphertext_0_state == 2'd3) & (ciphertext_0_vld_in == 1'b0) & (ciphertext_0_ack_out == 1'b1)))) begin
            ciphertext_0_state <= 2'd2;
        end else if ((((ciphertext_0_state == 2'd1) & (ciphertext_0_ack_out == 1'b0)) | ((ciphertext_0_state == 2'd3) & (ciphertext_0_ack_out == 1'b0) & (ciphertext_0_vld_in == 1'b1)))) begin
            ciphertext_0_state <= 2'd1;
        end else if (((~((ciphertext_0_vld_in == 1'b0) & (ciphertext_0_ack_out == 1'b1)) & ~((ciphertext_0_ack_out == 1'b0) & (ciphertext_0_vld_in == 1'b1)) & (ciphertext_0_state == 2'd3)) | ((ciphertext_0_state == 2'd1) & (ciphertext_0_ack_out == 1'b1)) | ((ciphertext_0_state == 2'd2) & (ciphertext_0_vld_in == 1'b1)))) begin
            ciphertext_0_state <= 2'd3;
        end else begin
            ciphertext_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        expandedKey_0_sel_rd <= 1'b0;
    end else begin
        if (((expandedKey_0_ack_out == 1'b1) & (expandedKey_0_vld_out == 1'b1))) begin
            expandedKey_0_sel_rd <= ~expandedKey_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        expandedKey_0_sel_wr <= 1'b0;
    end else begin
        if (((expandedKey_0_ack_in == 1'b1) & (expandedKey_0_vld_in == 1'b1))) begin
            expandedKey_0_sel_wr <= ~expandedKey_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        expandedKey_0_state <= 2'd0;
    end else begin
        if ((((expandedKey_0_state == 2'd2) & (expandedKey_0_vld_in == 1'b0)) | ((expandedKey_0_state == 2'd3) & (expandedKey_0_vld_in == 1'b0) & (expandedKey_0_ack_out == 1'b1)))) begin
            expandedKey_0_state <= 2'd2;
        end else if ((((expandedKey_0_state == 2'd1) & (expandedKey_0_ack_out == 1'b0)) | ((expandedKey_0_state == 2'd3) & (expandedKey_0_ack_out == 1'b0) & (expandedKey_0_vld_in == 1'b1)))) begin
            expandedKey_0_state <= 2'd1;
        end else if (((~((expandedKey_0_vld_in == 1'b0) & (expandedKey_0_ack_out == 1'b1)) & ~((expandedKey_0_ack_out == 1'b0) & (expandedKey_0_vld_in == 1'b1)) & (expandedKey_0_state == 2'd3)) | ((expandedKey_0_state == 2'd1) & (expandedKey_0_ack_out == 1'b1)) | ((expandedKey_0_state == 2'd2) & (expandedKey_0_vld_in == 1'b1)))) begin
            expandedKey_0_state <= 2'd3;
        end else begin
            expandedKey_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        plaintext_1_sel_rd <= 1'b0;
    end else begin
        if (((plaintext_1_ack_out == 1'b1) & (plaintext_1_vld_out == 1'b1))) begin
            plaintext_1_sel_rd <= ~plaintext_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        plaintext_1_sel_wr <= 1'b0;
    end else begin
        if (((plaintext_1_ack_in == 1'b1) & (plaintext_1_vld_in == 1'b1))) begin
            plaintext_1_sel_wr <= ~plaintext_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        plaintext_1_state <= 2'd0;
    end else begin
        if ((((plaintext_1_state == 2'd2) & (plaintext_1_vld_in == 1'b0)) | ((plaintext_1_state == 2'd3) & (plaintext_1_vld_in == 1'b0) & (plaintext_1_ack_out == 1'b1)))) begin
            plaintext_1_state <= 2'd2;
        end else if ((((plaintext_1_state == 2'd1) & (plaintext_1_ack_out == 1'b0)) | ((plaintext_1_state == 2'd3) & (plaintext_1_ack_out == 1'b0) & (plaintext_1_vld_in == 1'b1)))) begin
            plaintext_1_state <= 2'd1;
        end else if (((~((plaintext_1_vld_in == 1'b0) & (plaintext_1_ack_out == 1'b1)) & ~((plaintext_1_ack_out == 1'b0) & (plaintext_1_vld_in == 1'b1)) & (plaintext_1_state == 2'd3)) | ((plaintext_1_state == 2'd1) & (plaintext_1_ack_out == 1'b1)) | ((plaintext_1_state == 2'd2) & (plaintext_1_vld_in == 1'b1)))) begin
            plaintext_1_state <= 2'd3;
        end else begin
            plaintext_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state13_on_subcall_done) & (1'b1 == ap_CS_fsm_state13))) begin
        i1_reg_284 <= i_4_reg_408;
    end else if (((grp_AddRoundKey_fu_295_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
        i1_reg_284 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_reg_391 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_reg_272 <= i_3_reg_395;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_reg_272 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((ciphertext_0_load_A == 1'b1)) begin
        ciphertext_0_payload_A <= ciphertext_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((ciphertext_0_load_B == 1'b1)) begin
        ciphertext_0_payload_B <= ciphertext_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((expandedKey_0_load_A == 1'b1)) begin
        expandedKey_0_payload_A <= expandedKey_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((expandedKey_0_load_B == 1'b1)) begin
        expandedKey_0_payload_B <= expandedKey_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_3_reg_395 <= i_3_fu_345_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        i_4_reg_408 <= i_4_fu_370_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((plaintext_1_load_A == 1'b1)) begin
        plaintext_1_payload_A <= state_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((plaintext_1_load_B == 1'b1)) begin
        plaintext_1_payload_B <= state_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_365_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        tmp_19_reg_413 <= tmp_19_fu_380_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_reg_391 <= tmp_fu_339_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_AddRoundKey_fu_295_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
        tmp_s_reg_400 <= tmp_s_fu_359_p2;
    end
end

always @ (*) begin
    if ((tmp_fu_339_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state30) & (plaintext_1_ack_in == 1'b1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_reg_391 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_i_phi_fu_276_p4 = i_3_reg_395;
    end else begin
        ap_phi_mux_i_phi_fu_276_p4 = i_reg_272;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state30) & (plaintext_1_ack_in == 1'b1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_reg_391 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ciphertext_0_ack_out = 1'b1;
    end else begin
        ciphertext_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((ciphertext_0_sel == 1'b1)) begin
        ciphertext_0_data_out = ciphertext_0_payload_B;
    end else begin
        ciphertext_0_data_out = ciphertext_0_payload_A;
    end
end

always @ (*) begin
    if (((tmp_reg_391 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ciphertext_TDATA_blk_n = ciphertext_0_state[1'd0];
    end else begin
        ciphertext_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((expandedKey_0_sel == 1'b1)) begin
        expandedKey_0_data_out = expandedKey_0_payload_B;
    end else begin
        expandedKey_0_data_out = expandedKey_0_payload_A;
    end
end

always @ (*) begin
    if ((plaintext_1_sel == 1'b1)) begin
        plaintext_1_data_out = plaintext_1_payload_B;
    end else begin
        plaintext_1_data_out = plaintext_1_payload_A;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state29) & (plaintext_1_ack_in == 1'b1)) | ((1'b1 == ap_CS_fsm_state28) & (plaintext_1_ack_in == 1'b1)) | ((1'b1 == ap_CS_fsm_state27) & (plaintext_1_ack_in == 1'b1)) | ((1'b1 == ap_CS_fsm_state26) & (plaintext_1_ack_in == 1'b1)) | ((1'b1 == ap_CS_fsm_state25) & (plaintext_1_ack_in == 1'b1)) | ((1'b1 == ap_CS_fsm_state24) & (plaintext_1_ack_in == 1'b1)) | ((1'b1 == ap_CS_fsm_state23) & (plaintext_1_ack_in == 1'b1)) | ((1'b1 == ap_CS_fsm_state22) & (plaintext_1_ack_in == 1'b1)) | ((1'b1 == ap_CS_fsm_state21) & (plaintext_1_ack_in == 1'b1)) | ((1'b1 == ap_CS_fsm_state20) & (plaintext_1_ack_in == 1'b1)) | ((1'b1 == ap_CS_fsm_state19) & (plaintext_1_ack_in == 1'b1)) | ((1'b1 == ap_CS_fsm_state18) & (plaintext_1_ack_in == 1'b1)) | ((1'b1 == ap_CS_fsm_state17) & (plaintext_1_ack_in == 1'b1)) | ((1'b1 == ap_CS_fsm_state16) & (plaintext_1_ack_in == 1'b1)) | ((1'b1 == ap_CS_fsm_state15) & (plaintext_1_ack_in == 1'b1)) | ((1'b1 == ap_CS_fsm_state14) & (plaintext_1_ack_in == 1'b1)))) begin
        plaintext_1_vld_in = 1'b1;
    end else begin
        plaintext_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14))) begin
        plaintext_TDATA_blk_n = plaintext_1_state[1'd1];
    end else begin
        plaintext_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        state_address0 = 64'd15;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        state_address0 = 64'd14;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        state_address0 = 64'd13;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        state_address0 = 64'd12;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        state_address0 = 64'd11;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        state_address0 = 64'd10;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        state_address0 = 64'd9;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        state_address0 = 64'd8;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        state_address0 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        state_address0 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        state_address0 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        state_address0 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        state_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        state_address0 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        state_address0 = 64'd1;
    end else if (((exitcond_fu_365_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        state_address0 = 64'd0;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        state_address0 = tmp_18_fu_351_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        state_address0 = grp_InvShiftRows_fu_329_state_address0;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        state_address0 = grp_InvSubBytes_fu_322_state_address0;
    end else if (((tmp_19_reg_413 == 1'd0) & (1'b1 == ap_CS_fsm_state13))) begin
        state_address0 = grp_InvMixColumns_fu_315_state_address0;
    end else if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state5))) begin
        state_address0 = grp_AddRoundKey_fu_295_state_address0;
    end else begin
        state_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        state_address1 = grp_InvShiftRows_fu_329_state_address1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        state_address1 = grp_InvSubBytes_fu_322_state_address1;
    end else if (((tmp_19_reg_413 == 1'd0) & (1'b1 == ap_CS_fsm_state13))) begin
        state_address1 = grp_InvMixColumns_fu_315_state_address1;
    end else if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state5))) begin
        state_address1 = grp_AddRoundKey_fu_295_state_address1;
    end else begin
        state_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((exitcond_fu_365_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6)) | ((1'b1 == ap_CS_fsm_state28) & (plaintext_1_ack_in == 1'b1)) | ((1'b1 == ap_CS_fsm_state27) & (plaintext_1_ack_in == 1'b1)) | ((1'b1 == ap_CS_fsm_state26) & (plaintext_1_ack_in == 1'b1)) | ((1'b1 == ap_CS_fsm_state25) & (plaintext_1_ack_in == 1'b1)) | ((1'b1 == ap_CS_fsm_state24) & (plaintext_1_ack_in == 1'b1)) | ((1'b1 == ap_CS_fsm_state23) & (plaintext_1_ack_in == 1'b1)) | ((1'b1 == ap_CS_fsm_state22) & (plaintext_1_ack_in == 1'b1)) | ((1'b1 == ap_CS_fsm_state21) & (plaintext_1_ack_in == 1'b1)) | ((1'b1 == ap_CS_fsm_state20) & (plaintext_1_ack_in == 1'b1)) | ((1'b1 == ap_CS_fsm_state19) & (plaintext_1_ack_in == 1'b1)) | ((1'b1 == ap_CS_fsm_state18) & (plaintext_1_ack_in == 1'b1)) | ((1'b1 == ap_CS_fsm_state17) & (plaintext_1_ack_in == 1'b1)) | ((1'b1 == ap_CS_fsm_state16) & (plaintext_1_ack_in == 1'b1)) | ((1'b1 == ap_CS_fsm_state15) & (plaintext_1_ack_in == 1'b1)) | ((1'b1 == ap_CS_fsm_state14) & (plaintext_1_ack_in == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        state_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        state_ce0 = grp_InvShiftRows_fu_329_state_ce0;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        state_ce0 = grp_InvSubBytes_fu_322_state_ce0;
    end else if (((tmp_19_reg_413 == 1'd0) & (1'b1 == ap_CS_fsm_state13))) begin
        state_ce0 = grp_InvMixColumns_fu_315_state_ce0;
    end else if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state5))) begin
        state_ce0 = grp_AddRoundKey_fu_295_state_ce0;
    end else begin
        state_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        state_ce1 = grp_InvShiftRows_fu_329_state_ce1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        state_ce1 = grp_InvSubBytes_fu_322_state_ce1;
    end else if (((tmp_19_reg_413 == 1'd0) & (1'b1 == ap_CS_fsm_state13))) begin
        state_ce1 = grp_InvMixColumns_fu_315_state_ce1;
    end else if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state5))) begin
        state_ce1 = grp_AddRoundKey_fu_295_state_ce1;
    end else begin
        state_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        state_d0 = ciphertext_0_data_out;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        state_d0 = grp_InvShiftRows_fu_329_state_d0;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        state_d0 = grp_InvSubBytes_fu_322_state_d0;
    end else if (((tmp_19_reg_413 == 1'd0) & (1'b1 == ap_CS_fsm_state13))) begin
        state_d0 = grp_InvMixColumns_fu_315_state_d0;
    end else if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state5))) begin
        state_d0 = grp_AddRoundKey_fu_295_state_d0;
    end else begin
        state_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        state_d1 = grp_InvSubBytes_fu_322_state_d1;
    end else if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state5))) begin
        state_d1 = grp_AddRoundKey_fu_295_state_d1;
    end else begin
        state_d1 = 'bx;
    end
end

always @ (*) begin
    if (((tmp_reg_391 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        state_we0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        state_we0 = grp_InvShiftRows_fu_329_state_we0;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        state_we0 = grp_InvSubBytes_fu_322_state_we0;
    end else if (((tmp_19_reg_413 == 1'd0) & (1'b1 == ap_CS_fsm_state13))) begin
        state_we0 = grp_InvMixColumns_fu_315_state_we0;
    end else if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state5))) begin
        state_we0 = grp_AddRoundKey_fu_295_state_we0;
    end else begin
        state_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        state_we1 = grp_InvSubBytes_fu_322_state_we1;
    end else if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state5))) begin
        state_we1 = grp_AddRoundKey_fu_295_state_we1;
    end else begin
        state_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((tmp_fu_339_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((tmp_fu_339_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if (((grp_AddRoundKey_fu_295_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((exitcond_fu_365_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((grp_InvShiftRows_fu_329_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            if (((grp_InvSubBytes_fu_322_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state9))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            if (((tmp_19_reg_413 == 1'd1) & (grp_AddRoundKey_fu_295_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state11))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else if (((tmp_19_reg_413 == 1'd0) & (grp_AddRoundKey_fu_295_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state11))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            if (((1'b0 == ap_block_state13_on_subcall_done) & (1'b1 == ap_CS_fsm_state13))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state14 : begin
            if (((1'b1 == ap_CS_fsm_state14) & (plaintext_1_ack_in == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state15 : begin
            if (((1'b1 == ap_CS_fsm_state15) & (plaintext_1_ack_in == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end
        end
        ap_ST_fsm_state16 : begin
            if (((1'b1 == ap_CS_fsm_state16) & (plaintext_1_ack_in == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        ap_ST_fsm_state17 : begin
            if (((1'b1 == ap_CS_fsm_state17) & (plaintext_1_ack_in == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end
        end
        ap_ST_fsm_state18 : begin
            if (((1'b1 == ap_CS_fsm_state18) & (plaintext_1_ack_in == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end
        end
        ap_ST_fsm_state19 : begin
            if (((1'b1 == ap_CS_fsm_state19) & (plaintext_1_ack_in == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end
        end
        ap_ST_fsm_state20 : begin
            if (((1'b1 == ap_CS_fsm_state20) & (plaintext_1_ack_in == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end
        end
        ap_ST_fsm_state21 : begin
            if (((1'b1 == ap_CS_fsm_state21) & (plaintext_1_ack_in == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end
        end
        ap_ST_fsm_state22 : begin
            if (((1'b1 == ap_CS_fsm_state22) & (plaintext_1_ack_in == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end
        end
        ap_ST_fsm_state23 : begin
            if (((1'b1 == ap_CS_fsm_state23) & (plaintext_1_ack_in == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end
        end
        ap_ST_fsm_state24 : begin
            if (((1'b1 == ap_CS_fsm_state24) & (plaintext_1_ack_in == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end
        end
        ap_ST_fsm_state25 : begin
            if (((1'b1 == ap_CS_fsm_state25) & (plaintext_1_ack_in == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end
        end
        ap_ST_fsm_state26 : begin
            if (((1'b1 == ap_CS_fsm_state26) & (plaintext_1_ack_in == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end
        end
        ap_ST_fsm_state27 : begin
            if (((1'b1 == ap_CS_fsm_state27) & (plaintext_1_ack_in == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end
        end
        ap_ST_fsm_state28 : begin
            if (((1'b1 == ap_CS_fsm_state28) & (plaintext_1_ack_in == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end
        end
        ap_ST_fsm_state29 : begin
            if (((1'b1 == ap_CS_fsm_state29) & (plaintext_1_ack_in == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end
        end
        ap_ST_fsm_state30 : begin
            if (((1'b1 == ap_CS_fsm_state30) & (plaintext_1_ack_in == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd7];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((tmp_reg_391 == 1'd0) & (ciphertext_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((tmp_reg_391 == 1'd0) & (ciphertext_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_state13_on_subcall_done = ((tmp_19_reg_413 == 1'd0) & (grp_InvMixColumns_fu_315_ap_done == 1'b0));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = ((tmp_reg_391 == 1'd0) & (ciphertext_0_vld_out == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign ciphertext_0_ack_in = ciphertext_0_state[1'd1];

assign ciphertext_0_load_A = (~ciphertext_0_sel_wr & ciphertext_0_state_cmp_full);

assign ciphertext_0_load_B = (ciphertext_0_state_cmp_full & ciphertext_0_sel_wr);

assign ciphertext_0_sel = ciphertext_0_sel_rd;

assign ciphertext_0_state_cmp_full = ((ciphertext_0_state != 2'd1) ? 1'b1 : 1'b0);

assign ciphertext_0_vld_in = ciphertext_TVALID;

assign ciphertext_0_vld_out = ciphertext_0_state[1'd0];

assign ciphertext_TREADY = ciphertext_0_state[1'd1];

assign exitcond_fu_365_p2 = ((i1_reg_284 == Nr) ? 1'b1 : 1'b0);

assign expandedKey_0_ack_in = expandedKey_0_state[1'd1];

assign expandedKey_0_ack_out = grp_AddRoundKey_fu_295_roundKey_TREADY;

assign expandedKey_0_load_A = (~expandedKey_0_sel_wr & expandedKey_0_state_cmp_full);

assign expandedKey_0_load_B = (expandedKey_0_state_cmp_full & expandedKey_0_sel_wr);

assign expandedKey_0_sel = expandedKey_0_sel_rd;

assign expandedKey_0_state_cmp_full = ((expandedKey_0_state != 2'd1) ? 1'b1 : 1'b0);

assign expandedKey_0_vld_in = expandedKey_TVALID;

assign expandedKey_0_vld_out = expandedKey_0_state[1'd0];

assign expandedKey_TREADY = expandedKey_0_state[1'd1];

assign grp_AddRoundKey_fu_295_ap_start = ap_reg_grp_AddRoundKey_fu_295_ap_start;

assign grp_AddRoundKey_fu_295_roundKey_TVALID = expandedKey_0_state[1'd0];

assign grp_InvMixColumns_fu_315_ap_start = ap_reg_grp_InvMixColumns_fu_315_ap_start;

assign grp_InvShiftRows_fu_329_ap_start = ap_reg_grp_InvShiftRows_fu_329_ap_start;

assign grp_InvSubBytes_fu_322_ap_start = ap_reg_grp_InvSubBytes_fu_322_ap_start;

assign i_3_fu_345_p2 = (ap_phi_mux_i_phi_fu_276_p4 + 5'd1);

assign i_4_fu_370_p2 = (i1_reg_284 + 16'd1);

assign plaintext_1_ack_in = plaintext_1_state[1'd1];

assign plaintext_1_ack_out = plaintext_TREADY;

assign plaintext_1_load_A = (plaintext_1_state_cmp_full & ~plaintext_1_sel_wr);

assign plaintext_1_load_B = (plaintext_1_state_cmp_full & plaintext_1_sel_wr);

assign plaintext_1_sel = plaintext_1_sel_rd;

assign plaintext_1_state_cmp_full = ((plaintext_1_state != 2'd1) ? 1'b1 : 1'b0);

assign plaintext_1_vld_out = plaintext_1_state[1'd0];

assign plaintext_TDATA = plaintext_1_data_out;

assign plaintext_TVALID = plaintext_1_state[1'd0];

assign tmp_18_fu_351_p1 = i_reg_272;

assign tmp_19_fu_380_p2 = ((tmp_67_cast_fu_376_p1 == tmp_s_reg_400) ? 1'b1 : 1'b0);

assign tmp_67_cast_fu_376_p1 = i1_reg_284;

assign tmp_cast_fu_356_p1 = Nr;

assign tmp_fu_339_p2 = ((ap_phi_mux_i_phi_fu_276_p4 == 5'd16) ? 1'b1 : 1'b0);

assign tmp_s_fu_359_p2 = ($signed(tmp_cast_fu_356_p1) + $signed(17'd131071));

endmodule //AES_Decrypt
