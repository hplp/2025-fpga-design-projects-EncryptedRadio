

================================================================
== Vivado HLS Report for 'AddRoundKey'
================================================================
* Date:           Wed Feb  7 17:52:09 2018

* Version:        2017.4 (Build 2086221 on Fri Dec 15 21:13:33 MST 2017)
* Project:        inverse_cipher
* Solution:       aes_inverse_cipher
* Product family: zynq
* Target device:  xc7z020clg400-1


================================================================
== Performance Estimates
================================================================
+ Timing (ns): 
    * Summary: 
    +--------+-------+----------+------------+
    |  Clock | Target| Estimated| Uncertainty|
    +--------+-------+----------+------------+
    |ap_clk  |  10.00|      3.42|        0.00|
    +--------+-------+----------+------------+

+ Latency (clock cycles): 
    * Summary: 
    +-----+-----+-----+-----+---------+
    |  Latency  |  Interval | Pipeline|
    | min | max | min | max |   Type  |
    +-----+-----+-----+-----+---------+
    |   15|   15|   15|   15|   none  |
    +-----+-----+-----+-----+---------+

    + Detail: 
        * Instance: 
        N/A

        * Loop: 
        N/A

============================================================
+ Verbose Summary: Synthesis Manager
============================================================
InlineROM: 1
ExposeGlobal: 0
============================================================
+ Verbose Summary: CDFG Model
============================================================
IsTopModel: 0
ResetActiveHigh: 1
IsCombinational: 0
IsDatapathOnly: 0
HasWiredReturn: 1
HasMFsm: 0
HasVarLatency: 1
IsPipeline: 0
IsRtlPipelined: 0
IsInstanceOverlapped: 0
IsDontTouch: 0
HasImplIP: 0
IsGatedGlobalClock: 0


============================================================
+ Verbose Summary: Schedule
============================================================
* Number of FSM states : 16
* Pipeline : 0
* Dataflow Pipeline: 0

* FSM state transitions: 
1 --> 
	2  / true
2 --> 
	3  / true
3 --> 
	4  / true
4 --> 
	5  / true
5 --> 
	6  / true
6 --> 
	7  / true
7 --> 
	8  / true
8 --> 
	9  / true
9 --> 
	10  / true
10 --> 
	11  / true
11 --> 
	12  / true
12 --> 
	13  / true
13 --> 
	14  / true
14 --> 
	15  / true
15 --> 
	16  / true
16 --> 

* FSM state operations: 

 <State 1> : 2.32ns
ST_1 : Operation 17 [1/1] (0.00ns)   --->   "%roundKey_read = call i8 @_ssdm_op_Read.axis.volatile.i8P(i8* %roundKey)" [source/AESfunctions.cpp:148]   --->   Core 5 'AXI4Stream' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : >
ST_1 : Operation 18 [1/1] (0.00ns)   --->   "%state_addr = getelementptr [16 x i8]* %state, i64 0, i64 0" [source/AESfunctions.cpp:148]
ST_1 : Operation 19 [2/2] (2.32ns)   --->   "%state_load = load i8* %state_addr, align 1" [source/AESfunctions.cpp:148]   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 2.32> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 8> <Depth = 16> <RAM>
ST_1 : Operation 20 [1/1] (0.00ns)   --->   "%state_addr_48 = getelementptr [16 x i8]* %state, i64 0, i64 1" [source/AESfunctions.cpp:148]
ST_1 : Operation 21 [2/2] (2.32ns)   --->   "%state_load_1 = load i8* %state_addr_48, align 1" [source/AESfunctions.cpp:148]   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 2.32> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 8> <Depth = 16> <RAM>

 <State 2> : 3.42ns
ST_2 : Operation 22 [1/2] (2.32ns)   --->   "%state_load = load i8* %state_addr, align 1" [source/AESfunctions.cpp:148]   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 2.32> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 8> <Depth = 16> <RAM>
ST_2 : Operation 23 [1/1] (1.09ns)   --->   "%tmp_s = xor i8 %state_load, %roundKey_read" [source/AESfunctions.cpp:148]   --->   Core 27 'LogicGate' <Latency = 0> <II = 1> <Delay = 1.09> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 24 [1/1] (0.00ns)   --->   "%roundKey_read_1 = call i8 @_ssdm_op_Read.axis.volatile.i8P(i8* %roundKey)" [source/AESfunctions.cpp:148]   --->   Core 5 'AXI4Stream' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : >
ST_2 : Operation 25 [1/2] (2.32ns)   --->   "%state_load_1 = load i8* %state_addr_48, align 1" [source/AESfunctions.cpp:148]   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 2.32> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 8> <Depth = 16> <RAM>
ST_2 : Operation 26 [1/1] (1.09ns)   --->   "%tmp_65_1 = xor i8 %state_load_1, %roundKey_read_1" [source/AESfunctions.cpp:148]   --->   Core 27 'LogicGate' <Latency = 0> <II = 1> <Delay = 1.09> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 27 [1/1] (0.00ns)   --->   "%state_addr_49 = getelementptr [16 x i8]* %state, i64 0, i64 2" [source/AESfunctions.cpp:148]
ST_2 : Operation 28 [2/2] (2.32ns)   --->   "%state_load_2 = load i8* %state_addr_49, align 1" [source/AESfunctions.cpp:148]   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 2.32> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 8> <Depth = 16> <RAM>
ST_2 : Operation 29 [1/1] (0.00ns)   --->   "%state_addr_50 = getelementptr [16 x i8]* %state, i64 0, i64 3" [source/AESfunctions.cpp:148]
ST_2 : Operation 30 [2/2] (2.32ns)   --->   "%state_load_3 = load i8* %state_addr_50, align 1" [source/AESfunctions.cpp:148]   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 2.32> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 8> <Depth = 16> <RAM>

 <State 3> : 3.42ns
ST_3 : Operation 31 [1/1] (0.00ns)   --->   "%roundKey_read_2 = call i8 @_ssdm_op_Read.axis.volatile.i8P(i8* %roundKey)" [source/AESfunctions.cpp:148]   --->   Core 5 'AXI4Stream' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : >
ST_3 : Operation 32 [1/2] (2.32ns)   --->   "%state_load_2 = load i8* %state_addr_49, align 1" [source/AESfunctions.cpp:148]   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 2.32> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 8> <Depth = 16> <RAM>
ST_3 : Operation 33 [1/1] (1.09ns)   --->   "%tmp_65_2 = xor i8 %state_load_2, %roundKey_read_2" [source/AESfunctions.cpp:148]   --->   Core 27 'LogicGate' <Latency = 0> <II = 1> <Delay = 1.09> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 34 [1/2] (2.32ns)   --->   "%state_load_3 = load i8* %state_addr_50, align 1" [source/AESfunctions.cpp:148]   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 2.32> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 8> <Depth = 16> <RAM>
ST_3 : Operation 35 [1/1] (0.00ns)   --->   "%state_addr_51 = getelementptr [16 x i8]* %state, i64 0, i64 4" [source/AESfunctions.cpp:148]
ST_3 : Operation 36 [2/2] (2.32ns)   --->   "%state_load_4 = load i8* %state_addr_51, align 1" [source/AESfunctions.cpp:148]   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 2.32> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 8> <Depth = 16> <RAM>
ST_3 : Operation 37 [1/1] (0.00ns)   --->   "%state_addr_52 = getelementptr [16 x i8]* %state, i64 0, i64 5" [source/AESfunctions.cpp:148]
ST_3 : Operation 38 [2/2] (2.32ns)   --->   "%state_load_5 = load i8* %state_addr_52, align 1" [source/AESfunctions.cpp:148]   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 2.32> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 8> <Depth = 16> <RAM>

 <State 4> : 2.32ns
ST_4 : Operation 39 [1/1] (0.00ns)   --->   "%roundKey_read_3 = call i8 @_ssdm_op_Read.axis.volatile.i8P(i8* %roundKey)" [source/AESfunctions.cpp:148]   --->   Core 5 'AXI4Stream' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : >
ST_4 : Operation 40 [1/1] (1.09ns)   --->   "%tmp_65_3 = xor i8 %state_load_3, %roundKey_read_3" [source/AESfunctions.cpp:148]   --->   Core 27 'LogicGate' <Latency = 0> <II = 1> <Delay = 1.09> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_4 : Operation 41 [1/2] (2.32ns)   --->   "%state_load_4 = load i8* %state_addr_51, align 1" [source/AESfunctions.cpp:148]   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 2.32> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 8> <Depth = 16> <RAM>
ST_4 : Operation 42 [1/2] (2.32ns)   --->   "%state_load_5 = load i8* %state_addr_52, align 1" [source/AESfunctions.cpp:148]   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 2.32> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 8> <Depth = 16> <RAM>
ST_4 : Operation 43 [1/1] (0.00ns)   --->   "%state_addr_53 = getelementptr [16 x i8]* %state, i64 0, i64 6" [source/AESfunctions.cpp:148]
ST_4 : Operation 44 [2/2] (2.32ns)   --->   "%state_load_6 = load i8* %state_addr_53, align 1" [source/AESfunctions.cpp:148]   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 2.32> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 8> <Depth = 16> <RAM>
ST_4 : Operation 45 [1/1] (0.00ns)   --->   "%state_addr_54 = getelementptr [16 x i8]* %state, i64 0, i64 7" [source/AESfunctions.cpp:148]
ST_4 : Operation 46 [2/2] (2.32ns)   --->   "%state_load_7 = load i8* %state_addr_54, align 1" [source/AESfunctions.cpp:148]   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 2.32> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 8> <Depth = 16> <RAM>

 <State 5> : 2.32ns
ST_5 : Operation 47 [1/1] (0.00ns)   --->   "%roundKey_read_4 = call i8 @_ssdm_op_Read.axis.volatile.i8P(i8* %roundKey)" [source/AESfunctions.cpp:148]   --->   Core 5 'AXI4Stream' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : >
ST_5 : Operation 48 [1/1] (1.09ns)   --->   "%tmp_65_4 = xor i8 %state_load_4, %roundKey_read_4" [source/AESfunctions.cpp:148]   --->   Core 27 'LogicGate' <Latency = 0> <II = 1> <Delay = 1.09> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_5 : Operation 49 [1/2] (2.32ns)   --->   "%state_load_6 = load i8* %state_addr_53, align 1" [source/AESfunctions.cpp:148]   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 2.32> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 8> <Depth = 16> <RAM>
ST_5 : Operation 50 [1/2] (2.32ns)   --->   "%state_load_7 = load i8* %state_addr_54, align 1" [source/AESfunctions.cpp:148]   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 2.32> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 8> <Depth = 16> <RAM>
ST_5 : Operation 51 [1/1] (0.00ns)   --->   "%state_addr_55 = getelementptr [16 x i8]* %state, i64 0, i64 8" [source/AESfunctions.cpp:148]
ST_5 : Operation 52 [2/2] (2.32ns)   --->   "%state_load_8 = load i8* %state_addr_55, align 1" [source/AESfunctions.cpp:148]   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 2.32> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 8> <Depth = 16> <RAM>
ST_5 : Operation 53 [1/1] (0.00ns)   --->   "%state_addr_56 = getelementptr [16 x i8]* %state, i64 0, i64 9" [source/AESfunctions.cpp:148]
ST_5 : Operation 54 [2/2] (2.32ns)   --->   "%state_load_9 = load i8* %state_addr_56, align 1" [source/AESfunctions.cpp:148]   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 2.32> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 8> <Depth = 16> <RAM>

 <State 6> : 2.32ns
ST_6 : Operation 55 [1/1] (0.00ns)   --->   "%roundKey_read_5 = call i8 @_ssdm_op_Read.axis.volatile.i8P(i8* %roundKey)" [source/AESfunctions.cpp:148]   --->   Core 5 'AXI4Stream' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : >
ST_6 : Operation 56 [1/1] (1.09ns)   --->   "%tmp_65_5 = xor i8 %state_load_5, %roundKey_read_5" [source/AESfunctions.cpp:148]   --->   Core 27 'LogicGate' <Latency = 0> <II = 1> <Delay = 1.09> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_6 : Operation 57 [1/2] (2.32ns)   --->   "%state_load_8 = load i8* %state_addr_55, align 1" [source/AESfunctions.cpp:148]   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 2.32> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 8> <Depth = 16> <RAM>
ST_6 : Operation 58 [1/2] (2.32ns)   --->   "%state_load_9 = load i8* %state_addr_56, align 1" [source/AESfunctions.cpp:148]   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 2.32> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 8> <Depth = 16> <RAM>
ST_6 : Operation 59 [1/1] (0.00ns)   --->   "%state_addr_57 = getelementptr [16 x i8]* %state, i64 0, i64 10" [source/AESfunctions.cpp:148]
ST_6 : Operation 60 [2/2] (2.32ns)   --->   "%state_load_10 = load i8* %state_addr_57, align 1" [source/AESfunctions.cpp:148]   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 2.32> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 8> <Depth = 16> <RAM>
ST_6 : Operation 61 [1/1] (0.00ns)   --->   "%state_addr_58 = getelementptr [16 x i8]* %state, i64 0, i64 11" [source/AESfunctions.cpp:148]
ST_6 : Operation 62 [2/2] (2.32ns)   --->   "%state_load_11 = load i8* %state_addr_58, align 1" [source/AESfunctions.cpp:148]   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 2.32> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 8> <Depth = 16> <RAM>

 <State 7> : 2.32ns
ST_7 : Operation 63 [1/1] (0.00ns)   --->   "%roundKey_read_6 = call i8 @_ssdm_op_Read.axis.volatile.i8P(i8* %roundKey)" [source/AESfunctions.cpp:148]   --->   Core 5 'AXI4Stream' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : >
ST_7 : Operation 64 [1/1] (1.09ns)   --->   "%tmp_65_6 = xor i8 %state_load_6, %roundKey_read_6" [source/AESfunctions.cpp:148]   --->   Core 27 'LogicGate' <Latency = 0> <II = 1> <Delay = 1.09> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_7 : Operation 65 [1/2] (2.32ns)   --->   "%state_load_10 = load i8* %state_addr_57, align 1" [source/AESfunctions.cpp:148]   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 2.32> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 8> <Depth = 16> <RAM>
ST_7 : Operation 66 [1/2] (2.32ns)   --->   "%state_load_11 = load i8* %state_addr_58, align 1" [source/AESfunctions.cpp:148]   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 2.32> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 8> <Depth = 16> <RAM>
ST_7 : Operation 67 [1/1] (0.00ns)   --->   "%state_addr_59 = getelementptr [16 x i8]* %state, i64 0, i64 12" [source/AESfunctions.cpp:148]
ST_7 : Operation 68 [2/2] (2.32ns)   --->   "%state_load_12 = load i8* %state_addr_59, align 1" [source/AESfunctions.cpp:148]   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 2.32> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 8> <Depth = 16> <RAM>
ST_7 : Operation 69 [1/1] (0.00ns)   --->   "%state_addr_60 = getelementptr [16 x i8]* %state, i64 0, i64 13" [source/AESfunctions.cpp:148]
ST_7 : Operation 70 [2/2] (2.32ns)   --->   "%state_load_13 = load i8* %state_addr_60, align 1" [source/AESfunctions.cpp:148]   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 2.32> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 8> <Depth = 16> <RAM>

 <State 8> : 2.32ns
ST_8 : Operation 71 [1/1] (0.00ns)   --->   "%roundKey_read_7 = call i8 @_ssdm_op_Read.axis.volatile.i8P(i8* %roundKey)" [source/AESfunctions.cpp:148]   --->   Core 5 'AXI4Stream' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : >
ST_8 : Operation 72 [1/1] (1.09ns)   --->   "%tmp_65_7 = xor i8 %state_load_7, %roundKey_read_7" [source/AESfunctions.cpp:148]   --->   Core 27 'LogicGate' <Latency = 0> <II = 1> <Delay = 1.09> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_8 : Operation 73 [1/2] (2.32ns)   --->   "%state_load_12 = load i8* %state_addr_59, align 1" [source/AESfunctions.cpp:148]   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 2.32> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 8> <Depth = 16> <RAM>
ST_8 : Operation 74 [1/2] (2.32ns)   --->   "%state_load_13 = load i8* %state_addr_60, align 1" [source/AESfunctions.cpp:148]   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 2.32> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 8> <Depth = 16> <RAM>
ST_8 : Operation 75 [1/1] (0.00ns)   --->   "%state_addr_61 = getelementptr [16 x i8]* %state, i64 0, i64 14" [source/AESfunctions.cpp:148]
ST_8 : Operation 76 [2/2] (2.32ns)   --->   "%state_load_14 = load i8* %state_addr_61, align 1" [source/AESfunctions.cpp:148]   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 2.32> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 8> <Depth = 16> <RAM>
ST_8 : Operation 77 [1/1] (0.00ns)   --->   "%state_addr_62 = getelementptr [16 x i8]* %state, i64 0, i64 15" [source/AESfunctions.cpp:148]
ST_8 : Operation 78 [2/2] (2.32ns)   --->   "%state_load_15 = load i8* %state_addr_62, align 1" [source/AESfunctions.cpp:148]   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 2.32> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 8> <Depth = 16> <RAM>

 <State 9> : 2.32ns
ST_9 : Operation 79 [1/1] (2.32ns)   --->   "store i8 %tmp_s, i8* %state_addr, align 1" [source/AESfunctions.cpp:148]   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 2.32> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 8> <Depth = 16> <RAM>
ST_9 : Operation 80 [1/1] (2.32ns)   --->   "store i8 %tmp_65_1, i8* %state_addr_48, align 1" [source/AESfunctions.cpp:148]   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 2.32> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 8> <Depth = 16> <RAM>
ST_9 : Operation 81 [1/1] (0.00ns)   --->   "%roundKey_read_8 = call i8 @_ssdm_op_Read.axis.volatile.i8P(i8* %roundKey)" [source/AESfunctions.cpp:148]   --->   Core 5 'AXI4Stream' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : >
ST_9 : Operation 82 [1/1] (1.09ns)   --->   "%tmp_65_8 = xor i8 %state_load_8, %roundKey_read_8" [source/AESfunctions.cpp:148]   --->   Core 27 'LogicGate' <Latency = 0> <II = 1> <Delay = 1.09> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_9 : Operation 83 [1/2] (2.32ns)   --->   "%state_load_14 = load i8* %state_addr_61, align 1" [source/AESfunctions.cpp:148]   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 2.32> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 8> <Depth = 16> <RAM>
ST_9 : Operation 84 [1/2] (2.32ns)   --->   "%state_load_15 = load i8* %state_addr_62, align 1" [source/AESfunctions.cpp:148]   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 2.32> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 8> <Depth = 16> <RAM>

 <State 10> : 2.32ns
ST_10 : Operation 85 [1/1] (2.32ns)   --->   "store i8 %tmp_65_2, i8* %state_addr_49, align 1" [source/AESfunctions.cpp:148]   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 2.32> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 8> <Depth = 16> <RAM>
ST_10 : Operation 86 [1/1] (2.32ns)   --->   "store i8 %tmp_65_3, i8* %state_addr_50, align 1" [source/AESfunctions.cpp:148]   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 2.32> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 8> <Depth = 16> <RAM>
ST_10 : Operation 87 [1/1] (0.00ns)   --->   "%roundKey_read_9 = call i8 @_ssdm_op_Read.axis.volatile.i8P(i8* %roundKey)" [source/AESfunctions.cpp:148]   --->   Core 5 'AXI4Stream' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : >
ST_10 : Operation 88 [1/1] (1.09ns)   --->   "%tmp_65_9 = xor i8 %state_load_9, %roundKey_read_9" [source/AESfunctions.cpp:148]   --->   Core 27 'LogicGate' <Latency = 0> <II = 1> <Delay = 1.09> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>

 <State 11> : 2.32ns
ST_11 : Operation 89 [1/1] (2.32ns)   --->   "store i8 %tmp_65_4, i8* %state_addr_51, align 1" [source/AESfunctions.cpp:148]   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 2.32> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 8> <Depth = 16> <RAM>
ST_11 : Operation 90 [1/1] (2.32ns)   --->   "store i8 %tmp_65_5, i8* %state_addr_52, align 1" [source/AESfunctions.cpp:148]   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 2.32> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 8> <Depth = 16> <RAM>
ST_11 : Operation 91 [1/1] (0.00ns)   --->   "%roundKey_read_10 = call i8 @_ssdm_op_Read.axis.volatile.i8P(i8* %roundKey)" [source/AESfunctions.cpp:148]   --->   Core 5 'AXI4Stream' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : >
ST_11 : Operation 92 [1/1] (1.09ns)   --->   "%tmp_65_s = xor i8 %state_load_10, %roundKey_read_10" [source/AESfunctions.cpp:148]   --->   Core 27 'LogicGate' <Latency = 0> <II = 1> <Delay = 1.09> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>

 <State 12> : 2.32ns
ST_12 : Operation 93 [1/1] (2.32ns)   --->   "store i8 %tmp_65_6, i8* %state_addr_53, align 1" [source/AESfunctions.cpp:148]   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 2.32> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 8> <Depth = 16> <RAM>
ST_12 : Operation 94 [1/1] (2.32ns)   --->   "store i8 %tmp_65_7, i8* %state_addr_54, align 1" [source/AESfunctions.cpp:148]   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 2.32> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 8> <Depth = 16> <RAM>
ST_12 : Operation 95 [1/1] (0.00ns)   --->   "%roundKey_read_11 = call i8 @_ssdm_op_Read.axis.volatile.i8P(i8* %roundKey)" [source/AESfunctions.cpp:148]   --->   Core 5 'AXI4Stream' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : >
ST_12 : Operation 96 [1/1] (1.09ns)   --->   "%tmp_65_10 = xor i8 %state_load_11, %roundKey_read_11" [source/AESfunctions.cpp:148]   --->   Core 27 'LogicGate' <Latency = 0> <II = 1> <Delay = 1.09> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>

 <State 13> : 2.32ns
ST_13 : Operation 97 [1/1] (2.32ns)   --->   "store i8 %tmp_65_8, i8* %state_addr_55, align 1" [source/AESfunctions.cpp:148]   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 2.32> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 8> <Depth = 16> <RAM>
ST_13 : Operation 98 [1/1] (2.32ns)   --->   "store i8 %tmp_65_9, i8* %state_addr_56, align 1" [source/AESfunctions.cpp:148]   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 2.32> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 8> <Depth = 16> <RAM>
ST_13 : Operation 99 [1/1] (0.00ns)   --->   "%roundKey_read_12 = call i8 @_ssdm_op_Read.axis.volatile.i8P(i8* %roundKey)" [source/AESfunctions.cpp:148]   --->   Core 5 'AXI4Stream' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : >
ST_13 : Operation 100 [1/1] (1.09ns)   --->   "%tmp_65_11 = xor i8 %state_load_12, %roundKey_read_12" [source/AESfunctions.cpp:148]   --->   Core 27 'LogicGate' <Latency = 0> <II = 1> <Delay = 1.09> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>

 <State 14> : 2.32ns
ST_14 : Operation 101 [1/1] (2.32ns)   --->   "store i8 %tmp_65_s, i8* %state_addr_57, align 1" [source/AESfunctions.cpp:148]   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 2.32> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 8> <Depth = 16> <RAM>
ST_14 : Operation 102 [1/1] (2.32ns)   --->   "store i8 %tmp_65_10, i8* %state_addr_58, align 1" [source/AESfunctions.cpp:148]   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 2.32> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 8> <Depth = 16> <RAM>
ST_14 : Operation 103 [1/1] (0.00ns)   --->   "%roundKey_read_13 = call i8 @_ssdm_op_Read.axis.volatile.i8P(i8* %roundKey)" [source/AESfunctions.cpp:148]   --->   Core 5 'AXI4Stream' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : >
ST_14 : Operation 104 [1/1] (1.09ns)   --->   "%tmp_65_12 = xor i8 %state_load_13, %roundKey_read_13" [source/AESfunctions.cpp:148]   --->   Core 27 'LogicGate' <Latency = 0> <II = 1> <Delay = 1.09> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>

 <State 15> : 2.32ns
ST_15 : Operation 105 [1/1] (2.32ns)   --->   "store i8 %tmp_65_11, i8* %state_addr_59, align 1" [source/AESfunctions.cpp:148]   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 2.32> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 8> <Depth = 16> <RAM>
ST_15 : Operation 106 [1/1] (2.32ns)   --->   "store i8 %tmp_65_12, i8* %state_addr_60, align 1" [source/AESfunctions.cpp:148]   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 2.32> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 8> <Depth = 16> <RAM>
ST_15 : Operation 107 [1/1] (0.00ns)   --->   "%roundKey_read_14 = call i8 @_ssdm_op_Read.axis.volatile.i8P(i8* %roundKey)" [source/AESfunctions.cpp:148]   --->   Core 5 'AXI4Stream' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : >
ST_15 : Operation 108 [1/1] (1.09ns)   --->   "%tmp_65_13 = xor i8 %state_load_14, %roundKey_read_14" [source/AESfunctions.cpp:148]   --->   Core 27 'LogicGate' <Latency = 0> <II = 1> <Delay = 1.09> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>

 <State 16> : 3.42ns
ST_16 : Operation 109 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecInterface(i8* %roundKey, [5 x i8]* @p_str4, i32 0, i32 0, [5 x i8]* @p_str5, i32 0, i32 0, [1 x i8]* @p_str, [1 x i8]* @p_str, [1 x i8]* @p_str, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @p_str, [1 x i8]* @p_str)"
ST_16 : Operation 110 [1/1] (2.32ns)   --->   "store i8 %tmp_65_13, i8* %state_addr_61, align 1" [source/AESfunctions.cpp:148]   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 2.32> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 8> <Depth = 16> <RAM>
ST_16 : Operation 111 [1/1] (0.00ns)   --->   "%roundKey_read_15 = call i8 @_ssdm_op_Read.axis.volatile.i8P(i8* %roundKey)" [source/AESfunctions.cpp:148]   --->   Core 5 'AXI4Stream' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : >
ST_16 : Operation 112 [1/1] (1.09ns)   --->   "%tmp_65_14 = xor i8 %state_load_15, %roundKey_read_15" [source/AESfunctions.cpp:148]   --->   Core 27 'LogicGate' <Latency = 0> <II = 1> <Delay = 1.09> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_16 : Operation 113 [1/1] (2.32ns)   --->   "store i8 %tmp_65_14, i8* %state_addr_62, align 1" [source/AESfunctions.cpp:148]   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 2.32> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 8> <Depth = 16> <RAM>
ST_16 : Operation 114 [1/1] (0.00ns)   --->   "ret void" [source/AESfunctions.cpp:150]


============================================================
+ Verbose Summary: Timing violations
============================================================
Target clock period: 10ns, clock uncertainty: 0ns.

 <State 1>: 2.32ns
The critical path consists of the following:
	'getelementptr' operation ('state_addr', source/AESfunctions.cpp:148) [5]  (0 ns)
	'load' operation ('state_load', source/AESfunctions.cpp:148) on array 'state' [6]  (2.32 ns)

 <State 2>: 3.42ns
The critical path consists of the following:
	'load' operation ('state_load', source/AESfunctions.cpp:148) on array 'state' [6]  (2.32 ns)
	'xor' operation ('tmp_s', source/AESfunctions.cpp:148) [7]  (1.09 ns)

 <State 3>: 3.42ns
The critical path consists of the following:
	'load' operation ('state_load_2', source/AESfunctions.cpp:148) on array 'state' [16]  (2.32 ns)
	'xor' operation ('tmp_65_2', source/AESfunctions.cpp:148) [17]  (1.09 ns)

 <State 4>: 2.32ns
The critical path consists of the following:
	'load' operation ('state_load_4', source/AESfunctions.cpp:148) on array 'state' [26]  (2.32 ns)

 <State 5>: 2.32ns
The critical path consists of the following:
	'load' operation ('state_load_6', source/AESfunctions.cpp:148) on array 'state' [36]  (2.32 ns)

 <State 6>: 2.32ns
The critical path consists of the following:
	'load' operation ('state_load_8', source/AESfunctions.cpp:148) on array 'state' [46]  (2.32 ns)

 <State 7>: 2.32ns
The critical path consists of the following:
	'load' operation ('state_load_10', source/AESfunctions.cpp:148) on array 'state' [56]  (2.32 ns)

 <State 8>: 2.32ns
The critical path consists of the following:
	'load' operation ('state_load_12', source/AESfunctions.cpp:148) on array 'state' [66]  (2.32 ns)

 <State 9>: 2.32ns
The critical path consists of the following:
	'store' operation (source/AESfunctions.cpp:148) of variable 'tmp_s', source/AESfunctions.cpp:148 on array 'state' [8]  (2.32 ns)

 <State 10>: 2.32ns
The critical path consists of the following:
	'store' operation (source/AESfunctions.cpp:148) of variable 'tmp_65_2', source/AESfunctions.cpp:148 on array 'state' [18]  (2.32 ns)

 <State 11>: 2.32ns
The critical path consists of the following:
	'store' operation (source/AESfunctions.cpp:148) of variable 'tmp_65_4', source/AESfunctions.cpp:148 on array 'state' [28]  (2.32 ns)

 <State 12>: 2.32ns
The critical path consists of the following:
	'store' operation (source/AESfunctions.cpp:148) of variable 'tmp_65_6', source/AESfunctions.cpp:148 on array 'state' [38]  (2.32 ns)

 <State 13>: 2.32ns
The critical path consists of the following:
	'store' operation (source/AESfunctions.cpp:148) of variable 'tmp_65_8', source/AESfunctions.cpp:148 on array 'state' [48]  (2.32 ns)

 <State 14>: 2.32ns
The critical path consists of the following:
	'store' operation (source/AESfunctions.cpp:148) of variable 'tmp_65_s', source/AESfunctions.cpp:148 on array 'state' [58]  (2.32 ns)

 <State 15>: 2.32ns
The critical path consists of the following:
	'store' operation (source/AESfunctions.cpp:148) of variable 'tmp_65_11', source/AESfunctions.cpp:148 on array 'state' [68]  (2.32 ns)

 <State 16>: 3.42ns
The critical path consists of the following:
	axis read on port 'roundKey' (source/AESfunctions.cpp:148) [79]  (0 ns)
	'xor' operation ('tmp_65_14', source/AESfunctions.cpp:148) [82]  (1.09 ns)
	'store' operation (source/AESfunctions.cpp:148) of variable 'tmp_65_14', source/AESfunctions.cpp:148 on array 'state' [83]  (2.32 ns)


============================================================
+ Verbose Summary: Binding
============================================================
N/A
* FSMD analyzer results:
  - Output states:
 - Input state : 
  - Chain level:
	State 1
	State 2
	State 3
	State 4
	State 5
	State 6
	State 7
	State 8
	State 9
	State 10
	State 11
	State 12
	State 13
	State 14
	State 15
	State 16


============================================================
+ Verbose Summary: Datapath Resource usage 
============================================================
N/A
