// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module InvShiftRows (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        state_address0,
        state_ce0,
        state_we0,
        state_d0,
        state_q0,
        state_address1,
        state_ce1,
        state_q1
);

parameter    ap_ST_fsm_state1 = 11'd1;
parameter    ap_ST_fsm_state2 = 11'd2;
parameter    ap_ST_fsm_state3 = 11'd4;
parameter    ap_ST_fsm_state4 = 11'd8;
parameter    ap_ST_fsm_state5 = 11'd16;
parameter    ap_ST_fsm_state6 = 11'd32;
parameter    ap_ST_fsm_state7 = 11'd64;
parameter    ap_ST_fsm_state8 = 11'd128;
parameter    ap_ST_fsm_state9 = 11'd256;
parameter    ap_ST_fsm_state10 = 11'd512;
parameter    ap_ST_fsm_state11 = 11'd1024;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] state_address0;
output   state_ce0;
output   state_we0;
output  [7:0] state_d0;
input  [7:0] state_q0;
output  [3:0] state_address1;
output   state_ce1;
input  [7:0] state_q1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[3:0] state_address0;
reg state_ce0;
reg state_we0;
reg[3:0] state_address1;
reg state_ce1;

(* fsm_encoding = "none" *) reg   [10:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state8;
wire   [4:0] i_1_fu_369_p2;
reg   [4:0] i_1_reg_463;
wire    ap_CS_fsm_state10;
wire   [63:0] tmp_4_fu_375_p1;
reg   [63:0] tmp_4_reg_468;
wire   [0:0] tmp_fu_363_p2;
reg   [3:0] tmp_state_address0;
reg    tmp_state_ce0;
reg    tmp_state_we0;
wire   [7:0] tmp_state_q0;
reg   [3:0] tmp_state_address1;
reg    tmp_state_ce1;
reg    tmp_state_we1;
reg   [4:0] i_reg_352;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state11;
reg   [10:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 11'd1;
end

InvShiftRows_tmp_bkb #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
tmp_state_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(tmp_state_address0),
    .ce0(tmp_state_ce0),
    .we0(tmp_state_we0),
    .d0(state_q0),
    .q0(tmp_state_q0),
    .address1(tmp_state_address1),
    .ce1(tmp_state_ce1),
    .we1(tmp_state_we1),
    .d1(state_q1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        i_reg_352 <= i_1_reg_463;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        i_reg_352 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        i_1_reg_463 <= i_1_fu_369_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state10) & (tmp_fu_363_p2 == 1'd0))) begin
        tmp_4_reg_468[4 : 0] <= tmp_4_fu_375_p1[4 : 0];
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state10) & (tmp_fu_363_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) & (tmp_fu_363_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        state_address0 = tmp_4_reg_468;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        state_address0 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        state_address0 = 64'd12;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        state_address0 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        state_address0 = 64'd8;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        state_address0 = 64'd14;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        state_address0 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        state_address0 = 64'd10;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        state_address0 = 64'd0;
    end else begin
        state_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        state_address1 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        state_address1 = 64'd9;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        state_address1 = 64'd15;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        state_address1 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        state_address1 = 64'd11;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        state_address1 = 64'd1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        state_address1 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        state_address1 = 64'd13;
    end else begin
        state_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state8) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        state_ce0 = 1'b1;
    end else begin
        state_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state8) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        state_ce1 = 1'b1;
    end else begin
        state_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        state_we0 = 1'b1;
    end else begin
        state_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        tmp_state_address0 = tmp_4_fu_375_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        tmp_state_address0 = 64'd14;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        tmp_state_address0 = 64'd12;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        tmp_state_address0 = 64'd10;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        tmp_state_address0 = 64'd8;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        tmp_state_address0 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        tmp_state_address0 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        tmp_state_address0 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        tmp_state_address0 = 64'd0;
    end else begin
        tmp_state_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        tmp_state_address1 = 64'd15;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        tmp_state_address1 = 64'd13;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        tmp_state_address1 = 64'd11;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        tmp_state_address1 = 64'd9;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        tmp_state_address1 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        tmp_state_address1 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        tmp_state_address1 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        tmp_state_address1 = 64'd1;
    end else begin
        tmp_state_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state8))) begin
        tmp_state_ce0 = 1'b1;
    end else begin
        tmp_state_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8))) begin
        tmp_state_ce1 = 1'b1;
    end else begin
        tmp_state_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8))) begin
        tmp_state_we0 = 1'b1;
    end else begin
        tmp_state_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8))) begin
        tmp_state_we1 = 1'b1;
    end else begin
        tmp_state_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            if (((1'b1 == ap_CS_fsm_state10) & (tmp_fu_363_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign i_1_fu_369_p2 = (i_reg_352 + 5'd1);

assign state_d0 = tmp_state_q0;

assign tmp_4_fu_375_p1 = i_reg_352;

assign tmp_fu_363_p2 = ((i_reg_352 == 5'd16) ? 1'b1 : 1'b0);

always @ (posedge ap_clk) begin
    tmp_4_reg_468[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
end

endmodule //InvShiftRows
